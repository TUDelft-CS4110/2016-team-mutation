<?xml version="1.0" encoding="UTF-8"?>
<mutations>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>all</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>3406</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorAllTest.testBackpressureIfNoneRequestedNoneShouldBeDelivered(rx.internal.operators.OperatorAllTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>amb</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)Lrx/Observable;</methodDescription><lineNumber>354</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>amb</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>376</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testProducerRequestThroughAmb(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>amb</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>400</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>amb</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>426</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>amb</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>454</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>amb</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>484</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>amb</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>516</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>amb</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>550</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>amb</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>586</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>ambWith</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>3426</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.ObservableTests.testAmbWith(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>asObservable</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>3441</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorAsObservableTest.testHiding(rx.internal.operators.OperatorAsObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>buffer</mutatedMethod><methodDescription>(I)Lrx/Observable;</methodDescription><lineNumber>3489</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithSizeThrows(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>buffer</mutatedMethod><methodDescription>(II)Lrx/Observable;</methodDescription><lineNumber>3515</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.CovarianceTest.testComposeWithDeltaLogic(rx.CovarianceTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>buffer</mutatedMethod><methodDescription>(JJLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>3545</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>buffer</mutatedMethod><methodDescription>(JJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>3577</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorBufferTest.testBufferStopsWhenUnsubscribed1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>buffer</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>3605</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorBufferTest.testBufferWithTimeDoesntUnsubscribeDownstream(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>buffer</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;I)Lrx/Observable;</methodDescription><lineNumber>3637</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorBufferTest.testLongTimeAction(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>buffer</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;ILrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>3672</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorBufferTest.testTimedAndCount(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>buffer</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>3703</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithTimeTake1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>buffer</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>3760</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithBOEmptyLastViaBoundary(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>buffer</mutatedMethod><methodDescription>(Lrx/Observable;I)Lrx/Observable;</methodDescription><lineNumber>3792</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithBOEmptyLastViaBoundary(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>buffer</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>3730</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithStartEndEndFunctionThrows(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>buffer</mutatedMethod><methodDescription>(Lrx/functions/Func0;)Lrx/Observable;</methodDescription><lineNumber>3467</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorBufferTest.testObservableBasedCloser(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>cache</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>3826</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorReplayTest.testUnsubscribeSource(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>cache</mutatedMethod><methodDescription>(I)Lrx/Observable;</methodDescription><lineNumber>3835</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>cacheWithInitialCapacity</mutatedMethod><methodDescription>(I)Lrx/Observable;</methodDescription><lineNumber>3873</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>cast</mutatedMethod><methodDescription>(Ljava/lang/Class;)Lrx/Observable;</methodDescription><lineNumber>3894</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorCastTest.testCastWithWrongType(rx.internal.operators.OperatorCastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>collect</mutatedMethod><methodDescription>(Lrx/functions/Func0;Lrx/functions/Action2;)Lrx/Observable;</methodDescription><lineNumber>3938</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest>rx.ObservableTests.testCollectToString(rx.ObservableTests)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>combineLatest</mutatedMethod><methodDescription>(Ljava/lang/Iterable;Lrx/functions/FuncN;)Lrx/Observable;</methodDescription><lineNumber>906</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>combineLatest</mutatedMethod><methodDescription>(Ljava/util/List;Lrx/functions/FuncN;)Lrx/Observable;</methodDescription><lineNumber>881</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.testZeroSources(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>combineLatest</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func9;)Lrx/Observable;</methodDescription><lineNumber>857</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>45</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test9SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>combineLatest</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func8;)Lrx/Observable;</methodDescription><lineNumber>815</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>41</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test8SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>combineLatest</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func7;)Lrx/Observable;</methodDescription><lineNumber>776</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>37</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test7SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>combineLatest</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func6;)Lrx/Observable;</methodDescription><lineNumber>739</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>33</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test6SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>combineLatest</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func5;)Lrx/Observable;</methodDescription><lineNumber>704</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>29</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test5SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>combineLatest</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func4;)Lrx/Observable;</methodDescription><lineNumber>671</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test4SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>combineLatest</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func3;)Lrx/Observable;</methodDescription><lineNumber>640</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test3SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>combineLatest</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/functions/Func2;)Lrx/Observable;</methodDescription><lineNumber>612</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>compose</mutatedMethod><methodDescription>(Lrx/Observable$Transformer;)Lrx/Observable;</methodDescription><lineNumber>271</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.ObservableTests.testCompose(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>926</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.CovarianceTest.testComposeWithDeltaLogic(rx.CovarianceTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>948</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.CovarianceTest.testComposeWithDeltaLogic(rx.CovarianceTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>972</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>998</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>1026</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>1056</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>1088</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>1122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>1158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concatEager</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)Lrx/Observable;</methodDescription><lineNumber>5096</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testInnerEmpty(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concatEager</mutatedMethod><methodDescription>(Ljava/lang/Iterable;I)Lrx/Observable;</methodDescription><lineNumber>5122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concatEager</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>5147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concatEager</mutatedMethod><methodDescription>(Lrx/Observable;I)Lrx/Observable;</methodDescription><lineNumber>5173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concatEager</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>4831</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testInnerEmpty(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concatEager</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>4861</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testEagerness3(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concatEager</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>4892</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testEagerness4(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concatEager</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>4925</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>27</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testEagerness5(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concatEager</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>4959</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>31</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testEagerness6(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concatEager</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>4995</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>35</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testEagerness7(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concatEager</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>5032</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>39</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testEagerness8(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concatEager</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>5071</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>43</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testEagerness9(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concatMap</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>3960</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concatMapEager</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>5199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testMainError(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concatMapEager</mutatedMethod><methodDescription>(Lrx/functions/Func1;I)Lrx/Observable;</methodDescription><lineNumber>5226</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concatMapEager</mutatedMethod><methodDescription>(Lrx/functions/Func1;I)Lrx/Observable;</methodDescription><lineNumber>5226</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testInvalidCapacityHint(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concatMapEager</mutatedMethod><methodDescription>(Lrx/functions/Func1;I)Lrx/Observable;</methodDescription><lineNumber>5229</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>30</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testMainError(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concatMapIterable</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>3983</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorConcatTest.testConcatMapIterable(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>concatWith</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>4003</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorConcatTest.testRequestOverflowDoesNotStallStream(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>contains</mutatedMethod><methodDescription>(Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>4023</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.ObservableTests.testContainsWithEmptyObservable(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>count</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>4048</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.ObservableTests.testCountError(rx.ObservableTests)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>countLong</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>4079</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/Observable$OnSubscribe;)Lrx/Observable;</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorElementAtTest.testElementAtWithMinusIndex(rx.internal.operators.OperatorElementAtTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/observables/AsyncOnSubscribe;)Lrx/Observable;</methodDescription><lineNumber>166</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/observables/SyncOnSubscribe;)Lrx/Observable;</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.observables.SyncOnSubscribeTest.testExtendingBase(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>debounce</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>4153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>debounce</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>4195</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorDebounceTest.testDebounceNeverEmits(rx.internal.operators.OperatorDebounceTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>debounce</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>4114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorDebounceTest.debounceSelectorObservableThrows(rx.internal.operators.OperatorDebounceTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>defaultIfEmpty</mutatedMethod><methodDescription>(Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>4216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorDefaultIfEmptyTest.testDefaultIfEmptyWithEmpty(rx.internal.operators.OperatorDefaultIfEmptyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>defer</mutatedMethod><methodDescription>(Lrx/functions/Func0;)Lrx/Observable;</methodDescription><lineNumber>1186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OnSubscribeDeferTest.testDeferFunctionThrows(rx.internal.operators.OnSubscribeDeferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>delay</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>4322</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testBackpressure(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>delay</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>4345</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorDelayTest.testErrorRunsBeforeOnNext(rx.internal.operators.OperatorDelayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>delay</mutatedMethod><methodDescription>(Lrx/functions/Func0;Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>4274</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorDelayTest.testDelayWithObservableSubscriptionFunctionThrows(rx.internal.operators.OperatorDelayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>delay</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>4301</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorDelayTest.testDelayWithObservableDelayFunctionThrows(rx.internal.operators.OperatorDelayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>delaySubscription</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>4365</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorDelayTest.testBackpressureWithSubscriptionTimedDelay(rx.internal.operators.OperatorDelayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>delaySubscription</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>4389</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorDelayTest.testDelaySubscriptionCancelBeforeTime(rx.internal.operators.OperatorDelayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>delaySubscription</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>4433</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.CompletableTest.andThenNever(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>delaySubscription</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>4436</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest>rx.CompletableTest.andThenNever(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>delaySubscription</mutatedMethod><methodDescription>(Lrx/functions/Func0;)Lrx/Observable;</methodDescription><lineNumber>4410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorDelayTest.testDelayWithObservableSubscriptionFunctionThrows(rx.internal.operators.OperatorDelayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>dematerialize</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>4458</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorDematerializeTest.testCompletePassThru(rx.internal.operators.OperatorDematerializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>distinct</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>4475</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorDistinctTest.testDistinctOfNone(rx.internal.operators.OperatorDistinctTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>distinct</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>4495</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorDistinctTest.testDistinctOfNoneWithKeySelector(rx.internal.operators.OperatorDistinctTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>distinctUntilChanged</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>4513</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorDistinctUntilChangedTest.testDistinctUntilChangedOfNone(rx.internal.operators.OperatorDistinctUntilChangedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>distinctUntilChanged</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>4534</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorDistinctUntilChangedTest.testDistinctUntilChangedOfNoneWithKeySelector(rx.internal.operators.OperatorDistinctUntilChangedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>doAfterTerminate</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Observable;</methodDescription><lineNumber>5365</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorDoAfterTerminateTest.testDoAfterTerminateCalledOnError(rx.internal.operators.OperatorDoAfterTerminateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>doOnCompleted</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Observable;</methodDescription><lineNumber>4568</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><killingTest>rx.ObservableDoOnTest.testDoOnCompleted(rx.ObservableDoOnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>doOnEach</mutatedMethod><methodDescription>(Lrx/Observer;)Lrx/Observable;</methodDescription><lineNumber>4627</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorDoOnEachTest.testDoOnEach(rx.internal.operators.OperatorDoOnEachTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>doOnEach</mutatedMethod><methodDescription>(Lrx/functions/Action1;)Lrx/Observable;</methodDescription><lineNumber>4604</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorDelayTest.testDelayEmitsEverything(rx.internal.operators.OperatorDelayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>doOnError</mutatedMethod><methodDescription>(Lrx/functions/Action1;)Lrx/Observable;</methodDescription><lineNumber>4664</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorDoOnEachTest.testOnErrorThrows(rx.internal.operators.OperatorDoOnEachTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>doOnNext</mutatedMethod><methodDescription>(Lrx/functions/Action1;)Lrx/Observable;</methodDescription><lineNumber>4698</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorIgnoreElementsTest.testDoesNotHangAndProcessesAllUsingBackpressure(rx.internal.operators.OperatorIgnoreElementsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>doOnRequest</mutatedMethod><methodDescription>(Lrx/functions/Action1;)Lrx/Observable;</methodDescription><lineNumber>4723</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorDoOnRequestTest.dontRequestIfDownstreamRequestsLate(rx.internal.operators.OperatorDoOnRequestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>doOnSubscribe</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Observable;</methodDescription><lineNumber>4744</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnSubscribe(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>doOnTerminate</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Observable;</methodDescription><lineNumber>4784</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OnSubscribeUsingTest.testUsingDisposesEagerlyBeforeCompletion(rx.internal.operators.OnSubscribeUsingTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>doOnUnsubscribe</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Observable;</methodDescription><lineNumber>4805</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OnSubscribeCompletableTest.testShouldUseUnsafeSubscribeInternallyNotSubscribe(rx.internal.operators.OnSubscribeCompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>elementAt</mutatedMethod><methodDescription>(I)Lrx/Observable;</methodDescription><lineNumber>5253</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorElementAtTest.testElementAtWithIndexOutOfBounds(rx.internal.operators.OperatorElementAtTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>elementAtOrDefault</mutatedMethod><methodDescription>(ILjava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>5277</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorElementAtTest.testElementAtOrDefault(rx.internal.operators.OperatorElementAtTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>empty</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>1217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureBufferNegativeCapacity(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Lrx/Observable;</methodDescription><lineNumber>1239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.ObservableTests.testForEachWithNull(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>exists</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>5301</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorAnyTest.testBackpressureIfNoneRequestedNoneShouldBeDelivered(rx.internal.operators.OperatorAnyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>extend</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Ljava/lang/Object;</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.ObservableConversionTest.testConversionBetweenObservableClasses(rx.ObservableConversionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>filter</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>5321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorFilterTest.testWithBackpressure(rx.internal.operators.OperatorFilterTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>finallyDo</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Observable;</methodDescription><lineNumber>5344</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>first</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>5383</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorFirstTest.testFirstWithEmpty(rx.internal.operators.OperatorFirstTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>first</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>5403</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorFirstTest.testFirstWithPredicate(rx.internal.operators.OperatorFirstTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>firstOrDefault</mutatedMethod><methodDescription>(Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>5423</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorFirstTest.testFirstOrDefaultWithEmpty(rx.internal.operators.OperatorFirstTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>firstOrDefault</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>5446</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorFirstTest.testFirstOrDefaultWithPredicateAndEmpty(rx.internal.operators.OperatorFirstTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>flatMap</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>5469</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.CovarianceTest.testComposeWithDeltaLogic(rx.CovarianceTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>flatMap</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>5470</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.internal.util.ScalarSynchronousObservableTest.syncFlatMapJustObserverNextThrows(rx.internal.util.ScalarSynchronousObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>flatMap</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>5472</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><killingTest>rx.ObservableTests.testSubscribeWithoutOnError(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>flatMap</mutatedMethod><methodDescription>(Lrx/functions/Func1;I)Lrx/Observable;</methodDescription><lineNumber>5500</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testFlatMapMaxConcurrent(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>flatMap</mutatedMethod><methodDescription>(Lrx/functions/Func1;I)Lrx/Observable;</methodDescription><lineNumber>5501</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>flatMap</mutatedMethod><methodDescription>(Lrx/functions/Func1;I)Lrx/Observable;</methodDescription><lineNumber>5503</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testFlatMapMaxConcurrent(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>flatMap</mutatedMethod><methodDescription>(Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func0;)Lrx/Observable;</methodDescription><lineNumber>5534</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testFlatMapTransformsOnCompletedFuncThrows(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>flatMap</mutatedMethod><methodDescription>(Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func0;I)Lrx/Observable;</methodDescription><lineNumber>5569</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testFlatMapTransformsMaxConcurrentNormal(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>flatMap</mutatedMethod><methodDescription>(Lrx/functions/Func1;Lrx/functions/Func2;)Lrx/Observable;</methodDescription><lineNumber>5597</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testCollectionFunctionThrows(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>flatMap</mutatedMethod><methodDescription>(Lrx/functions/Func1;Lrx/functions/Func2;I)Lrx/Observable;</methodDescription><lineNumber>5629</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testFlatMapSelectorMaxConcurrent(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>flatMapIterable</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>5652</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>flatMapIterable</mutatedMethod><methodDescription>(Lrx/functions/Func1;I)Lrx/Observable;</methodDescription><lineNumber>5682</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>flatMapIterable</mutatedMethod><methodDescription>(Lrx/functions/Func1;Lrx/functions/Func2;)Lrx/Observable;</methodDescription><lineNumber>5711</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testCollectionFunctionThrows(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>flatMapIterable</mutatedMethod><methodDescription>(Lrx/functions/Func1;Lrx/functions/Func2;I)Lrx/Observable;</methodDescription><lineNumber>5747</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)Lrx/Observable;</methodDescription><lineNumber>1347</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorElementAtTest.testElementAtWithMinusIndex(rx.internal.operators.OperatorElementAtTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>(Ljava/util/concurrent/Future;)Lrx/Observable;</methodDescription><lineNumber>1266</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.CompletableTest.fromFutureThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>1297</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>(Ljava/util/concurrent/Future;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>1326</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>([Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>1368</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.SubscriberTest.testOnStartRequestsAreAdditive(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>([Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>1371</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest>rx.SubscriberTest.testOnStartRequestsAreAdditive(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>([Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>1369</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>([Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>1372</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>([Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>1374</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>35</index><killingTest>rx.internal.operators.OperatorLastTest.testLastViaObservable(rx.internal.operators.OperatorLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>fromCallable</mutatedMethod><methodDescription>(Ljava/util/concurrent/Callable;)Lrx/Observable;</methodDescription><lineNumber>1401</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OnSubscribeFromCallableTest.shouldNotInvokeFuncUntilSubscription(rx.internal.operators.OnSubscribeFromCallableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>groupBy</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>5885</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupByOnAsynchronousSourceAcceptsMultipleSubscriptions(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>groupBy</mutatedMethod><methodDescription>(Lrx/functions/Func1;Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>5854</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorGroupByTest.keySelectorThrows(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>groupJoin</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func2;)Lrx/Observable;</methodDescription><lineNumber>5915</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OnSubscribeGroupJoinTest.rightDurationSelectorThrows(rx.internal.operators.OnSubscribeGroupJoinTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>ignoreElements</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>5932</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorIgnoreElementsTest.testErrorReceived(rx.internal.operators.OperatorIgnoreElementsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>interval</mutatedMethod><methodDescription>(JJLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>1472</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testRefCountAsync(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>interval</mutatedMethod><methodDescription>(JJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>1502</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OnSubscribeTimerTest.testTimerPeriodically(rx.internal.operators.OnSubscribeTimerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>interval</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>1421</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupByOnAsynchronousSourceAcceptsMultipleSubscriptions(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>interval</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>1444</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OnSubscribeTimerTest.testInterval(rx.internal.operators.OnSubscribeTimerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>5952</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorIgnoreElementsTest.testWithEmpty(rx.internal.operators.OperatorIgnoreElementsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>join</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func2;)Lrx/Observable;</methodDescription><lineNumber>5986</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.rightDurationSelectorThrows(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>just</mutatedMethod><methodDescription>(Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>1530</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.CovarianceTest.testCovarianceOfCompose(rx.CovarianceTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>just</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>1554</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.CovarianceTest.testComposeWithDeltaLogic(rx.CovarianceTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>just</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>1580</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorLastTest.testLastViaObservable(rx.internal.operators.OperatorLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>just</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>1608</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><killingTest>rx.SubscriberTest.testNegativeRequestThrowsIllegalArgumentException(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>just</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>1638</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>27</index><killingTest>rx.SubscriberTest.testOnStartRequestsAreAdditive(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>just</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>1670</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>31</index><killingTest>rx.internal.operators.OperatorToMultimapTest.testToMultimapWithMapThrowingFactory(rx.internal.operators.OperatorToMultimapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>just</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>1704</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>35</index><killingTest>rx.internal.operators.OperatorSkipWhileTest.testSkipEverything(rx.internal.operators.OperatorSkipWhileTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>just</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>1740</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>39</index><killingTest>rx.internal.operators.OperatorDistinctUntilChangedTest.testDistinctUntilChangedOfSourceWithNulls(rx.internal.operators.OperatorDistinctUntilChangedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>just</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>1778</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>43</index><killingTest>rx.internal.operators.OperatorDistinctTest.testDistinctOfNormalSource(rx.internal.operators.OperatorDistinctTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>just</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>1818</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>47</index><killingTest>rx.schedulers.ImmediateSchedulerTest.testObserveOn(rx.schedulers.ImmediateSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>last</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>6004</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeUsingTest.testUsingWithResourceFactoryError(rx.internal.operators.OnSubscribeUsingTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>last</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>6026</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorLastTest.testLastWithPredicateAndEmpty(rx.internal.operators.OperatorLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>lastOrDefault</mutatedMethod><methodDescription>(Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>6046</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.observables.BlockingObservableTest.testLastOrDefault2(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>lastOrDefault</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>6069</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorLastTest.testLastOrDefaultWithPredicateAndEmpty(rx.internal.operators.OperatorLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>lift</mutatedMethod><methodDescription>(Lrx/Observable$Operator;)Lrx/Observable;</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorLastTest.testLastViaObservable(rx.internal.operators.OperatorLastTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>limit</mutatedMethod><methodDescription>(I)Lrx/Observable;</methodDescription><lineNumber>6094</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>map</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>6114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.CovarianceTest.testComposeWithDeltaLogic(rx.CovarianceTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>mapNotification</mutatedMethod><methodDescription>(Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func0;)Lrx/Observable;</methodDescription><lineNumber>6118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testFlatMapTransformsOnCompletedFuncThrows(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>materialize</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>6136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorMaterializeTest.testUnsubscribeJustBeforeCompletionNotificationShouldPreventThatNotificationArriving(rx.internal.operators.OperatorMaterializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)Lrx/Observable;</methodDescription><lineNumber>1840</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorMergeTest.testMergeList(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Ljava/lang/Iterable;I)Lrx/Observable;</methodDescription><lineNumber>1867</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorMergeMaxConcurrentTest.testSimpleOneLess(rx.internal.operators.OperatorMergeMaxConcurrentTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>1891</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.CovarianceTest.testComposeWithDeltaLogic(rx.CovarianceTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>1892</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>1894</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><killingTest>rx.ObservableTests.testMergeWith(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Observable;I)Lrx/Observable;</methodDescription><lineNumber>1924</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorMergeTest.zeroMaxConcurrent(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Observable;I)Lrx/Observable;</methodDescription><lineNumber>1925</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Observable;I)Lrx/Observable;</methodDescription><lineNumber>1927</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest>rx.internal.operators.OperatorMergeMaxConcurrentTest.testSimpleOneLess(rx.internal.operators.OperatorMergeMaxConcurrentTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>1951</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.ObservableTests.testMergeWith(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>1977</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>18</index><killingTest>rx.internal.operators.OperatorMergeTest.testConcurrencyWithBrokenOnCompleteContract(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>2005</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest>rx.internal.operators.OperatorMergeTest.testError2(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>2035</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>2067</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>2101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>2137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>38</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>2175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>42</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>([Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>2196</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.ObservableTests.testMergeWith(rx.ObservableTests)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>([Lrx/Observable;I)Lrx/Observable;</methodDescription><lineNumber>2221</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>mergeDelayError</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)Lrx/Observable;</methodDescription><lineNumber>2310</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.mergeIterable(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>mergeDelayError</mutatedMethod><methodDescription>(Ljava/lang/Iterable;I)Lrx/Observable;</methodDescription><lineNumber>2340</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>mergeDelayError</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>2249</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testSynchronousError(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>mergeDelayError</mutatedMethod><methodDescription>(Lrx/Observable;I)Lrx/Observable;</methodDescription><lineNumber>2282</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testDelayErrorMaxConcurrent(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>mergeDelayError</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>2370</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testMergeArray(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>mergeDelayError</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>2402</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorMergeTest.shouldNotReceivedDelayedErrorWhileThereAreStillScalarSynchronousEmissionsInTheQueue(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>mergeDelayError</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>2436</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testErrorDelayed4(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>mergeDelayError</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>2472</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>mergeDelayError</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>2510</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>mergeDelayError</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>2551</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>mergeDelayError</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>2594</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>mergeDelayError</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>2638</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>mergeWith</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>6157</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.ObservableTests.testMergeWith(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>nest</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>2655</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorRetryWithPredicateTest.testUnsubscribeFromRetry(rx.internal.operators.OperatorRetryWithPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>never</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>2675</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OnSubscribeCompletableTest.testNeverObservable(rx.internal.operators.OnSubscribeCompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>observeOn</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>6182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testObserveOn(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>observeOn</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>6183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.observables.BlockingObservableTest.testRun(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>observeOn</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>6185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testObserveOn(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>observeOn</mutatedMethod><methodDescription>(Lrx/Scheduler;Z)Lrx/Observable;</methodDescription><lineNumber>6212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testErrorDelayed(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>observeOn</mutatedMethod><methodDescription>(Lrx/Scheduler;Z)Lrx/Observable;</methodDescription><lineNumber>6213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>observeOn</mutatedMethod><methodDescription>(Lrx/Scheduler;Z)Lrx/Observable;</methodDescription><lineNumber>6215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testErrorDelayed(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>ofType</mutatedMethod><methodDescription>(Ljava/lang/Class;)Lrx/Observable;</methodDescription><lineNumber>6233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.ObservableTests.testOfTypeWithPolymorphism(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>onBackpressureBuffer</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>6255</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>onBackpressureBuffer</mutatedMethod><methodDescription>(J)Lrx/Observable;</methodDescription><lineNumber>6275</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>onBackpressureBuffer</mutatedMethod><methodDescription>(JLrx/functions/Action0;)Lrx/Observable;</methodDescription><lineNumber>6295</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testNonFatalExceptionThrownByOnOverflowIsNotReportedByUpstream(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>onBackpressureDrop</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>6338</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorOnBackpressureDropTest.testRequestOverflow(rx.internal.operators.OperatorOnBackpressureDropTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>onBackpressureDrop</mutatedMethod><methodDescription>(Lrx/functions/Action1;)Lrx/Observable;</methodDescription><lineNumber>6318</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorOnBackpressureDropTest.testNonFatalExceptionFromOverflowActionIsNotReportedFromUpstreamOperator(rx.internal.operators.OperatorOnBackpressureDropTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>onBackpressureLatest</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>6360</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>onErrorResumeNext</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>6426</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorOnErrorResumeNextViaObservableTest.testResumeNextWithFailedOnSubscribe(rx.internal.operators.OperatorOnErrorResumeNextViaObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>onErrorResumeNext</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>6393</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorOnErrorResumeNextViaFunctionTest.testOnErrorResumeReceivesErrorFromPreviousNonProtectedOperator(rx.internal.operators.OperatorOnErrorResumeNextViaFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>onErrorReturn</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>6456</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorOnErrorReturnTest.testFunctionThrowsError(rx.internal.operators.OperatorOnErrorReturnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>onExceptionResumeNext</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>6492</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorOnExceptionResumeNextViaObservableTest.testResumeNextWithRuntimeException(rx.internal.operators.OperatorOnExceptionResumeNextViaObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>publish</mutatedMethod><methodDescription>()Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>6511</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorPublishTest.testNonNullConnection(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>publish</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>6534</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oneStartOnly(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>range</mutatedMethod><methodDescription>(II)Lrx/Observable;</methodDescription><lineNumber>2698</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testRangeWithOverflow2(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>range</mutatedMethod><methodDescription>(II)Lrx/Observable;</methodDescription><lineNumber>2704</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>30</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testRangeWithOverflow3(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>range</mutatedMethod><methodDescription>(II)Lrx/Observable;</methodDescription><lineNumber>2704</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>27</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testRangeWithOverflow3(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>range</mutatedMethod><methodDescription>(II)Lrx/Observable;</methodDescription><lineNumber>2704</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>29</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testRangeWithOverflow3(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>range</mutatedMethod><methodDescription>(II)Lrx/Observable;</methodDescription><lineNumber>2710</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>59</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testNearMaxValueWithoutBackpressure(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>range</mutatedMethod><methodDescription>(II)Lrx/Observable;</methodDescription><lineNumber>2710</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>60</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testNearMaxValueWithoutBackpressure(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>range</mutatedMethod><methodDescription>(II)Lrx/Observable;</methodDescription><lineNumber>2698</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testRangeWithOverflow2(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>range</mutatedMethod><methodDescription>(II)Lrx/Observable;</methodDescription><lineNumber>2701</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testRangeWithOverflow2(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>range</mutatedMethod><methodDescription>(II)Lrx/Observable;</methodDescription><lineNumber>2704</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testRangeWithOverflow4(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>range</mutatedMethod><methodDescription>(II)Lrx/Observable;</methodDescription><lineNumber>2707</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithoutInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>range</mutatedMethod><methodDescription>(II)Lrx/Observable;</methodDescription><lineNumber>2702</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testEmptyRangeSendsOnCompleteEagerlyWithRequestZero(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>range</mutatedMethod><methodDescription>(II)Lrx/Observable;</methodDescription><lineNumber>2708</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>49</index><killingTest>rx.CompletableTest.fromObservableSome(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>range</mutatedMethod><methodDescription>(II)Lrx/Observable;</methodDescription><lineNumber>2710</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>63</index><killingTest>rx.internal.operators.OperatorTakeTest.takeNegative(rx.internal.operators.OperatorTakeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>range</mutatedMethod><methodDescription>(IILrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>2733</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.ObservableTests.testRangeWithScheduler(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>reduce</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/functions/Func2;)Lrx/Observable;</methodDescription><lineNumber>6606</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.ObservableTests.testCountError(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>reduce</mutatedMethod><methodDescription>(Lrx/functions/Func2;)Lrx/Observable;</methodDescription><lineNumber>6573</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.ReduceTests.reduceInts(rx.ReduceTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>repeat</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>6622</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.CompletableTest.repeatError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>repeat</mutatedMethod><methodDescription>(J)Lrx/Observable;</methodDescription><lineNumber>6664</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.CompletableTest.repeat0Time(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>repeat</mutatedMethod><methodDescription>(JLrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>6687</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>repeat</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>6641</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorRepeatTest.testRepetition(rx.internal.operators.OperatorRepeatTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>repeatWhen</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>6757</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>repeatWhen</mutatedMethod><methodDescription>(Lrx/functions/Func1;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>6723</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>6781</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(I)Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>7115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressureBounded(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(IJLjava/util/concurrent/TimeUnit;)Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>7146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(IJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>7181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(IJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>7181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorReplayTest.testBufferedWindowReplay(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(IJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>7184</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorReplayTest.testBufferedWindowReplay(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(ILrx/Scheduler;)Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>7212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>7240</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>7270</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorReplayTest.testWindowedReplay(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>7297</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>6808</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorReplayTest.testSynchronousDisconnect(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/functions/Func1;I)Lrx/Observable;</methodDescription><lineNumber>6844</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorReplayTest.testBufferedReplaySelector(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/functions/Func1;IJLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>6885</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/functions/Func1;IJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>6925</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/functions/Func1;IJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>6925</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/functions/Func1;IJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>6928</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/functions/Func1;ILrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>6966</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/functions/Func1;JLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>7009</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/functions/Func1;JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>7044</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorReplayTest.testWindowedReplaySelector(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/functions/Func1;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>7079</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>retry</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>7322</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorRetryTest.testUnsubscribeFromRetry(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>retry</mutatedMethod><methodDescription>(J)Lrx/Observable;</methodDescription><lineNumber>7350</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorRetryTest.testSourceObservableRetry0(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>retry</mutatedMethod><methodDescription>(Lrx/functions/Func2;)Lrx/Observable;</methodDescription><lineNumber>7373</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorRetryWithPredicateTest.testUnsubscribeFromRetry(rx.internal.operators.OperatorRetryWithPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>retryWhen</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>7436</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorRetryTest.testOnCompletedFromNotificationHandler(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>retryWhen</mutatedMethod><methodDescription>(Lrx/functions/Func1;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>7474</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>sample</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>7500</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorSampleTest.testSampleUnsubscribe(rx.internal.operators.OperatorSampleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>sample</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>7528</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorSampleTest.testSampleUnsubscribe(rx.internal.operators.OperatorSampleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>sample</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>7553</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorSampleTest.testSampleOtherUnboundedIn(rx.internal.operators.OperatorSampleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>scan</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/functions/Func2;)Lrx/Observable;</methodDescription><lineNumber>7609</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>scan</mutatedMethod><methodDescription>(Lrx/functions/Func2;)Lrx/Observable;</methodDescription><lineNumber>7578</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.ReduceTests.reduceCovariance(rx.ReduceTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>sequenceEqual</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>2756</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorSequenceEqualTest.testWithError1(rx.internal.operators.OperatorSequenceEqualTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>sequenceEqual</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/functions/Func2;)Lrx/Observable;</methodDescription><lineNumber>2791</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorSequenceEqualTest.testWithError1(rx.internal.operators.OperatorSequenceEqualTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>serialize</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>7633</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSerializeTest.testSingleThreadedBasic(rx.internal.operators.OperatorSerializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>share</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>7658</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorPublishTest.testBackpressureTwoConsumers(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>single</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>7680</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.BlockingOperatorToFutureTest.testGetAfterCancel(rx.internal.operators.BlockingOperatorToFutureTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>single</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>7706</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorSingleTest.testSingleWithPredicate(rx.internal.operators.OperatorSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>singleOrDefault</mutatedMethod><methodDescription>(Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>7729</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorSingleTest.testSingleOrDefaultWithEmpty(rx.internal.operators.OperatorSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>singleOrDefault</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>7755</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorSingleTest.testSingleOrDefaultWithPredicateAndEmpty(rx.internal.operators.OperatorSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(I)Lrx/Observable;</methodDescription><lineNumber>7775</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.CovarianceTest.testComposeWithDeltaLogic(rx.CovarianceTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>7797</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>skip</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>7821</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorSkipTimedTest.testSkipTimedFinishBeforeTime(rx.internal.operators.OperatorSkipTimedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>skipLast</mutatedMethod><methodDescription>(I)Lrx/Observable;</methodDescription><lineNumber>7847</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorSkipLastTest.testSkipLastEmpty(rx.internal.operators.OperatorSkipLastTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>skipLast</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>7871</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>skipLast</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>7897</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorSkipLastTimedTest.testSkipLastTimedCompleteBeforeTime(rx.internal.operators.OperatorSkipLastTimedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>skipUntil</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>7918</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorSkipUntilTest.otherEmpty(rx.internal.operators.OperatorSkipUntilTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>skipWhile</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>7938</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorSkipWhileTest.testPredicateFatalError(rx.internal.operators.OperatorSkipWhileTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>startWith</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)Lrx/Observable;</methodDescription><lineNumber>7978</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.StartWithTests.startWithIterable(rx.StartWithTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>startWith</mutatedMethod><methodDescription>(Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>7998</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.CovarianceTest.testComposeWithDeltaLogic(rx.CovarianceTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>startWith</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>8020</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>startWith</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>8044</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>startWith</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>8070</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>startWith</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>8098</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>startWith</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>8128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>startWith</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>8160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>startWith</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>8194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>startWith</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>8230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>startWith</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>7958</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.CompletableTest.startWithFlowableError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>()Lrx/Subscription;</methodDescription><lineNumber>8248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.subjects.ReplaySubjectTest.testSubscriptionLeak(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Observer;)Lrx/Subscription;</methodDescription><lineNumber>8428</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observers.TestObserverTest.testErrorSwallowed(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Observer;)Lrx/Subscription;</methodDescription><lineNumber>8429</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.ObservableTests.testSubscribingSubscriberAsObserverMaintainsSubscriptionChain(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Observer;)Lrx/Subscription;</methodDescription><lineNumber>8431</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorDelayTest.testDelaySubscriptionCancelBeforeTime(rx.internal.operators.OperatorDelayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscription;</methodDescription><lineNumber>8534</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.ObservableTests.testSubscribingSubscriberAsObserverMaintainsSubscriptionChain(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;Lrx/Observable;)Lrx/Subscription;</methodDescription><lineNumber>8539</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testConcurrentOnNextFailsValidation(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;Lrx/Observable;)Lrx/Subscription;</methodDescription><lineNumber>8542</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testConcurrentOnNextFailsValidation(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;Lrx/Observable;)Lrx/Subscription;</methodDescription><lineNumber>8558</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest>rx.plugins.RxJavaPluginsTest.testOnErrorWhenImplementedViaSubscribe(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;Lrx/Observable;)Lrx/Subscription;</methodDescription><lineNumber>8568</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>58</index><killingTest>rx.ObservableTests.testSubscribingSubscriberAsObserverMaintainsSubscriptionChain(rx.ObservableTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;Lrx/Observable;)Lrx/Subscription;</methodDescription><lineNumber>8585</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>117</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;Lrx/Observable;)Lrx/Subscription;</methodDescription><lineNumber>8551</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.internal.operators.OperatorAllTest.testBackpressureIfNoneRequestedNoneShouldBeDelivered(rx.internal.operators.OperatorAllTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;Lrx/Observable;)Lrx/Subscription;</methodDescription><lineNumber>8567</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>51</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testConcurrentOnNextFailsValidation(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;Lrx/Observable;)Lrx/Subscription;</methodDescription><lineNumber>8571</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>66</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;Lrx/Observable;)Lrx/Subscription;</methodDescription><lineNumber>8574</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>73</index><killingTest>rx.ObservableTests.testCustomObservableWithErrorInObservableSynchronous(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;Lrx/Observable;)Lrx/Subscription;</methodDescription><lineNumber>8576</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>84</index><killingTest>rx.exceptions.ExceptionsTest.testOnErrorExceptionIsThrownFromSubscribe(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/functions/Action1;)Lrx/Subscription;</methodDescription><lineNumber>8286</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.ObservableTests.testForEachWithNull(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/functions/Action1;)Lrx/Subscription;</methodDescription><lineNumber>8290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest>rx.internal.operators.OperatorRetryWithPredicateTest.testUnsubscribeFromRetry(rx.internal.operators.OperatorRetryWithPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;)Lrx/Subscription;</methodDescription><lineNumber>8331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testUpstreamErrorAllowsRetry(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;)Lrx/Subscription;</methodDescription><lineNumber>8334</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testUpstreamErrorAllowsRetry(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;)Lrx/Subscription;</methodDescription><lineNumber>8338</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>35</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>8383</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorReplayTest.testSynchronousDisconnect(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>8386</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorReplayTest.testSynchronousDisconnect(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>8389</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest>rx.internal.operators.OperatorReplayTest.testSynchronousDisconnect(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>8393</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>48</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribeOn</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>8607</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.util.BlockingUtilsTest.awaitCompleteShouldReturnOnEmpty(rx.internal.util.BlockingUtilsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribeOn</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>8608</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.internal.util.ScalarSynchronousObservableTest.asyncObserverNextThrows(rx.internal.util.ScalarSynchronousObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>subscribeOn</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>8610</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest>rx.internal.util.BlockingUtilsTest.awaitCompleteShouldReturnOnEmpty(rx.internal.util.BlockingUtilsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>switchIfEmpty</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>4240</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorSwitchIfEmptyTest.testSwitchShouldTriggerUnsubscribe(rx.internal.operators.OperatorSwitchIfEmptyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>switchMap</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>8631</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorSwitchTest.testIssue2654(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>switchOnNext</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>2817</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSwitchTest.testUnsubscribe(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>take</mutatedMethod><methodDescription>(I)Lrx/Observable;</methodDescription><lineNumber>8655</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.SubscriberTest.testRequestThroughTakeThatReducesRequest(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>take</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>8676</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>take</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>8700</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorTakeTimedTest.testTakeTimedErrorAfterTime(rx.internal.operators.OperatorTakeTimedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>takeFirst</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>8721</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorFirstTest.testFirstOrDefaultWithPredicateAndEmpty(rx.internal.operators.OperatorFirstTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>takeLast</mutatedMethod><methodDescription>(I)Lrx/Observable;</methodDescription><lineNumber>8743</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testTakeLastWithNegativeCount(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>takeLast</mutatedMethod><methodDescription>(I)Lrx/Observable;</methodDescription><lineNumber>8745</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testTakeLastWithNegativeCount(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>takeLast</mutatedMethod><methodDescription>(I)Lrx/Observable;</methodDescription><lineNumber>8744</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testTakeLastWithZeroCount(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>takeLast</mutatedMethod><methodDescription>(I)Lrx/Observable;</methodDescription><lineNumber>8746</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorLastTest.testLastViaObservable(rx.internal.operators.OperatorLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>takeLast</mutatedMethod><methodDescription>(I)Lrx/Observable;</methodDescription><lineNumber>8748</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>31</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testTakeLastEmpty(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>takeLast</mutatedMethod><methodDescription>(IJLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>8772</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>takeLast</mutatedMethod><methodDescription>(IJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>8802</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorTakeLastTimedTest.takeLastTimedWithZeroCapacity(rx.internal.operators.OperatorTakeLastTimedTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>takeLast</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>8824</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>takeLast</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>8850</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorTakeLastTimedTest.takeLastTimedDelayCompletion(rx.internal.operators.OperatorTakeLastTimedTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>takeLastBuffer</mutatedMethod><methodDescription>(I)Lrx/Observable;</methodDescription><lineNumber>8870</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>takeLastBuffer</mutatedMethod><methodDescription>(IJLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>8895</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>takeLastBuffer</mutatedMethod><methodDescription>(IJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>8923</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>takeLastBuffer</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>8945</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>takeLastBuffer</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>8971</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>takeUntil</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>8993</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorTakeUntilTest.testTakeUntilOtherCompleted(rx.internal.operators.OperatorTakeUntilTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>takeUntil</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>9036</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorTakeUntilPredicateTest.takeEmpty(rx.internal.operators.OperatorTakeUntilPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>takeWhile</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>9014</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorTakeWhileTest.testNoUnsubscribeDownstream(rx.internal.operators.OperatorTakeWhileTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>throttleFirst</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>9063</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>throttleFirst</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>9093</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorThrottleFirstTest.testThrottlingWithCompleted(rx.internal.operators.OperatorThrottleFirstTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>throttleLast</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>9122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorSampleTest.testSampleUnsubscribe(rx.internal.operators.OperatorSampleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>throttleLast</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>9154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.ThrottleLastTests.testThrottle(rx.ThrottleLastTests)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>throttleWithTimeout</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>9192</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>throttleWithTimeout</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>9234</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.ThrottleWithTimeoutTests.testThrottle(rx.ThrottleWithTimeoutTests)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>timeInterval</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>9251</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>timeInterval</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>9270</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorTimeIntervalTest.testTimeInterval(rx.internal.operators.OperatorTimeIntervalTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>timeout</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>9420</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.plugins.RxJavaPluginsTest.testOnNextValueCallsPlugin(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>timeout</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>9444</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>timeout</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Observable;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>9471</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorTimeoutTests.shouldUnsubscribeFromUnderlyingSubscriptionOnImmediatelyComplete(rx.internal.operators.OperatorTimeoutTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>timeout</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>9497</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorTimeoutTests.shouldUnsubscribeFromUnderlyingSubscriptionOnImmediatelyComplete(rx.internal.operators.OperatorTimeoutTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>timeout</mutatedMethod><methodDescription>(Lrx/functions/Func0;Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>9301</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorTimeoutWithSelectorTest.testTimeoutSelectorWithFirstTimeoutFirstAndNoOtherObservable(rx.internal.operators.OperatorTimeoutWithSelectorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>timeout</mutatedMethod><methodDescription>(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>9336</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorTimeoutWithSelectorTest.testTimeoutSelectorFirstThrows(rx.internal.operators.OperatorTimeoutWithSelectorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>timeout</mutatedMethod><methodDescription>(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>9339</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorTimeoutWithSelectorTest.testTimeoutSelectorFirstThrows(rx.internal.operators.OperatorTimeoutWithSelectorTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>timeout</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>9367</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>timeout</mutatedMethod><methodDescription>(Lrx/functions/Func1;Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>9397</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>timer</mutatedMethod><methodDescription>(JJLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>2846</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>timer</mutatedMethod><methodDescription>(JJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>2877</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>timer</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>2900</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>timer</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>2927</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OnSubscribeTimerTest.testTimerOnce(rx.internal.operators.OnSubscribeTimerTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>timestamp</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>9514</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>timestamp</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>9534</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorTimestampTest.timestampWithScheduler2(rx.internal.operators.OperatorTimestampTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>toBlocking</mutatedMethod><methodDescription>()Lrx/observables/BlockingObservable;</methodDescription><lineNumber>9548</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.operators.BlockingOperatorMostRecentTest.testMostRecentNull(rx.internal.operators.BlockingOperatorMostRecentTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>toCompletable</mutatedMethod><methodDescription>()Lrx/Completable;</methodDescription><lineNumber>328</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OnSubscribeCompletableTest.testNeverObservable(rx.internal.operators.OnSubscribeCompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>toList</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>9577</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.BlockingOperatorToFutureTest.testToFutureList(rx.internal.operators.BlockingOperatorToFutureTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>toMap</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>9601</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorToMapTest.testKeySelectorThrows(rx.internal.operators.OperatorToMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>toMap</mutatedMethod><methodDescription>(Lrx/functions/Func1;Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>9628</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorToMapTest.testToMapWithValueSelector(rx.internal.operators.OperatorToMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>toMap</mutatedMethod><methodDescription>(Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func0;)Lrx/Observable;</methodDescription><lineNumber>9654</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorToMapTest.testMapFactoryThrows(rx.internal.operators.OperatorToMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>toMultimap</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>9676</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorToMultimapTest.testToMultimap(rx.internal.operators.OperatorToMultimapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>toMultimap</mutatedMethod><methodDescription>(Lrx/functions/Func1;Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>9701</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorToMultimapTest.testToMultimapWithValueSelector(rx.internal.operators.OperatorToMultimapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>toMultimap</mutatedMethod><methodDescription>(Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func0;)Lrx/Observable;</methodDescription><lineNumber>9728</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorToMultimapTest.testMapFactoryThrows(rx.internal.operators.OperatorToMultimapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>toMultimap</mutatedMethod><methodDescription>(Lrx/functions/Func1;Lrx/functions/Func1;Lrx/functions/Func0;Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>9757</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorToMultimapTest.testToMultimapWithCollectionFactory(rx.internal.operators.OperatorToMultimapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>toSingle</mutatedMethod><methodDescription>()Lrx/Single;</methodDescription><lineNumber>303</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OnSubscribeSingleTest.testErrorObservable(rx.internal.operators.OnSubscribeSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>toSortedList</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>9781</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorToObservableSortedListTest.testBackpressureHonored(rx.internal.operators.OperatorToObservableSortedListTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>toSortedList</mutatedMethod><methodDescription>(I)Lrx/Observable;</methodDescription><lineNumber>9832</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>toSortedList</mutatedMethod><methodDescription>(Lrx/functions/Func2;)Lrx/Observable;</methodDescription><lineNumber>9804</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorToObservableSortedListTest.testSortedListWithCustomFunction(rx.internal.operators.OperatorToObservableSortedListTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>toSortedList</mutatedMethod><methodDescription>(Lrx/functions/Func2;I)Lrx/Observable;</methodDescription><lineNumber>9859</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>unsafeSubscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscription;</methodDescription><lineNumber>8475</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest>rx.internal.operators.OperatorTimeoutWithSelectorTest.testTimeoutSelectorWithFirstTimeoutFirstAndNoOtherObservable(rx.internal.operators.OperatorTimeoutWithSelectorTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>unsafeSubscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscription;</methodDescription><lineNumber>8492</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>79</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>unsafeSubscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscription;</methodDescription><lineNumber>8472</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest>rx.SubscriberTest.testOnStartCalledOnceViaUnsafeSubscribe(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>unsafeSubscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscription;</methodDescription><lineNumber>8474</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.CompletableTest.fromObservableError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>unsafeSubscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscription;</methodDescription><lineNumber>8478</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest>rx.internal.operators.OperatorSkipWhileTest.testPredicateFatalError(rx.internal.operators.OperatorSkipWhileTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>unsafeSubscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscription;</methodDescription><lineNumber>8481</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>35</index><killingTest>rx.exceptions.ExceptionsTest.testOnErrorExceptionIsThrownFromUnsafeSubscribe(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>unsafeSubscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscription;</methodDescription><lineNumber>8483</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>46</index><killingTest>rx.exceptions.ExceptionsTest.testOnErrorExceptionIsThrownFromUnsafeSubscribe(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>unsubscribeOn</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>9877</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorUnsubscribeOnTest.testUnsubscribeWhenSubscribeOnAndUnsubscribeOnAreOnSameThread(rx.internal.operators.OperatorUnsubscribeOnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>using</mutatedMethod><methodDescription>(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/functions/Action1;)Lrx/Observable;</methodDescription><lineNumber>2952</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OnSubscribeUsingTest.testUsingWithResourceFactoryError(rx.internal.operators.OnSubscribeUsingTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>using</mutatedMethod><methodDescription>(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/functions/Action1;Z)Lrx/Observable;</methodDescription><lineNumber>2988</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OnSubscribeUsingTest.testUsingWithResourceFactoryError(rx.internal.operators.OnSubscribeUsingTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>window</mutatedMethod><methodDescription>(I)Lrx/Observable;</methodDescription><lineNumber>9953</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testNonOverlappingWindows(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>window</mutatedMethod><methodDescription>(II)Lrx/Observable;</methodDescription><lineNumber>9981</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testSkipAndCountGaplessWindows(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>window</mutatedMethod><methodDescription>(JJLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>10009</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>window</mutatedMethod><methodDescription>(JJLjava/util/concurrent/TimeUnit;ILrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>10072</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimedAndCount(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>window</mutatedMethod><methodDescription>(JJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>10039</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTakeFlatMapCompletes(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>window</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Lrx/Observable;</methodDescription><lineNumber>10099</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTakeFlatMapCompletes(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>window</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;I)Lrx/Observable;</methodDescription><lineNumber>10130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>window</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;ILrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>10163</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimedAndCount(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>window</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>10192</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimed(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>window</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>10246</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableBoundaryThrows(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>window</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>10219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testUnsubscribeAll(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>window</mutatedMethod><methodDescription>(Lrx/functions/Func0;)Lrx/Observable;</methodDescription><lineNumber>9928</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testChildUnsubscribed(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>withLatestFrom</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/functions/Func2;)Lrx/Observable;</methodDescription><lineNumber>9902</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorWithLatestFromTest.testNoDownstreamUnsubscribe(rx.internal.operators.OperatorWithLatestFromTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>zip</mutatedMethod><methodDescription>(Ljava/lang/Iterable;Lrx/functions/FuncN;)Lrx/Observable;</methodDescription><lineNumber>3019</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorZipTest.testStartEmptyList(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>zip</mutatedMethod><methodDescription>(Ljava/lang/Iterable;Lrx/functions/FuncN;)Lrx/Observable;</methodDescription><lineNumber>3022</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>44</index><killingTest>rx.ZipTests.nonBlockingObservable(rx.ZipTests)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>zip</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func9;)Lrx/Observable;</methodDescription><lineNumber>3386</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>47</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>zip</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func8;)Lrx/Observable;</methodDescription><lineNumber>3338</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>43</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>zip</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func7;)Lrx/Observable;</methodDescription><lineNumber>3292</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>39</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>zip</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func6;)Lrx/Observable;</methodDescription><lineNumber>3248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>35</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>zip</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func5;)Lrx/Observable;</methodDescription><lineNumber>3206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>zip</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func4;)Lrx/Observable;</methodDescription><lineNumber>3166</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>zip</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/functions/Func3;)Lrx/Observable;</methodDescription><lineNumber>3128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>zip</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/functions/Func2;)Lrx/Observable;</methodDescription><lineNumber>3092</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorZipIterableTest.testZipIterableEmptyFirstSize(rx.internal.operators.OperatorZipIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>zip</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/functions/FuncN;)Lrx/Observable;</methodDescription><lineNumber>3052</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorZipTest.testZipObservableObservableBackpressure(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>zipWith</mutatedMethod><methodDescription>(Ljava/lang/Iterable;Lrx/functions/Func2;)Lrx/Observable;</methodDescription><lineNumber>10276</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorZipIterableTest.testZipIterableEmptyFirstSize(rx.internal.operators.OperatorZipIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable</mutatedClass><mutatedMethod>zipWith</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/functions/Func2;)Lrx/Observable;</methodDescription><lineNumber>10303</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorZipTest.testStart(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Subscriber;ZI)V</methodDescription><lineNumber>198</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>60</index><killingTest>rx.internal.operators.OperatorMergeMaxConcurrentTest.testSimpleOneLess(rx.internal.operators.OperatorMergeMaxConcurrentTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Subscriber;ZI)V</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>41</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testDelayErrorMaxConcurrent(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Subscriber;ZI)V</methodDescription><lineNumber>196</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>51</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Subscriber;ZI)V</methodDescription><lineNumber>199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>68</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testDelayErrorMaxConcurrent(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>addInner</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;)V</methodDescription><lineNumber>276</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>28</index><killingTest>rx.internal.operators.OperatorDoOnEachTest.testFatalError(rx.internal.operators.OperatorDoOnEachTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>addInner</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;)V</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorMergeTest.testEarlyUnsubscribe(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>addInner</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;)V</methodDescription><lineNumber>277</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest>rx.internal.operators.OperatorMergeTest.testEarlyUnsubscribe(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>checkTerminate</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>791</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testSynchronousError(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>checkTerminate</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>795</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorDoOnEachTest.testFatalError(rx.internal.operators.OperatorDoOnEachTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>checkTerminate</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>795</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest>rx.ObservableTests.testMergeWith(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>checkTerminate</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>795</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest>rx.internal.operators.OperatorDoOnEachTest.testFatalError(rx.internal.operators.OperatorDoOnEachTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>checkTerminate</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>792</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>checkTerminate</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>801</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>51</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>checkTerminate</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>803</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>56</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testSynchronousError(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>checkTerminate</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>797</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testFlatMapTransformsOnCompletedFuncThrows(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>checkTerminate</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>799</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>checkTerminate</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>799</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>44</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>541</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testSynchronousError(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>547</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>47</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testSynchronousError(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>575</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>101</index><killingTest>rx.internal.operators.OperatorMergeTest.shouldNotCompleteWhileThereAreStillScalarSynchronousEmissionsInTheQueue(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>603</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>258</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>644</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>394</index><killingTest>rx.ObservableTests.testMergeWith(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>651</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>409</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>652</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>422</index><killingTest>rx.internal.operators.OperatorMergeMaxConcurrentTest.testMaxConcurrent(rx.internal.operators.OperatorMergeMaxConcurrentTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>657</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>440</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>676</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>502</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testDelayErrorMaxConcurrent(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>688</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>566</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>719</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>733</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>759</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>895</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testDelayErrorMaxConcurrent(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>599</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>241</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>600</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>244</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>662</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>456</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testMergeObservableOfObservables(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>657</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>469</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>717</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>725</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>740</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>844</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testDelayErrorMaxConcurrent(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>749</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>862</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.testJust(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>676</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>875</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>601</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>249</index><killingTest>rx.internal.operators.OperatorFlatMapTest.flatMapRangeMixedAsyncLoop(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>716</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>721</index><killingTest>rx.internal.operators.OperatorMergeMaxConcurrentTest.testBackpressureHonored(rx.internal.operators.OperatorMergeMaxConcurrentTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>558</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testSynchronousError(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>777</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>565</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>69</index><killingTest>rx.internal.operators.OperatorMergeMaxConcurrentTest.testBackpressureHonored(rx.internal.operators.OperatorMergeMaxConcurrentTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>571</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>85</index><killingTest>rx.ObservableTests.testMergeWith(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>575</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>101</index><killingTest>rx.internal.operators.OperatorMergeTest.shouldNotCompleteWhileThereAreStillScalarSynchronousEmissionsInTheQueue(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>578</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>111</index><killingTest>rx.internal.operators.OperatorMergeTest.shouldCompleteAfterApplyingBackpressure_FastPath(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>777</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>119</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>582</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>152</index><killingTest>rx.internal.operators.OperatorMergeTest.shouldCompleteAfterApplyingBackpressure_FastPath(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>590</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>180</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>777</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>201</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>603</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>258</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>604</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>262</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>610</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>282</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>610</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>284</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>632</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>316</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testSynchronousError(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>632</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>318</index><killingTest>rx.internal.operators.OperatorMergeTest.mergingNullObservable(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>632</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>321</index><killingTest>rx.internal.operators.OperatorMergeTest.shouldCompleteAfterApplyingBackpressure_FastPath(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>632</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>325</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testSynchronousError(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>634</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>334</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testSynchronousError(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>634</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>337</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testSynchronousError(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>777</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>357</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>644</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>394</index><killingTest>rx.ObservableTests.testMergeWith(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>651</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>409</index><killingTest>rx.internal.operators.OperatorMergeMaxConcurrentTest.testMaxConcurrent(rx.internal.operators.OperatorMergeMaxConcurrentTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>651</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>416</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>652</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>422</index><killingTest>rx.internal.operators.OperatorFlatMapTest.flatMapRangeMixedAsyncLoop(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>657</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>440</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>658</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>449</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>663</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>461</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testMergeObservableOfObservables(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>676</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>502</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testMergeObservableOfObservables(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>678</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>507</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testMergeObservableOfObservables(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>777</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>515</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>688</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>566</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>690</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>571</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testMergeObservableOfObservables(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>777</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>579</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>695</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>617</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.testJust(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>699</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>630</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>777</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>687</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>719</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>733</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>720</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>737</index><killingTest>rx.internal.operators.OperatorMergeMaxConcurrentTest.testBackpressureHonored(rx.internal.operators.OperatorMergeMaxConcurrentTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>728</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>764</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>728</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>766</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>734</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>788</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.testJust(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>734</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>790</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testMergeObservableOfObservables(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>734</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>793</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>736</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>804</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testMergeObservableOfObservables(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>777</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>812</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>744</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>855</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>750</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>867</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.testJust(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>759</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>895</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testDelayErrorMaxConcurrent(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>763</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>906</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testSynchronousError(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>768</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>921</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testSynchronousError(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>777</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>965</index><killingTest>rx.internal.operators.OperatorFlatMapTest.flatMapRangeMixedAsyncLoop(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>777</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>1000</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>588</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>168</index><killingTest>rx.internal.operators.OperatorMergeTest.shouldCompleteAfterApplyingBackpressure_FastPath(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>591</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>184</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>593</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>192</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>594</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>197</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>635</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>342</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>637</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>348</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testSynchronousError(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>705</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>646</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testMergeArrayWithThreading(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>708</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>661</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>710</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>666</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>712</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>670</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>712</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>680</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>725</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>757</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>735</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>799</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>760</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>901</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testDelayErrorMaxConcurrent(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Ljava/lang/Object;J)V</methodDescription><lineNumber>505</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>100</index><killingTest>rx.internal.operators.OperatorMergeMaxConcurrentTest.testSimpleOneLess(rx.internal.operators.OperatorMergeMaxConcurrentTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Ljava/lang/Object;J)V</methodDescription><lineNumber>492</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest>rx.internal.operators.OperatorMapTest.verifyExceptionIsThrownIfThereIsNoExceptionHandler(rx.internal.operators.OperatorMapTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Ljava/lang/Object;J)V</methodDescription><lineNumber>523</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Ljava/lang/Object;J)V</methodDescription><lineNumber>501</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>86</index><killingTest>rx.internal.operators.OperatorMergeTest.shouldNotCompleteWhileThereAreStillScalarSynchronousEmissionsInTheQueue(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Ljava/lang/Object;J)V</methodDescription><lineNumber>506</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>107</index><killingTest>rx.internal.operators.OperatorMergeMaxConcurrentTest.testSimpleOneLess(rx.internal.operators.OperatorMergeMaxConcurrentTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Ljava/lang/Object;J)V</methodDescription><lineNumber>516</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>141</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Ljava/lang/Object;J)V</methodDescription><lineNumber>523</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>154</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Ljava/lang/Object;J)V</methodDescription><lineNumber>523</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>207</index><killingTest>rx.internal.operators.OperatorFlatMapTest.flatMapRangeMixedAsyncLoop(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Ljava/lang/Object;J)V</methodDescription><lineNumber>523</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>242</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Ljava/lang/Object;J)V</methodDescription><lineNumber>490</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.ObservableTests.testMergeWith(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Ljava/lang/Object;J)V</methodDescription><lineNumber>493</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest>rx.internal.operators.OperatorMapTest.verifyExceptionIsThrownIfThereIsNoExceptionHandler(rx.internal.operators.OperatorMapTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Ljava/lang/Object;J)V</methodDescription><lineNumber>495</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Ljava/lang/Object;J)V</methodDescription><lineNumber>496</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>39</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Ljava/lang/Object;J)V</methodDescription><lineNumber>508</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>118</index><killingTest>rx.internal.operators.OperatorMergeMaxConcurrentTest.testSimpleOneLess(rx.internal.operators.OperatorMergeMaxConcurrentTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Ljava/lang/Object;J)V</methodDescription><lineNumber>536</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>276</index><killingTest>rx.internal.operators.OperatorMergeTest.testSlowMergeFullScalar(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;J)V</methodDescription><lineNumber>380</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest>rx.internal.operators.OperatorMapTest.testShouldNotSwallowOnErrorNotImplementedException(rx.internal.operators.OperatorMapTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;J)V</methodDescription><lineNumber>403</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;J)V</methodDescription><lineNumber>389</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>86</index><killingTest>rx.internal.operators.OperatorMergeTest.shouldNotReceivedDelayedErrorWhileThereAreStillNormalEmissionsInTheQueue(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;J)V</methodDescription><lineNumber>396</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>114</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;J)V</methodDescription><lineNumber>403</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>127</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;J)V</methodDescription><lineNumber>403</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>180</index><killingTest>rx.internal.operators.OperatorMergeTest.merge2000AsyncStreamOf100(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;J)V</methodDescription><lineNumber>403</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>215</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;J)V</methodDescription><lineNumber>378</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorMapTest.testShouldNotSwallowOnErrorNotImplementedException(rx.internal.operators.OperatorMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;J)V</methodDescription><lineNumber>381</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest>rx.internal.operators.OperatorMapTest.testShouldNotSwallowOnErrorNotImplementedException(rx.internal.operators.OperatorMapTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;J)V</methodDescription><lineNumber>383</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;J)V</methodDescription><lineNumber>384</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>39</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;J)V</methodDescription><lineNumber>392</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>99</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>emitScalar</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;J)V</methodDescription><lineNumber>416</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>249</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>getOrCreateComposite</mutatedMethod><methodDescription>()Lrx/subscriptions/CompositeSubscription;</methodDescription><lineNumber>218</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorDoOnEachTest.testFatalError(rx.internal.operators.OperatorDoOnEachTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>getOrCreateComposite</mutatedMethod><methodDescription>()Lrx/subscriptions/CompositeSubscription;</methodDescription><lineNumber>222</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest>rx.internal.operators.OperatorDoOnEachTest.testFatalError(rx.internal.operators.OperatorDoOnEachTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>getOrCreateComposite</mutatedMethod><methodDescription>()Lrx/subscriptions/CompositeSubscription;</methodDescription><lineNumber>228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>63</index><killingTest>rx.internal.operators.OperatorMergeTest.testEarlyUnsubscribe(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>getOrCreateComposite</mutatedMethod><methodDescription>()Lrx/subscriptions/CompositeSubscription;</methodDescription><lineNumber>232</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>73</index><killingTest>rx.internal.operators.OperatorDoOnEachTest.testFatalError(rx.internal.operators.OperatorDoOnEachTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>getOrCreateComposite</mutatedMethod><methodDescription>()Lrx/subscriptions/CompositeSubscription;</methodDescription><lineNumber>229</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>68</index><killingTest>rx.internal.operators.OperatorMergeTest.testEarlyUnsubscribe(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>getOrCreateErrorQueue</mutatedMethod><methodDescription>()Ljava/util/Queue;</methodDescription><lineNumber>205</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testFlatMapTransformsOnCompletedFuncThrows(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>getOrCreateErrorQueue</mutatedMethod><methodDescription>()Ljava/util/Queue;</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testFlatMapTransformsOnCompletedFuncThrows(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>getOrCreateErrorQueue</mutatedMethod><methodDescription>()Ljava/util/Queue;</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>55</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testFlatMapTransformsOnCompletedFuncThrows(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>268</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>263</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testSynchronousError(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Observable;)V</methodDescription><lineNumber>243</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Observable;)V</methodDescription><lineNumber>237</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.ObservableTests.testMergeWith(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Observable;)V</methodDescription><lineNumber>240</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorDoOnEachTest.testFatalError(rx.internal.operators.OperatorDoOnEachTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Observable;)V</methodDescription><lineNumber>241</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest>rx.ObservableTests.testMergeWith(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Observable;)V</methodDescription><lineNumber>244</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>41</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.testJust(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Observable;)V</methodDescription><lineNumber>246</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>51</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>queueScalar</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>461</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorMergeTest.shouldCompleteAfterApplyingBackpressure_FastPath(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>queueScalar</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>463</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorMergeTest.shouldCompleteAfterApplyingBackpressure_FastPath(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>queueScalar</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>466</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>queueScalar</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>467</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>queueScalar</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>478</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>75</index><killingTest>rx.internal.operators.OperatorMergeTest.shouldNotCompleteWhileThereAreStillScalarSynchronousEmissionsInTheQueue(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>queueScalar</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>479</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>79</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>queueScalar</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>480</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>88</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>queueScalar</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>483</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>96</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>queueScalar</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;)V</methodDescription><lineNumber>353</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorMergeTest.shouldCompleteAfterApplyingBackpressure_NormalPath(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>queueScalar</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;)V</methodDescription><lineNumber>365</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>60</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>queueScalar</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;)V</methodDescription><lineNumber>355</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>queueScalar</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;)V</methodDescription><lineNumber>359</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest>rx.internal.operators.OperatorMergeTest.shouldCompleteAfterApplyingBackpressure_NormalPath(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>queueScalar</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;)V</methodDescription><lineNumber>361</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>43</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>queueScalar</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;)V</methodDescription><lineNumber>362</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>48</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>queueScalar</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;)V</methodDescription><lineNumber>366</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>64</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>queueScalar</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;)V</methodDescription><lineNumber>367</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>69</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>queueScalar</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;)V</methodDescription><lineNumber>371</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>78</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>removeInner</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;)V</methodDescription><lineNumber>295</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>50</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>removeInner</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;)V</methodDescription><lineNumber>301</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>75</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>removeInner</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;)V</methodDescription><lineNumber>295</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>69</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testFlatMapMaxConcurrent(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>removeInner</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;)V</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>104</index><killingTest>rx.internal.operators.OperatorMergeTest.testUnsubscribeAsObservablesComplete(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>removeInner</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;)V</methodDescription><lineNumber>310</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>120</index><killingTest>rx.internal.operators.OperatorMergeTest.testUnsubscribeAsObservablesComplete(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>removeInner</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;)V</methodDescription><lineNumber>310</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>125</index><killingTest>rx.internal.operators.OperatorGroupByTest.testUnsubscribeViaTakeOnGroupThenTakeOnInner(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>removeInner</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;)V</methodDescription><lineNumber>310</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>127</index><killingTest>rx.internal.operators.OperatorMergeTest.testUnsubscribeAsObservablesComplete(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>removeInner</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;)V</methodDescription><lineNumber>284</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testMergeObservableOfObservables(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>removeInner</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;)V</methodDescription><lineNumber>295</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>50</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>removeInner</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;)V</methodDescription><lineNumber>296</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>58</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>removeInner</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;)V</methodDescription><lineNumber>301</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>75</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>removeInner</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;)V</methodDescription><lineNumber>304</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>87</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testFlatMapMaxConcurrent(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>removeInner</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;)V</methodDescription><lineNumber>285</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>removeInner</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;)V</methodDescription><lineNumber>289</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>removeInner</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;)V</methodDescription><lineNumber>309</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>114</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testMergeArrayWithThreading(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>removeInner</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;)V</methodDescription><lineNumber>310</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>128</index><killingTest>rx.internal.operators.OperatorMergeTest.testUnsubscribeAsObservablesComplete(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>reportError</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorDoOnEachTest.testFatalError(rx.internal.operators.OperatorDoOnEachTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>reportError</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>253</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testSynchronousError(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>reportError</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>255</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testCompositeErrorDelayed1(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>420</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorMergeMaxConcurrentTest.testSimpleOneLess(rx.internal.operators.OperatorMergeMaxConcurrentTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>437</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.SingleTest.testRetryWhen(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>441</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><killingTest>rx.SingleTest.testRetryWhen(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>441</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><killingTest>rx.SingleTest.testRetryWhen(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>447</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>66</index><killingTest>rx.ObservableTests.testMergeWith(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>448</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>72</index><killingTest>rx.ObservableTests.testMergeWith(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>450</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>79</index><killingTest>rx.internal.operators.OperatorMergeTest.shouldCompleteAfterApplyingBackpressure_FastPath(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;)V</methodDescription><lineNumber>329</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testMergeSourceWhichDoesntPropagateExceptionBack(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;)V</methodDescription><lineNumber>333</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testMergeSourceWhichDoesntPropagateExceptionBack(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;)V</methodDescription><lineNumber>333</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testMergeSourceWhichDoesntPropagateExceptionBack(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;)V</methodDescription><lineNumber>339</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>66</index><killingTest>rx.SingleTest.testMerge(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;)V</methodDescription><lineNumber>340</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>73</index><killingTest>rx.internal.operators.OperatorMapTest.testShouldNotSwallowOnErrorNotImplementedException(rx.internal.operators.OperatorMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeSubscriber</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorMerge$InnerSubscriber;Ljava/lang/Object;)V</methodDescription><lineNumber>342</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>81</index><killingTest>rx.internal.operators.OperatorMergeDelayErrorTest.testMergeArrayWithThreading(rx.internal.operators.OperatorMergeDelayErrorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>amb</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)Lrx/Completable;</methodDescription><lineNumber>191</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.CompletableTest.ambIterableOneThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>amb</mutatedMethod><methodDescription>([Lrx/Completable;)Lrx/Completable;</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.CompletableTest.ambMultipleOneIsNull(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>amb</mutatedMethod><methodDescription>([Lrx/Completable;)Lrx/Completable;</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest>rx.CompletableTest.ambWithArraySecondFiresError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>amb</mutatedMethod><methodDescription>([Lrx/Completable;)Lrx/Completable;</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.CompletableTest.ambArrayEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>amb</mutatedMethod><methodDescription>([Lrx/Completable;)Lrx/Completable;</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>27</index><killingTest>rx.CompletableTest.ambArraySingleError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>amb</mutatedMethod><methodDescription>([Lrx/Completable;)Lrx/Completable;</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>36</index><killingTest>rx.CompletableTest.ambWithArraySecondFiresError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>ambWith</mutatedMethod><methodDescription>(Lrx/Completable;)Lrx/Completable;</methodDescription><lineNumber>989</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest>rx.CompletableTest.ambWithArraySecondFiresError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>andThen</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>1115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.CompletableTest.andThenNever(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>await</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1021</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest>rx.CompletableTest.subscribeOnNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>await</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1022</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><killingTest>rx.CompletableTest.complete(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>await</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1032</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>70</index><killingTest>rx.CompletableTest.timeoutSwitchNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>await</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1001</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.CompletableTest.createOnSubscribeThrowsNPE(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>await</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1028</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>51</index><killingTest>rx.CompletableTest.subscribeOnNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>await</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Z</methodDescription><lineNumber>1072</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>await</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Z</methodDescription><lineNumber>1073</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>40</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>await</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Z</methodDescription><lineNumber>1084</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>77</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>await</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Z</methodDescription><lineNumber>1085</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>83</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>await</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Z</methodDescription><lineNumber>1076</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>52</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>await</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Z</methodDescription><lineNumber>1089</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>95</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>await</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Z</methodDescription><lineNumber>1052</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>()Lrx/Completable;</methodDescription><lineNumber>314</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.CompletableTest.complete(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>compose</mutatedMethod><methodDescription>(Lrx/Completable$CompletableTransformer;)Lrx/Completable;</methodDescription><lineNumber>1100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.CompletableTest.composeNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)Lrx/Completable;</methodDescription><lineNumber>343</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.CompletableTest.concatIterableIterableThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Completable;</methodDescription><lineNumber>353</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.CompletableTest.concatObservableSingleThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>(Lrx/Observable;I)Lrx/Completable;</methodDescription><lineNumber>365</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>(Lrx/Observable;I)Lrx/Completable;</methodDescription><lineNumber>365</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.CompletableTest.concatObservableSingleThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>(Lrx/Observable;I)Lrx/Completable;</methodDescription><lineNumber>368</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>34</index><killingTest>rx.CompletableTest.concatObservableSingleThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>([Lrx/Completable;)Lrx/Completable;</methodDescription><lineNumber>325</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.CompletableTest.concatSingleSourceThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>([Lrx/Completable;)Lrx/Completable;</methodDescription><lineNumber>328</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest>rx.CompletableTest.concatWithError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>([Lrx/Completable;)Lrx/Completable;</methodDescription><lineNumber>326</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.CompletableTest.concatEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>([Lrx/Completable;)Lrx/Completable;</methodDescription><lineNumber>329</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>27</index><killingTest>rx.CompletableTest.concatSingleSourceThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>([Lrx/Completable;)Lrx/Completable;</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>36</index><killingTest>rx.CompletableTest.concatWithError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>concatWith</mutatedMethod><methodDescription>(Lrx/Completable;)Lrx/Completable;</methodDescription><lineNumber>1126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest>rx.CompletableTest.concatWithError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/Completable$CompletableOnSubscribe;)Lrx/Completable;</methodDescription><lineNumber>383</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.CompletableTest.retryNegativeTimes(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/Completable$CompletableOnSubscribe;)Lrx/Completable;</methodDescription><lineNumber>387</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>defer</mutatedMethod><methodDescription>(Lrx/functions/Func0;)Lrx/Completable;</methodDescription><lineNumber>399</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.CompletableTest.deferFunctionThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>delay</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Lrx/Completable;</methodDescription><lineNumber>1137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.CompletableTest.unsubscribeOnNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>delay</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Completable;</methodDescription><lineNumber>1150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>delay</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;Z)Lrx/Completable;</methodDescription><lineNumber>1166</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest>rx.CompletableTest.unsubscribeOnNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>deliverUncaughtException</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1939</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.CompletableTest.subscribeEmptyOnError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>doAfterTerminate</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Completable;</methodDescription><lineNumber>1405</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.CompletableTest.doAfterTerminateWithError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>doOnComplete</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Completable;</methodDescription><lineNumber>1228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>doOnCompleted</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Completable;</methodDescription><lineNumber>1238</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.CompletableTest.doOnCompletedNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>doOnError</mutatedMethod><methodDescription>(Lrx/functions/Action1;)Lrx/Completable;</methodDescription><lineNumber>1259</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.CompletableTest.doOnErrorNoError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>doOnLifecycle</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;Lrx/functions/Action0;Lrx/functions/Action0;)Lrx/Completable;</methodDescription><lineNumber>1283</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>38</index><killingTest>rx.CompletableTest.doOnCompletedNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>doOnSubscribe</mutatedMethod><methodDescription>(Lrx/functions/Action1;)Lrx/Completable;</methodDescription><lineNumber>1355</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.CompletableTest.doOnSubscribeThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>doOnTerminate</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Completable;</methodDescription><lineNumber>1365</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.CompletableTest.doOnTerminateNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>doOnUnsubscribe</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Completable;</methodDescription><lineNumber>1249</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.CompletableTest.doOnDisposeNormalDoesntCall(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>endWith</mutatedMethod><methodDescription>(Lrx/Completable;)Lrx/Completable;</methodDescription><lineNumber>1383</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.CompletableTest.endWithCompletableError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>endWith</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>1394</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.CompletableTest.endWithFlowableError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Lrx/Completable;</methodDescription><lineNumber>463</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.CompletableTest.errorNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Lrx/functions/Func0;)Lrx/Completable;</methodDescription><lineNumber>435</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>fromAction</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Completable;</methodDescription><lineNumber>481</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.CompletableTest.fromActionThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>fromCallable</mutatedMethod><methodDescription>(Ljava/util/concurrent/Callable;)Lrx/Completable;</methodDescription><lineNumber>509</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.CompletableTest.fromCallableNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>fromFuture</mutatedMethod><methodDescription>(Ljava/util/concurrent/Future;)Lrx/Completable;</methodDescription><lineNumber>538</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.CompletableTest.fromFutureThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>fromObservable</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Completable;</methodDescription><lineNumber>550</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.CompletableTest.fromObservableError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>fromSingle</mutatedMethod><methodDescription>(Lrx/Single;)Lrx/Completable;</methodDescription><lineNumber>585</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.CompletableTest.fromSingleNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>()Ljava/lang/Throwable;</methodDescription><lineNumber>1438</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest>rx.CompletableTest.timeoutEmitError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>()Ljava/lang/Throwable;</methodDescription><lineNumber>1439</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>35</index><killingTest>rx.CompletableTest.getError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>()Ljava/lang/Throwable;</methodDescription><lineNumber>1446</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>59</index><killingTest>rx.CompletableTest.timeoutEmitError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>()Ljava/lang/Throwable;</methodDescription><lineNumber>1418</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.CompletableTest.getError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>()Ljava/lang/Throwable;</methodDescription><lineNumber>1442</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>40</index><killingTest>rx.CompletableTest.timeoutEmitError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Throwable;</methodDescription><lineNumber>1482</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Throwable;</methodDescription><lineNumber>1491</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>65</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Throwable;</methodDescription><lineNumber>1483</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>40</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Throwable;</methodDescription><lineNumber>1492</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>71</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Throwable;</methodDescription><lineNumber>1495</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>83</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Throwable;</methodDescription><lineNumber>1462</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>lift</mutatedMethod><methodDescription>(Lrx/Completable$CompletableOperator;)Lrx/Completable;</methodDescription><lineNumber>1506</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.CompletableTest.liftOnErrorComplete(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)Lrx/Completable;</methodDescription><lineNumber>634</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.CompletableTest.mergeIterableIterableThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Completable;</methodDescription><lineNumber>645</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.CompletableTest.mergeObservableEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Observable;I)Lrx/Completable;</methodDescription><lineNumber>658</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.CompletableTest.mergeObservableMaxConcurrent(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>([Lrx/Completable;)Lrx/Completable;</methodDescription><lineNumber>616</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.CompletableTest.mergeSingleSource(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>([Lrx/Completable;)Lrx/Completable;</methodDescription><lineNumber>619</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest>rx.CompletableTest.mergeMultipleSources(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>([Lrx/Completable;)Lrx/Completable;</methodDescription><lineNumber>617</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.CompletableTest.mergeEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>([Lrx/Completable;)Lrx/Completable;</methodDescription><lineNumber>620</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>27</index><killingTest>rx.CompletableTest.mergeSingleSource(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>([Lrx/Completable;)Lrx/Completable;</methodDescription><lineNumber>622</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>36</index><killingTest>rx.CompletableTest.mergeMultipleSources(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>merge0</mutatedMethod><methodDescription>(Lrx/Observable;IZ)Lrx/Completable;</methodDescription><lineNumber>675</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>merge0</mutatedMethod><methodDescription>(Lrx/Observable;IZ)Lrx/Completable;</methodDescription><lineNumber>675</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.CompletableTest.mergeObservableEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>merge0</mutatedMethod><methodDescription>(Lrx/Observable;IZ)Lrx/Completable;</methodDescription><lineNumber>678</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>35</index><killingTest>rx.CompletableTest.mergeObservableEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>mergeDelayError</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)Lrx/Completable;</methodDescription><lineNumber>704</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.CompletableTest.mergeDelayErrorIterableIterableThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>mergeDelayError</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Completable;</methodDescription><lineNumber>716</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.CompletableTest.mergeDelayErrorObservableEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>mergeDelayError</mutatedMethod><methodDescription>(Lrx/Observable;I)Lrx/Completable;</methodDescription><lineNumber>730</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.CompletableTest.mergeDelayErrorObservableMaxConcurrent(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>mergeDelayError</mutatedMethod><methodDescription>([Lrx/Completable;)Lrx/Completable;</methodDescription><lineNumber>691</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.CompletableTest.mergeDelayErrorEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>mergeWith</mutatedMethod><methodDescription>(Lrx/Completable;)Lrx/Completable;</methodDescription><lineNumber>1533</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest>rx.CompletableTest.mergeWithNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>never</mutatedMethod><methodDescription>()Lrx/Completable;</methodDescription><lineNumber>738</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.CompletableTest.never(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>observeOn</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/Completable;</methodDescription><lineNumber>1544</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.CompletableTest.observeOnError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>onErrorComplete</mutatedMethod><methodDescription>()Lrx/Completable;</methodDescription><lineNumber>1601</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.CompletableTest.onErrorComplete(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>onErrorComplete</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Completable;</methodDescription><lineNumber>1614</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.CompletableTest.onErrorComplete(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>onErrorResumeNext</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Completable;</methodDescription><lineNumber>1662</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.CompletableTest.onErrorResumeNextNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>repeat</mutatedMethod><methodDescription>()Lrx/Completable;</methodDescription><lineNumber>1727</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.CompletableTest.repeatError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>repeat</mutatedMethod><methodDescription>(J)Lrx/Completable;</methodDescription><lineNumber>1737</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.CompletableTest.repeat0Time(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>repeatWhen</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Completable;</methodDescription><lineNumber>1751</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>requireNonNull</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>748</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.CompletableTest.createNull(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>requireNonNull</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>751</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>retry</mutatedMethod><methodDescription>()Lrx/Completable;</methodDescription><lineNumber>1759</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.CompletableTest.retryNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>retry</mutatedMethod><methodDescription>(J)Lrx/Completable;</methodDescription><lineNumber>1781</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.CompletableTest.retryTimes5Error(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>retry</mutatedMethod><methodDescription>(Lrx/functions/Func2;)Lrx/Completable;</methodDescription><lineNumber>1770</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.CompletableTest.retryBiPredicate5Times(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>retryWhen</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Completable;</methodDescription><lineNumber>1794</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.CompletableTest.retryWhen5Times(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>startWith</mutatedMethod><methodDescription>(Lrx/Completable;)Lrx/Completable;</methodDescription><lineNumber>1806</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest>rx.CompletableTest.startWithCompletableError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>startWith</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>1818</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.CompletableTest.startWithFlowableError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>()Lrx/Subscription;</methodDescription><lineNumber>1847</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest>rx.CompletableTest.subscribeReportsUnsubscribed(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>()Lrx/Subscription;</methodDescription><lineNumber>1828</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest>rx.CompletableTest.subscribeEmptyOnError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>1952</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.CompletableTest.createOnSubscribeThrowsNPE(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>1956</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>1972</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.CompletableTest.subscribeSubscriberError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>1976</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest>rx.CompletableTest.subscribeSubscriberError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>1996</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>50</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>1887</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><killingTest>rx.CompletableTest.subscribeActionReportsUnsubscribed(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>1861</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest>rx.CompletableTest.subscribeActionNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>1934</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>31</index><killingTest>rx.CompletableTest.subscribeAction2ReportsUnsubscribed(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>1903</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest>rx.CompletableTest.subscribeTwoCallbacksNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>subscribeOn</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/Completable;</methodDescription><lineNumber>2011</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.CompletableTest.subscribeOnNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>timeout</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Lrx/Completable;</methodDescription><lineNumber>2041</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.CompletableTest.timeoutEmitError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>timeout</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Completable;)Lrx/Completable;</methodDescription><lineNumber>2055</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.CompletableTest.timeoutSwitchNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>timeout</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Completable;</methodDescription><lineNumber>2069</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>timeout</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;Lrx/Completable;)Lrx/Completable;</methodDescription><lineNumber>2085</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>timeout0</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;Lrx/Completable;)Lrx/Completable;</methodDescription><lineNumber>2103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest>rx.CompletableTest.timeoutSwitchNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>timer</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Lrx/Completable;</methodDescription><lineNumber>761</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.CompletableTest.timerCancel(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>timer</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Completable;</methodDescription><lineNumber>774</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest>rx.CompletableTest.timerTestScheduler(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>to</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Ljava/lang/Object;</methodDescription><lineNumber>2113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.CompletableTest.toNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>toNpe</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Ljava/lang/NullPointerException;</methodDescription><lineNumber>805</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><killingTest>rx.CompletableTest.createOnSubscribeThrowsRuntimeException(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>toObservable</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>2122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.CompletableTest.retryNegativeTimes(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>toSingle</mutatedMethod><methodDescription>(Lrx/functions/Func0;)Lrx/Single;</methodDescription><lineNumber>2139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.CompletableTest.toSingleSupplierError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>toSingleDefault</mutatedMethod><methodDescription>(Ljava/lang/Object;)Lrx/Single;</methodDescription><lineNumber>2186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.CompletableTest.toSingleDefaultError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>unsubscribeOn</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/Completable;</methodDescription><lineNumber>2203</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.CompletableTest.unsubscribeOnNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>using</mutatedMethod><methodDescription>(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/functions/Action1;)Lrx/Completable;</methodDescription><lineNumber>822</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.CompletableTest.usingResourceThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable</mutatedClass><mutatedMethod>using</mutatedMethod><methodDescription>(Lrx/functions/Func0;Lrx/functions/Func1;Lrx/functions/Action1;Z)Lrx/Completable;</methodDescription><lineNumber>849</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>26</index><killingTest>rx.CompletableTest.usingResourceThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>asObservable</mutatedMethod><methodDescription>(Lrx/Single;)Lrx/Observable;</methodDescription><lineNumber>232</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.SingleTest.testToObservable(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>compose</mutatedMethod><methodDescription>(Lrx/Single$Transformer;)Lrx/Single;</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;)Lrx/Observable;</methodDescription><lineNumber>276</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;</methodDescription><lineNumber>298</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;</methodDescription><lineNumber>322</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;</methodDescription><lineNumber>376</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;</methodDescription><lineNumber>406</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;</methodDescription><lineNumber>438</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>concat</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;</methodDescription><lineNumber>472</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>concatWith</mutatedMethod><methodDescription>(Lrx/Single;)Lrx/Observable;</methodDescription><lineNumber>1265</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/Single$OnSubscribe;)Lrx/Single;</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.SingleTest.doAfterTerminateActionShouldNotBeInvokedUntilSubscriberSubscribes(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>defer</mutatedMethod><methodDescription>(Ljava/util/concurrent/Callable;)Lrx/Single;</methodDescription><lineNumber>2347</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.SingleTest.deferShouldPassNullPointerExceptionToTheSubscriberIfSingleFactoryIsNull(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>delay</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Lrx/Single;</methodDescription><lineNumber>2318</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>delay</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Single;</methodDescription><lineNumber>2296</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.SingleTest.delayWithSchedulerShouldDelayCompletion(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>doAfterTerminate</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Single;</methodDescription><lineNumber>2403</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.SingleTest.doAfterTerminateActionShouldBeInvokedAfterOnSuccess(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>doOnError</mutatedMethod><methodDescription>(Lrx/functions/Action1;)Lrx/Single;</methodDescription><lineNumber>2216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><killingTest>rx.SingleTest.doOnErrorShouldNotCallActionIfNoErrorHasOccurred(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>doOnSubscribe</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Single;</methodDescription><lineNumber>2272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.SingleTest.doOnSubscribeShouldInvokeActionBeforeSubscriberSubscribes(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>doOnSuccess</mutatedMethod><methodDescription>(Lrx/functions/Action1;)Lrx/Single;</methodDescription><lineNumber>2250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><killingTest>rx.SingleTest.doOnSuccessShouldNotCallActionIfSingleThrowsError(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>doOnUnsubscribe</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Single;</methodDescription><lineNumber>2382</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.SingleTest.doOnUnsubscribeShouldInvokeActionAfterExplicitUnsubscription(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Lrx/Single;</methodDescription><lineNumber>494</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.SingleTest.doAfterTerminateActionShouldNotBeInvokedUntilSubscriberSubscribes(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>flatMap</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Single;</methodDescription><lineNumber>1284</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>flatMap</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Single;</methodDescription><lineNumber>1285</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.SingleTest.testFlatMap(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>flatMap</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Single;</methodDescription><lineNumber>1287</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>flatMapObservable</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>1307</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>(Ljava/util/concurrent/Future;)Lrx/Single;</methodDescription><lineNumber>528</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)Lrx/Single;</methodDescription><lineNumber>559</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>(Ljava/util/concurrent/Future;Lrx/Scheduler;)Lrx/Single;</methodDescription><lineNumber>587</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>fromCallable</mutatedMethod><methodDescription>(Ljava/util/concurrent/Callable;)Lrx/Single;</methodDescription><lineNumber>609</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.SingleTest.shouldPassErrorFromCallable(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>iterableToArray</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)[Lrx/Single;</methodDescription><lineNumber>2434</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>87</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>iterableToArray</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)[Lrx/Single;</methodDescription><lineNumber>2429</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>62</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>iterableToArray</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)[Lrx/Single;</methodDescription><lineNumber>2429</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>63</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>iterableToArray</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)[Lrx/Single;</methodDescription><lineNumber>2420</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>iterableToArray</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)[Lrx/Single;</methodDescription><lineNumber>2427</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>46</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>iterableToArray</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)[Lrx/Single;</methodDescription><lineNumber>2428</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>56</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>iterableToArray</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)[Lrx/Single;</methodDescription><lineNumber>2437</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>97</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>iterableToArray</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)[Lrx/Single;</methodDescription><lineNumber>2445</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>122</index><killingTest>rx.SingleTest.iterableToArrayShouldConvertList(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>iterableToArray</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)[Lrx/Single;</methodDescription><lineNumber>2430</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>73</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>iterableToArray</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)[Lrx/Single;</methodDescription><lineNumber>2441</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>117</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>just</mutatedMethod><methodDescription>(Ljava/lang/Object;)Lrx/Single;</methodDescription><lineNumber>647</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.SingleTest.iterableToArrayShouldConvertSet(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>lift</mutatedMethod><methodDescription>(Lrx/Observable$Operator;)Lrx/Single;</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.SingleTest.doOnSubscribeShouldInvokeActionBeforeSubscriberSubscribes(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>map</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Single;</methodDescription><lineNumber>1326</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.SingleTest.testMap(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Single;)Lrx/Single;</methodDescription><lineNumber>668</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Single;)Lrx/Single;</methodDescription><lineNumber>669</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.internal.util.ScalarSynchronousSingleTest.scalarFlatMap(rx.internal.util.ScalarSynchronousSingleTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Single;)Lrx/Single;</methodDescription><lineNumber>671</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;)Lrx/Observable;</methodDescription><lineNumber>712</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.SingleTest.testMerge(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;</methodDescription><lineNumber>737</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;</methodDescription><lineNumber>764</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;</methodDescription><lineNumber>793</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;</methodDescription><lineNumber>824</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;</methodDescription><lineNumber>857</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;</methodDescription><lineNumber>892</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>merge</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;)Lrx/Observable;</methodDescription><lineNumber>929</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>mergeWith</mutatedMethod><methodDescription>(Lrx/Single;)Lrx/Observable;</methodDescription><lineNumber>1347</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.SingleTest.testMergeWith(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>nest</mutatedMethod><methodDescription>()Lrx/Single;</methodDescription><lineNumber>251</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>observeOn</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/Single;</methodDescription><lineNumber>1369</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.SingleTest.testAsync(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>observeOn</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/Single;</methodDescription><lineNumber>1370</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.internal.util.ScalarSynchronousSingleTest.backPressureObserveOn(rx.internal.util.ScalarSynchronousSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>observeOn</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/Single;</methodDescription><lineNumber>1374</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><killingTest>rx.SingleTest.testAsync(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>onErrorResumeNext</mutatedMethod><methodDescription>(Lrx/Single;)Lrx/Single;</methodDescription><lineNumber>1435</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.SingleTest.onErrorResumeNextViaSingleShouldResumeWithPassedSingleInCaseOfError(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>onErrorReturn</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Single;</methodDescription><lineNumber>1404</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>retry</mutatedMethod><methodDescription>()Lrx/Single;</methodDescription><lineNumber>2466</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.SingleTest.testRetry(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>retry</mutatedMethod><methodDescription>(J)Lrx/Single;</methodDescription><lineNumber>2491</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.SingleTest.testRetryWithCount(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>retry</mutatedMethod><methodDescription>(Lrx/functions/Func2;)Lrx/Single;</methodDescription><lineNumber>2515</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.SingleTest.testRetryWithPredicate(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>retryWhen</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Single;</methodDescription><lineNumber>2541</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.SingleTest.testRetryWhen(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>()Lrx/Subscription;</methodDescription><lineNumber>1451</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.SingleTest.testUnsubscribeViaReturnedSubscription(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)Lrx/Subscription;</methodDescription><lineNumber>1744</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)Lrx/Subscription;</methodDescription><lineNumber>1742</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.SingleTest.takeUntilSourceErrorUnsubscribes_withSingle(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscription;</methodDescription><lineNumber>1637</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.SingleTest.testCreateError(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscription;</methodDescription><lineNumber>1640</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.SingleTest.testCreateError(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscription;</methodDescription><lineNumber>1656</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest>rx.SingleTest.doOnUnsubscribeShouldInvokeActionAfterError(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscription;</methodDescription><lineNumber>1667</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>55</index><killingTest>rx.SingleTest.doOnUnsubscribeShouldInvokeActionAfterExplicitUnsubscription(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscription;</methodDescription><lineNumber>1684</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>114</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscription;</methodDescription><lineNumber>1649</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.SingleTest.testBackpressureAsObservable(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscription;</methodDescription><lineNumber>1666</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>48</index><killingTest>rx.SingleTest.testCreateError(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscription;</methodDescription><lineNumber>1670</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>63</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscription;</methodDescription><lineNumber>1673</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>70</index><killingTest>rx.SingleTest.deferShouldPassNullPointerExceptionToTheSubscriberIfSingleFactoryReturnsNull(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscription;</methodDescription><lineNumber>1675</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>81</index><killingTest>rx.exceptions.ExceptionsTest.testOnErrorExceptionIsThrownFromSingleSubscribe(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/functions/Action1;)Lrx/Subscription;</methodDescription><lineNumber>1488</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/functions/Action1;)Lrx/Subscription;</methodDescription><lineNumber>1492</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;)Lrx/Subscription;</methodDescription><lineNumber>1532</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;)Lrx/Subscription;</methodDescription><lineNumber>1535</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;)Lrx/Subscription;</methodDescription><lineNumber>1539</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>35</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>subscribeOn</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/Single;</methodDescription><lineNumber>1764</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.SingleTest.testTimeoutWithFallback(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>subscribeOn</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/Single;</methodDescription><lineNumber>1765</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.SingleTest.testFlatMap(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>subscribeOn</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/Single;</methodDescription><lineNumber>1767</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest>rx.SingleTest.testTimeoutWithFallback(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>takeUntil</mutatedMethod><methodDescription>(Lrx/Completable;)Lrx/Single;</methodDescription><lineNumber>1823</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.SingleTest.takeUntilSourceErrorUnsubscribes_withCompletable(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>takeUntil</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Single;</methodDescription><lineNumber>1899</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.SingleTest.takeUntilObservableFires(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>takeUntil</mutatedMethod><methodDescription>(Lrx/Single;)Lrx/Single;</methodDescription><lineNumber>1976</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.SingleTest.takeUntilSingleFires(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>timeout</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Lrx/Single;</methodDescription><lineNumber>2059</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.SingleTest.testTimeout(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>timeout</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/Single;</methodDescription><lineNumber>2084</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>timeout</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Single;)Lrx/Single;</methodDescription><lineNumber>2108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.SingleTest.testTimeoutWithFallback(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>timeout</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Single;Lrx/Scheduler;)Lrx/Single;</methodDescription><lineNumber>2134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.SingleTest.testTimeoutWithFallback(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>timeout</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Single;Lrx/Scheduler;)Lrx/Single;</methodDescription><lineNumber>2137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><killingTest>rx.SingleTest.testTimeoutWithFallback(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>toBlocking</mutatedMethod><methodDescription>()Lrx/singles/BlockingSingle;</methodDescription><lineNumber>2152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.SingleTest.testToBlocking(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>toObservable</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>2036</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.SingleTest.testToObservable(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>unsafeSubscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>1576</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>unsafeSubscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>1579</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>unsafeSubscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>1583</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>unsafeSubscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>1586</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest>rx.exceptions.ExceptionsTest.testOnErrorExceptionIsThrownFromSingleUnsafeSubscribe(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>unsafeSubscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>1588</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>45</index><killingTest>rx.exceptions.ExceptionsTest.testOnErrorExceptionIsThrownFromSingleUnsafeSubscribe(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>zip</mutatedMethod><methodDescription>(Ljava/lang/Iterable;Lrx/functions/FuncN;)Lrx/Single;</methodDescription><lineNumber>1245</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.SingleTest.zipIterableShouldZipListOfSingles(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>zip</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/functions/Func9;)Lrx/Single;</methodDescription><lineNumber>1216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>46</index><killingTest>rx.SingleTest.zip9Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>zip</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/functions/Func8;)Lrx/Single;</methodDescription><lineNumber>1172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>42</index><killingTest>rx.SingleTest.zip8Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>zip</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/functions/Func7;)Lrx/Single;</methodDescription><lineNumber>1130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>38</index><killingTest>rx.SingleTest.zip7Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>zip</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/functions/Func6;)Lrx/Single;</methodDescription><lineNumber>1090</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>34</index><killingTest>rx.SingleTest.zip6Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>zip</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/functions/Func5;)Lrx/Single;</methodDescription><lineNumber>1052</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>30</index><killingTest>rx.SingleTest.zip5Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>zip</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/Single;Lrx/functions/Func4;)Lrx/Single;</methodDescription><lineNumber>1017</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>26</index><killingTest>rx.SingleTest.zip4Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>zip</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;Lrx/Single;Lrx/functions/Func3;)Lrx/Single;</methodDescription><lineNumber>984</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest>rx.SingleTest.zip3Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>zip</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;Lrx/functions/Func2;)Lrx/Single;</methodDescription><lineNumber>953</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>18</index><killingTest>rx.SingleTest.zip2Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single</mutatedClass><mutatedMethod>zipWith</mutatedMethod><methodDescription>(Lrx/Single;Lrx/functions/Func2;)Lrx/Single;</methodDescription><lineNumber>2179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.SingleTest.testZipWith(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IZ)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IZ)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.invalidPrefetch(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IZ)V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)Z</methodDescription><lineNumber>328</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>49</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)Z</methodDescription><lineNumber>317</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)Z</methodDescription><lineNumber>322</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)Z</methodDescription><lineNumber>318</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.concatTakeFirstLastCompletes(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)Z</methodDescription><lineNumber>323</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>38</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)Z</methodDescription><lineNumber>332</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>77</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)Z</methodDescription><lineNumber>329</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>59</index><killingTest>rx.internal.operators.OperatorPublishTest.testTakeUntilWithPublishedStreamUsingSelector(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.concatTakeFirstLastCompletes(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.concatTakeFirstLastBackpressureCompletes(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.directCompletesUnsafe(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>40</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.concatTakeFirstLastBackpressureCompletes(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>56</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>62</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.concatTakeFirstLastCompletes(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>43</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureExceptionDelayed(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>264</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>77</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>275</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>131</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>282</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>176</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.directCompletesUnsafe(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>56</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureExceptionDelayed(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>264</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>89</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>275</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>144</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>282</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>188</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>254</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>255</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureExceptionDelayed(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>259</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureExceptionDelayed(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureExceptionDelayed(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>264</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>77</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>105</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>275</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>131</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>280</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>155</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.directCompletesUnsafe(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>282</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>176</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.directCompletesUnsafe(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>268</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>95</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>278</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>150</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>285</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>194</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>289</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>199</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>261</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>53</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureExceptionDelayed(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>265</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>86</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>273</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>110</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>276</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>141</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>283</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>185</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.directCompletesUnsafe(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>49</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>137</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.directCompletesUnsafe(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>218</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.directCompletesUnsafe(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>63</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>150</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.directCompletesUnsafe(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>231</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.directCompletesUnsafe(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>240</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>238</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>157</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.concatTakeFirstLastBackpressureCompletes(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureExceptionDelayed(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>49</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>69</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>80</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>205</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>94</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>109</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.directCompletesUnsafe(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>117</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>137</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.directCompletesUnsafe(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>222</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>168</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>223</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>177</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>187</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>196</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.directCompletesUnsafe(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>218</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>241</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>244</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>147</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.directCompletesUnsafe(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>201</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>428</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.canBeCancelled(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.directCompletesUnsafe(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.directCompletesUnsafe(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)V</methodDescription><lineNumber>355</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>63</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)V</methodDescription><lineNumber>362</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>87</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.concatTakeFirstLastBackpressureCompletes(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)V</methodDescription><lineNumber>355</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>81</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)V</methodDescription><lineNumber>370</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>112</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)V</methodDescription><lineNumber>372</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>128</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)V</methodDescription><lineNumber>372</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>133</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)V</methodDescription><lineNumber>372</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>135</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)V</methodDescription><lineNumber>343</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.concatTakeFirstLastBackpressureCompletes(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)V</methodDescription><lineNumber>343</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.concatTakeFirstLastBackpressureCompletes(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)V</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.concatTakeFirstLastBackpressureCompletes(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)V</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.concatTakeFirstLastBackpressureCompletes(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)V</methodDescription><lineNumber>355</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>63</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.concatTakeFirstLastBackpressureCompletes(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)V</methodDescription><lineNumber>356</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>70</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.concatTakeFirstLastBackpressureCompletes(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)V</methodDescription><lineNumber>362</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>87</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.concatTakeFirstLastBackpressureCompletes(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)V</methodDescription><lineNumber>367</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>99</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)V</methodDescription><lineNumber>371</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>122</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;)V</methodDescription><lineNumber>372</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>136</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>subscriber</mutatedMethod><methodDescription>()Lrx/Subscriber;</methodDescription><lineNumber>418</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>terminate</mutatedMethod><methodDescription>()[Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;</methodDescription><lineNumber>299</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.concatTakeFirstLastCompletes(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>terminate</mutatedMethod><methodDescription>()[Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;</methodDescription><lineNumber>302</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.concatTakeFirstLastCompletes(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>terminate</mutatedMethod><methodDescription>()[Lrx/internal/operators/OnSubscribePublishMulticast$PublishProducer;</methodDescription><lineNumber>307</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>52</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>423</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.takeCompletesUnsafe(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReference;)V</methodDescription><lineNumber>247</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorPublish$InnerProducer;)Z</methodDescription><lineNumber>332</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>38</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnUnSubscribeWorksWithRefCount(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorPublish$InnerProducer;)Z</methodDescription><lineNumber>318</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnUnSubscribeWorksWithRefCount(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorPublish$InnerProducer;)Z</methodDescription><lineNumber>327</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorPublish$InnerProducer;)Z</methodDescription><lineNumber>336</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>62</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorPublish$InnerProducer;)Z</methodDescription><lineNumber>328</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorPublish$InnerProducer;)Z</methodDescription><lineNumber>337</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>66</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorPublish$InnerProducer;)Z</methodDescription><lineNumber>333</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>48</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnUnSubscribeWorksWithRefCount(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(Ljava/lang/Object;Z)Z</methodDescription><lineNumber>424</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>43</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnUnSubscribeWorksWithRefCount(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(Ljava/lang/Object;Z)Z</methodDescription><lineNumber>444</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>114</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(Ljava/lang/Object;Z)Z</methodDescription><lineNumber>424</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>55</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnUnSubscribeWorksWithRefCount(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(Ljava/lang/Object;Z)Z</methodDescription><lineNumber>444</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>127</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(Ljava/lang/Object;Z)Z</methodDescription><lineNumber>403</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnUnSubscribeWorksWithRefCount(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(Ljava/lang/Object;Z)Z</methodDescription><lineNumber>405</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnUnSubscribeWorksWithRefCount(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(Ljava/lang/Object;Z)Z</methodDescription><lineNumber>407</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnUnSubscribeWorksWithRefCount(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(Ljava/lang/Object;Z)Z</methodDescription><lineNumber>424</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnUnSubscribeWorksWithRefCount(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(Ljava/lang/Object;Z)Z</methodDescription><lineNumber>444</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>114</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testUpstreamErrorAllowsRetry(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(Ljava/lang/Object;Z)Z</methodDescription><lineNumber>433</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>78</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(Ljava/lang/Object;Z)Z</methodDescription><lineNumber>453</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>150</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(Ljava/lang/Object;Z)Z</methodDescription><lineNumber>457</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>155</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnUnSubscribeWorksWithRefCount(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(Ljava/lang/Object;Z)Z</methodDescription><lineNumber>425</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>52</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnUnSubscribeWorksWithRefCount(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(Ljava/lang/Object;Z)Z</methodDescription><lineNumber>430</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>61</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(Ljava/lang/Object;Z)Z</methodDescription><lineNumber>430</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>71</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(Ljava/lang/Object;Z)Z</methodDescription><lineNumber>445</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>124</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testUpstreamErrorAllowsRetry(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(Ljava/lang/Object;Z)Z</methodDescription><lineNumber>450</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>133</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(Ljava/lang/Object;Z)Z</methodDescription><lineNumber>450</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>143</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>530</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>148</index><killingTest>rx.internal.operators.OperatorPublishTest.testNoSubscriberRetentionOnCompleted(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>534</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>163</index><killingTest>rx.internal.operators.OperatorPublishTest.testZeroRequested(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>564</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>275</index><killingTest>rx.internal.operators.OperatorPublishTest.testZeroRequested(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>580</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>373</index><killingTest>rx.internal.operators.OperatorPublishTest.testNoSubscriberRetentionOnCompleted(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>585</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>384</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>603</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>435</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>539</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>180</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>530</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>184</index><killingTest>rx.internal.operators.OperatorPublishTest.testNoSubscriberRetentionOnCompleted(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>580</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>422</index><killingTest>rx.internal.operators.OperatorPublishTest.testNoSubscriberRetentionOnCompleted(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>599</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>427</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>469</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnUnSubscribeWorksWithRefCount(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>507</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>71</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnUnSubscribeWorksWithRefCount(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>633</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>79</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>515</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>112</index><killingTest>rx.internal.operators.OperatorPublishTest.testNoSubscriberRetentionOnCompleted(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>530</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>148</index><killingTest>rx.internal.operators.OperatorPublishTest.testZeroRequested(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>534</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>163</index><killingTest>rx.internal.operators.OperatorPublishTest.testZeroRequested(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>538</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>177</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>546</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>191</index><killingTest>rx.internal.operators.OperatorPublishTest.testNoSubscriberRetentionOnCompleted(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>551</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>208</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>551</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>217</index><killingTest>rx.internal.operators.OperatorPublishTest.testConnectWithNoSubscriber(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>633</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>225</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>564</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>275</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>567</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>290</index><killingTest>rx.internal.operators.OperatorPublishTest.testNoSubscriberRetentionOnCompleted(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>569</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>305</index><killingTest>rx.internal.operators.OperatorPublishTest.testNoSubscriberRetentionOnCompleted(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>633</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>313</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>574</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>346</index><killingTest>rx.internal.operators.OperatorPublishTest.testNoSubscriberRetentionOnCompleted(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>580</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>373</index><killingTest>rx.internal.operators.OperatorPublishTest.testNoSubscriberRetentionOnCompleted(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>585</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>384</index><killingTest>rx.internal.operators.OperatorPublishTest.testNoSubscriberRetentionOnCompleted(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>603</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>435</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>609</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>448</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>609</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>450</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>620</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>465</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>633</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>482</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>633</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>541</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>556</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>259</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>587</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>390</index><killingTest>rx.internal.operators.OperatorPublishTest.testNoSubscriberRetentionOnCompleted(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>590</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>401</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>591</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>408</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>604</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>441</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>init</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>259</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>303</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnUnSubscribeWorksWithRefCount(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>307</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorPublishTest.testNoSubscriberRetentionOnCompleted(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>292</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testUpstreamErrorAllowsRetry(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>296</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testUpstreamErrorAllowsRetry(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>280</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorPublishTest.testNoSubscriberRetentionOnCompleted(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>281</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>285</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest>rx.observables.ConnectableObservableTest.testAutoConnectUnsubscribe(rx.observables.ConnectableObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>274</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorPublishTest.testObserveOn(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorPublish$InnerProducer;)V</methodDescription><lineNumber>361</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>39</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorPublish$InnerProducer;)V</methodDescription><lineNumber>368</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>64</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorPublish$InnerProducer;)V</methodDescription><lineNumber>361</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>58</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testAlreadyUnsubscribedInterleavesWithClient(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorPublish$InnerProducer;)V</methodDescription><lineNumber>379</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>85</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testRefCount(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorPublish$InnerProducer;)V</methodDescription><lineNumber>383</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>101</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.onlyFirstShouldSubscribeAndLastUnsubscribe(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorPublish$InnerProducer;)V</methodDescription><lineNumber>383</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>106</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testAlreadyUnsubscribedInterleavesWithClient(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorPublish$InnerProducer;)V</methodDescription><lineNumber>383</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>108</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.onlyFirstShouldSubscribeAndLastUnsubscribe(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorPublish$InnerProducer;)V</methodDescription><lineNumber>354</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorPublish$InnerProducer;)V</methodDescription><lineNumber>354</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorPublish$InnerProducer;)V</methodDescription><lineNumber>361</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorPublish$InnerProducer;)V</methodDescription><lineNumber>362</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>47</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testRefCount(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorPublish$InnerProducer;)V</methodDescription><lineNumber>368</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>64</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorPublish$InnerProducer;)V</methodDescription><lineNumber>375</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>73</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testRefCount(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorPublish$InnerProducer;)V</methodDescription><lineNumber>386</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>118</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorPublish$InnerProducer;)V</methodDescription><lineNumber>381</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>95</index><killingTest>rx.internal.operators.OperatorPublishTest.testTakeUntilWithPublishedStream(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$PublishSubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorPublish$InnerProducer;)V</methodDescription><lineNumber>383</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>109</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testRefCount(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>14</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.testBackpressure(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>22</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.testBackpressure(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>55</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>39</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>62</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>adjustLookAheadStep</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>218</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>calcDirectOffset</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>249</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>calcWrappedOffset</mutatedMethod><methodDescription>(JI)I</methodDescription><lineNumber>246</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>calcWrappedOffset</mutatedMethod><methodDescription>(JI)I</methodDescription><lineNumber>246</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>lpConsumerIndex</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>234</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>lpProducerIndex</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>lvConsumerIndex</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>226</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>lvElement</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>lvNext</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;)Ljava/util/concurrent/atomic/AtomicReferenceArray;</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>lvNext</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;)Ljava/util/concurrent/atomic/AtomicReferenceArray;</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>lvProducerIndex</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>222</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>newBufferPeek</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.testBackpressure(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>newBufferPoll</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>newBufferPoll</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>newBufferPoll</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>newBufferPoll</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;</methodDescription><lineNumber>157</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>44</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>newBufferPoll</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>newBufferPoll</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>40</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>49</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>66</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>68</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>86</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>59</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>90</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>37</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>78</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>99</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>114</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>110</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Z</methodDescription><lineNumber>335</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>42</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Z</methodDescription><lineNumber>336</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>50</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Z</methodDescription><lineNumber>344</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>88</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>108</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Z</methodDescription><lineNumber>333</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Z</methodDescription><lineNumber>353</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>120</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Z</methodDescription><lineNumber>335</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>44</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Z</methodDescription><lineNumber>336</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>51</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Z</methodDescription><lineNumber>337</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>57</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Z</methodDescription><lineNumber>344</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>90</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Z</methodDescription><lineNumber>345</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>96</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Z</methodDescription><lineNumber>346</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>102</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Z</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>109</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.testBackpressure(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Z</methodDescription><lineNumber>350</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>115</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>42</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.testBackpressure(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>47</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>53</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>47</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>69</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.testCombineLatestWithFunctionThatThrowsAnException(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>64</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>79</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>84</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.testCombineLatestWithFunctionThatThrowsAnException(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>54</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>60</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>resize</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>resize</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>25</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>resize</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>resize</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>resize</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>39</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>resize</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>45</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>resize</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>51</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>soConsumerIndex</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>242</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>soElement</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>soNext</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/util/concurrent/atomic/AtomicReferenceArray;)V</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.testBackpressure(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>soNext</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/util/concurrent/atomic/AtomicReferenceArray;)V</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>soProducerIndex</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>238</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>writeToQueue</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>writeToQueue</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>writeToQueue</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscLinkedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedArrayQueue</mutatedClass><mutatedMethod>writeToQueue</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>304</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>10</index><killingTest>rx.internal.util.IndexedRingBufferTest.testForEachAcrossSections(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>309</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>28</index><killingTest>rx.internal.util.IndexedRingBufferTest.testForEachAcrossSections(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>304</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.internal.util.IndexedRingBufferTest.testForEachAcrossSections(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>307</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest>rx.internal.util.IndexedRingBufferTest.longRunningAddRemoveAddDoesntLeakMemory(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>311</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>42</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>306</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest>rx.internal.util.IndexedRingBufferTest.removeMiddle(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>310</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest>rx.internal.util.IndexedRingBufferTest.testForEachAcrossSections(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Func1;)I</methodDescription><lineNumber>428</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.util.IndexedRingBufferTest.testForEachWithIndex(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Func1;I)I</methodDescription><lineNumber>439</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Func1;I)I</methodDescription><lineNumber>439</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.util.IndexedRingBufferTest.testForEachWithIndex(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Func1;I)I</methodDescription><lineNumber>439</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest>rx.internal.util.IndexedRingBufferTest.testForEachWithIndex(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Func1;I)I</methodDescription><lineNumber>442</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><killingTest>rx.internal.util.IndexedRingBufferTest.testForEachWithIndex(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Func1;I)I</methodDescription><lineNumber>446</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>45</index><killingTest>rx.internal.util.IndexedRingBufferTest.testForEachWithIndex(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Func1;II)I</methodDescription><lineNumber>455</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Func1;II)I</methodDescription><lineNumber>462</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>50</index><killingTest>rx.internal.util.IndexedRingBufferTest.testForEachAcrossSections(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Func1;II)I</methodDescription><lineNumber>463</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>55</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Func1;II)I</methodDescription><lineNumber>463</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>58</index><killingTest>rx.internal.util.IndexedRingBufferTest.testForEachWithIndex(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Func1;II)I</methodDescription><lineNumber>462</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>106</index><killingTest>rx.internal.util.IndexedRingBufferTest.removeMiddle(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Func1;II)I</methodDescription><lineNumber>462</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>107</index><killingTest>rx.internal.util.IndexedRingBufferTest.testForEachWithIndex(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Func1;II)I</methodDescription><lineNumber>458</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>35</index><killingTest>rx.internal.util.IndexedRingBufferTest.testForEachAcrossSections(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Func1;II)I</methodDescription><lineNumber>455</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest>rx.internal.util.IndexedRingBufferTest.testForEachAcrossSections(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Func1;II)I</methodDescription><lineNumber>461</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>41</index><killingTest>rx.internal.util.IndexedRingBufferTest.removeMiddle(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Func1;II)I</methodDescription><lineNumber>462</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>50</index><killingTest>rx.internal.util.IndexedRingBufferTest.removeMiddle(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Func1;II)I</methodDescription><lineNumber>463</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>55</index><killingTest>rx.internal.util.IndexedRingBufferTest.removeMiddle(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Func1;II)I</methodDescription><lineNumber>463</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>58</index><killingTest>rx.internal.util.IndexedRingBufferTest.removeMiddle(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Func1;II)I</methodDescription><lineNumber>468</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>78</index><killingTest>rx.internal.util.IndexedRingBufferTest.removeMiddle(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Func1;II)I</methodDescription><lineNumber>473</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>98</index><killingTest>rx.internal.util.IndexedRingBufferTest.removeMiddle(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Func1;II)I</methodDescription><lineNumber>474</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>102</index><killingTest>rx.internal.util.IndexedRingBufferTest.testForEachWithIndex(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Func1;II)I</methodDescription><lineNumber>482</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>126</index><killingTest>rx.internal.util.IndexedRingBufferTest.testForEachWithIndex(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getElementSection</mutatedMethod><methodDescription>(I)Lrx/internal/util/IndexedRingBuffer$ElementSection;</methodDescription><lineNumber>345</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>5</index><killingTest>rx.internal.util.IndexedRingBufferTest.testForEachAcrossSections(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getElementSection</mutatedMethod><methodDescription>(I)Lrx/internal/util/IndexedRingBuffer$ElementSection;</methodDescription><lineNumber>352</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>31</index><killingTest>rx.internal.util.IndexedRingBufferTest.testForEachAcrossSections(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getElementSection</mutatedMethod><methodDescription>(I)Lrx/internal/util/IndexedRingBuffer$ElementSection;</methodDescription><lineNumber>352</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>39</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getElementSection</mutatedMethod><methodDescription>(I)Lrx/internal/util/IndexedRingBuffer$ElementSection;</methodDescription><lineNumber>350</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getElementSection</mutatedMethod><methodDescription>(I)Lrx/internal/util/IndexedRingBuffer$ElementSection;</methodDescription><lineNumber>345</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.util.IndexedRingBufferTest.testForEachAcrossSections(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getElementSection</mutatedMethod><methodDescription>(I)Lrx/internal/util/IndexedRingBuffer$ElementSection;</methodDescription><lineNumber>352</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest>rx.internal.util.IndexedRingBufferTest.testForEachAcrossSections(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getElementSection</mutatedMethod><methodDescription>(I)Lrx/internal/util/IndexedRingBuffer$ElementSection;</methodDescription><lineNumber>346</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getElementSection</mutatedMethod><methodDescription>(I)Lrx/internal/util/IndexedRingBuffer$ElementSection;</methodDescription><lineNumber>355</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>45</index><killingTest>rx.internal.util.IndexedRingBufferTest.testForEachAcrossSections(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getIndexForAdd</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>364</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>9</index><killingTest>rx.internal.util.IndexedRingBufferTest.addRemoveAdd(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getIndexForAdd</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>365</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getIndexForAdd</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>369</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getIndexForAdd</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>364</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.internal.util.IndexedRingBufferTest.removeMiddle(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getIndexForAdd</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>365</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getIndexForAdd</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>372</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>48</index><killingTest>rx.internal.util.IndexedRingBufferTest.longRunningAddRemoveAddDoesntLeakMemory(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getIndexForAdd</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>379</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>67</index><killingTest>rx.internal.util.IndexedRingBufferTest.removeMiddle(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getIndexFromPreviouslyRemoved</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>395</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>11</index><killingTest>rx.internal.util.IndexedRingBufferTest.removeMiddle(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getIndexFromPreviouslyRemoved</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>397</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>19</index><killingTest>rx.internal.util.IndexedRingBufferTest.addThousands(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getIndexFromPreviouslyRemoved</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>398</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>26</index><killingTest>rx.internal.util.IndexedRingBufferTest.addRemoveAdd(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getIndexFromPreviouslyRemoved</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>395</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.util.IndexedRingBufferTest.removeMiddle(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getIndexFromPreviouslyRemoved</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>397</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest>rx.internal.util.IndexedRingBufferTest.addRemoveAdd(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getIndexFromPreviouslyRemoved</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>398</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>27</index><killingTest>rx.internal.util.IndexedRingBufferTest.addRemoveAdd(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getIndexFromPreviouslyRemoved</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>402</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>32</index><killingTest>rx.internal.util.IndexedRingBufferTest.removeMiddle(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getIndexSection</mutatedMethod><methodDescription>(I)Lrx/internal/util/IndexedRingBuffer$IndexSection;</methodDescription><lineNumber>330</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getIndexSection</mutatedMethod><methodDescription>(I)Lrx/internal/util/IndexedRingBuffer$IndexSection;</methodDescription><lineNumber>337</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getIndexSection</mutatedMethod><methodDescription>(I)Lrx/internal/util/IndexedRingBuffer$IndexSection;</methodDescription><lineNumber>337</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>39</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getIndexSection</mutatedMethod><methodDescription>(I)Lrx/internal/util/IndexedRingBuffer$IndexSection;</methodDescription><lineNumber>335</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getIndexSection</mutatedMethod><methodDescription>(I)Lrx/internal/util/IndexedRingBuffer$IndexSection;</methodDescription><lineNumber>330</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getIndexSection</mutatedMethod><methodDescription>(I)Lrx/internal/util/IndexedRingBuffer$IndexSection;</methodDescription><lineNumber>337</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getIndexSection</mutatedMethod><methodDescription>(I)Lrx/internal/util/IndexedRingBuffer$IndexSection;</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getIndexSection</mutatedMethod><methodDescription>(I)Lrx/internal/util/IndexedRingBuffer$IndexSection;</methodDescription><lineNumber>340</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>45</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>getInstance</mutatedMethod><methodDescription>()Lrx/internal/util/IndexedRingBuffer;</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.util.IndexedRingBufferTest.removeMiddle(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>424</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>pushRemovedIndex</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>413</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>pushRemovedIndex</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>417</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>25</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>pushRemovedIndex</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>413</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>pushRemovedIndex</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>415</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest>rx.internal.util.IndexedRingBufferTest.addRemoveAdd(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>pushRemovedIndex</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>418</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>releaseToPool</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>271</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>29</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>releaseToPool</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>releaseToPool</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>271</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>52</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>releaseToPool</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>271</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>53</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>releaseToPool</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>270</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>releaseToPool</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>271</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>releaseToPool</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>releaseToPool</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>278</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>49</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>releaseToPool</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>283</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>70</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>releaseToPool</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>284</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>76</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>releaseToPool</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>285</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>81</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)Ljava/lang/Object;</methodDescription><lineNumber>317</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>5</index><killingTest>rx.internal.util.IndexedRingBufferTest.testConcurrentAddAndRemoves(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)Ljava/lang/Object;</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>22</index><killingTest>rx.internal.util.IndexedRingBufferTest.addThousands(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)Ljava/lang/Object;</methodDescription><lineNumber>317</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.util.IndexedRingBufferTest.addThousands(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)Ljava/lang/Object;</methodDescription><lineNumber>325</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>43</index><killingTest>rx.internal.util.IndexedRingBufferTest.testConcurrentAddAndRemoves(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(I)Ljava/lang/Object;</methodDescription><lineNumber>324</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>39</index><killingTest>rx.internal.util.IndexedRingBufferTest.addRemoveAdd(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Subscriber;Lrx/functions/FuncN;IIZ)V</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>41</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>cancel</mutatedMethod><methodDescription>(Ljava/util/Queue;)V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>21</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.testCombineLatestWithFunctionThatThrowsAnException(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>cancel</mutatedMethod><methodDescription>(Ljava/util/Queue;)V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>32</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.testCombineLatestWithFunctionThatThrowsAnException(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>cancel</mutatedMethod><methodDescription>(Ljava/util/Queue;)V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>cancel</mutatedMethod><methodDescription>(Ljava/util/Queue;)V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>cancel</mutatedMethod><methodDescription>(Ljava/util/Queue;)V</methodDescription><lineNumber>177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;Z)Z</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;Z)Z</methodDescription><lineNumber>312</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;Z)Z</methodDescription><lineNumber>313</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;Z)Z</methodDescription><lineNumber>314</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;Z)Z</methodDescription><lineNumber>316</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;Z)Z</methodDescription><lineNumber>325</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>66</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;Z)Z</methodDescription><lineNumber>330</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>85</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;Z)Z</methodDescription><lineNumber>310</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;Z)Z</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>54</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;Z)Z</methodDescription><lineNumber>328</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>80</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;Z)Z</methodDescription><lineNumber>332</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>93</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;Z)Z</methodDescription><lineNumber>336</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>98</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;Z)Z</methodDescription><lineNumber>309</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;Z)Z</methodDescription><lineNumber>317</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>43</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;Z)Z</methodDescription><lineNumber>319</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>49</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;Z)Z</methodDescription><lineNumber>326</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>71</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;Z)Z</methodDescription><lineNumber>327</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>76</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;Z)Z</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>89</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>combine</mutatedMethod><methodDescription>(Ljava/lang/Object;I)V</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>40</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>combine</mutatedMethod><methodDescription>(Ljava/lang/Object;I)V</methodDescription><lineNumber>204</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>56</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>combine</mutatedMethod><methodDescription>(Ljava/lang/Object;I)V</methodDescription><lineNumber>199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>combine</mutatedMethod><methodDescription>(Ljava/lang/Object;I)V</methodDescription><lineNumber>203</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>52</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>combine</mutatedMethod><methodDescription>(Ljava/lang/Object;I)V</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>76</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>combine</mutatedMethod><methodDescription>(Ljava/lang/Object;I)V</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>89</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>combine</mutatedMethod><methodDescription>(Ljava/lang/Object;I)V</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>91</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>combine</mutatedMethod><methodDescription>(Ljava/lang/Object;I)V</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>94</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>combine</mutatedMethod><methodDescription>(Ljava/lang/Object;I)V</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>108</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>combine</mutatedMethod><methodDescription>(Ljava/lang/Object;I)V</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>112</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>combine</mutatedMethod><methodDescription>(Ljava/lang/Object;I)V</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>114</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>combine</mutatedMethod><methodDescription>(Ljava/lang/Object;I)V</methodDescription><lineNumber>216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>130</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>combine</mutatedMethod><methodDescription>(Ljava/lang/Object;I)V</methodDescription><lineNumber>216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>134</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>combine</mutatedMethod><methodDescription>(Ljava/lang/Object;I)V</methodDescription><lineNumber>223</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>166</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.testCombineLatestWithFunctionThatThrowsAnException(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>combine</mutatedMethod><methodDescription>(Ljava/lang/Object;I)V</methodDescription><lineNumber>223</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>168</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>combine</mutatedMethod><methodDescription>(Ljava/lang/Object;I)V</methodDescription><lineNumber>224</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>173</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.testWithCombineLatestIssue1717(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>combine</mutatedMethod><methodDescription>(Ljava/lang/Object;I)V</methodDescription><lineNumber>227</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>181</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>299</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>244</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>289</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>211</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.testBackpressure(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>217</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.testBackpressure(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test5SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>242</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>46</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>247</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>61</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.testBackpressure(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>80</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>255</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>95</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>257</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>113</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>261</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>121</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>268</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>141</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>293</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>228</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.testBackpressure(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>294</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>232</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.testBackpressure(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>300</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>250</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>270</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>151</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>271</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>159</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>280</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>187</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>281</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>192</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.testCombineLatestWithFunctionThatThrowsAnException(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>285</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>201</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>287</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>206</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>344</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testErrorPropagatesWhenNoOutstandingRequests(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>345</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>356</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>83</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>([Lrx/Observable;)V</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>19</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>([Lrx/Observable;)V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>60</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.testFirstNeverProduces(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>([Lrx/Observable;)V</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>32</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>([Lrx/Observable;)V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>82</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>([Lrx/Observable;)V</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>([Lrx/Observable;)V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>60</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>([Lrx/Observable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>65</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>([Lrx/Observable;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>39</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>([Lrx/Observable;)V</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>45</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>([Lrx/Observable;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>51</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>163</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>16</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>57</index><killingTest>rx.internal.util.JCToolsQueueTests.testUnboundedAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>41</index><killingTest>rx.internal.util.JCToolsQueueTests.testUnboundedAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>64</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>adjustLookAheadStep</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>6</index><killingTest>rx.internal.util.JCToolsQueueTests.testUnboundedAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>calcDirectOffset</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>calcWrappedOffset</mutatedMethod><methodDescription>(JI)I</methodDescription><lineNumber>247</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>6</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>calcWrappedOffset</mutatedMethod><methodDescription>(JI)I</methodDescription><lineNumber>247</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>184</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>184</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>lpConsumerIndex</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>235</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>lpProducerIndex</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>lvConsumerIndex</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>227</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>lvElement</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;</methodDescription><lineNumber>257</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>lvNext</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;)Ljava/util/concurrent/atomic/AtomicReferenceArray;</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><killingTest>rx.internal.util.JCToolsQueueTests.testUnboundedAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>lvNext</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;)Ljava/util/concurrent/atomic/AtomicReferenceArray;</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.internal.util.JCToolsQueueTests.testUnboundedAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>lvProducerIndex</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>223</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>newBufferPeek</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;</methodDescription><lineNumber>191</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><killingTest>rx.internal.util.JCToolsQueueTests.testUnboundedAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>newBufferPoll</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>33</index><killingTest>rx.internal.operators.OperatorFlatMapTest.flatMapRangeMixedAsyncLoop(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>newBufferPoll</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>newBufferPoll</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>newBufferPoll</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>44</index><killingTest>rx.internal.operators.OperatorFlatMapTest.flatMapRangeMixedAsyncLoop(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>newBufferPoll</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest>rx.internal.operators.OperatorFlatMapTest.flatMapRangeMixedAsyncLoop(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>newBufferPoll</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;</methodDescription><lineNumber>157</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>40</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>39</index><killingTest>rx.internal.util.JCToolsQueueTests.testUnboundedAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>60</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>77</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>79</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>97</index><killingTest>rx.internal.util.JCToolsQueueTests.testUnboundedAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueNull(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><killingTest>rx.internal.util.JCToolsQueueTests.testUnboundedAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>70</index><killingTest>rx.internal.util.JCToolsQueueTests.testUnboundedAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>101</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>48</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>89</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>110</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>125</index><killingTest>rx.internal.util.JCToolsQueueTests.testUnboundedAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>121</index><killingTest>rx.internal.util.JCToolsQueueTests.testUnboundedAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>42</index><killingTest>rx.internal.util.JCToolsQueueTests.testUnboundedAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>47</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>53</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>47</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>69</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>64</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>79</index><killingTest>rx.internal.operators.OperatorFlatMapTest.flatMapRangeMixedAsyncLoop(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>84</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>54</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>60</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>resize</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>resize</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>25</index><killingTest>rx.internal.operators.OperatorFlatMapTest.flatMapRangeMixedAsyncLoop(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>resize</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>32</index><killingTest>rx.internal.util.JCToolsQueueTests.testUnboundedAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>resize</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest>rx.internal.util.JCToolsQueueTests.testUnboundedAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>resize</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>39</index><killingTest>rx.internal.util.JCToolsQueueTests.testUnboundedAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>resize</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>45</index><killingTest>rx.internal.util.JCToolsQueueTests.testUnboundedAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>resize</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>51</index><killingTest>rx.internal.util.JCToolsQueueTests.testUnboundedAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>31</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>33</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>soConsumerIndex</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>243</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>soElement</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V</methodDescription><lineNumber>253</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>soNext</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/util/concurrent/atomic/AtomicReferenceArray;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><killingTest>rx.internal.util.JCToolsQueueTests.testUnboundedAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>soNext</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/util/concurrent/atomic/AtomicReferenceArray;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.internal.util.JCToolsQueueTests.testUnboundedAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>soProducerIndex</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>writeToQueue</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>6</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>writeToQueue</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>writeToQueue</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscUnboundedAtomicArrayQueue</mutatedClass><mutatedMethod>writeToQueue</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscUnboundedAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>276</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>268</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>308</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>245</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>259</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>269</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>267</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>301</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>50</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>52</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>54</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>56</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>218</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>107</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>113</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>115</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>129</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>132</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>226</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>146</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>227</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>151</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>165</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>237</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>181</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>238</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>191</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>199</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>242</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>208</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>258</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>258</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>264</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>276</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>266</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>292</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>266</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>296</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>268</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>308</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>275</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>331</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>276</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>336</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>280</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>354</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>287</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>375</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>287</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>379</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>120</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>157</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>232</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>169</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>246</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>217</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>230</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.producers.ProducersTest.testObserverArbiterWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>49</index><killingTest>rx.internal.producers.ProducersTest.testObserverArbiterWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>52</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>58</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>88</index><killingTest>rx.internal.producers.ProducersTest.testObserverArbiterWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.producers.ProducersTest.testObserverArbiterWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>82</index><killingTest>rx.internal.producers.ProducersTest.testObserverArbiterWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>102</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>137</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>71</index><killingTest>rx.internal.producers.ProducersTest.testObserverArbiterWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>94</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest>rx.internal.producers.ProducersTest.testObserverArbiterWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>96</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>42</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>89</index><killingTest>rx.internal.producers.ProducersTest.testObserverArbiterWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.producers.ProducersTest.testObserverArbiterWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.internal.producers.ProducersTest.testObserverArbiterWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><killingTest>rx.internal.producers.ProducersTest.testObserverArbiterWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>96</index><killingTest>rx.internal.producers.ProducersTest.testObserverArbiterWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>118</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>153</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>187</index><killingTest>rx.internal.producers.ProducersTest.testObserverArbiterWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>110</index><killingTest>rx.internal.producers.ProducersTest.testObserverArbiterWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>192</index><killingTest>rx.internal.producers.ProducersTest.testObserverArbiterWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.producers.ProducersTest.testObserverArbiterWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>166</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>77</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>112</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>184</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>146</index><killingTest>rx.internal.producers.ProducersTest.testObserverArbiterWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>184</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>150</index><killingTest>rx.internal.producers.ProducersTest.testObserverArbiterWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>69</index><killingTest>rx.internal.producers.ProducersTest.testObserverArbiterWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerObserverArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerObserverArbiter</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>155</index><killingTest>rx.internal.producers.ProducersTest.testObserverArbiterWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>14</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>21</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>55</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>39</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>61</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>adjustLookAheadStep</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>6</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>calcDirectOffset</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>271</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>6</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>calcDirectOffset</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>271</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>calcDirectOffset</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>271</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>calcWrappedOffset</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>268</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>5</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='RUN_ERROR'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>calcWrappedOffset</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>268</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>currentConsumerIndex</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>288</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>currentProducerIndex</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>283</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>lvConsumerIndex</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>lvElement</mutatedMethod><methodDescription>([Ljava/lang/Object;J)Ljava/lang/Object;</methodDescription><lineNumber>278</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>lvNext</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='RUN_ERROR'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>lvNext</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>lvProducerIndex</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>newBufferPeek</mutatedMethod><methodDescription>([Ljava/lang/Object;JJ)Ljava/lang/Object;</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>newBufferPoll</mutatedMethod><methodDescription>([Ljava/lang/Object;JJ)Ljava/lang/Object;</methodDescription><lineNumber>195</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>33</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>newBufferPoll</mutatedMethod><methodDescription>([Ljava/lang/Object;JJ)Ljava/lang/Object;</methodDescription><lineNumber>192</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>newBufferPoll</mutatedMethod><methodDescription>([Ljava/lang/Object;JJ)Ljava/lang/Object;</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>newBufferPoll</mutatedMethod><methodDescription>([Ljava/lang/Object;JJ)Ljava/lang/Object;</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>44</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>newBufferPoll</mutatedMethod><methodDescription>([Ljava/lang/Object;JJ)Ljava/lang/Object;</methodDescription><lineNumber>195</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>newBufferPoll</mutatedMethod><methodDescription>([Ljava/lang/Object;JJ)Ljava/lang/Object;</methodDescription><lineNumber>196</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>40</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>41</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>62</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>79</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>81</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>99</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>41</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>72</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>103</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>50</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>91</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>112</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>126</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>122</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testBackpressure(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>42</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>218</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>47</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>53</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>47</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>69</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>64</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>79</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>184</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>84</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>54</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>60</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>resize</mutatedMethod><methodDescription>([Ljava/lang/Object;JJLjava/lang/Object;J)V</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>resize</mutatedMethod><methodDescription>([Ljava/lang/Object;JJLjava/lang/Object;J)V</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>resize</mutatedMethod><methodDescription>([Ljava/lang/Object;JJLjava/lang/Object;J)V</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>31</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testBackpressure(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>resize</mutatedMethod><methodDescription>([Ljava/lang/Object;JJLjava/lang/Object;J)V</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testBackpressure(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>resize</mutatedMethod><methodDescription>([Ljava/lang/Object;JJLjava/lang/Object;J)V</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='RUN_ERROR'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>resize</mutatedMethod><methodDescription>([Ljava/lang/Object;JJLjava/lang/Object;J)V</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>44</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>resize</mutatedMethod><methodDescription>([Ljava/lang/Object;JJLjava/lang/Object;J)V</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>50</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>242</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>31</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>241</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>242</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>33</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>soConsumerIndex</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>264</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>soElement</mutatedMethod><methodDescription>([Ljava/lang/Object;JLjava/lang/Object;)V</methodDescription><lineNumber>274</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='RUN_ERROR'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>soNext</mutatedMethod><methodDescription>([Ljava/lang/Object;[Ljava/lang/Object;)V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='RUN_ERROR'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>soNext</mutatedMethod><methodDescription>([Ljava/lang/Object;[Ljava/lang/Object;)V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>soProducerIndex</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>writeToQueue</mutatedMethod><methodDescription>([Ljava/lang/Object;Ljava/lang/Object;JJ)Z</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>6</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>writeToQueue</mutatedMethod><methodDescription>([Ljava/lang/Object;Ljava/lang/Object;JJ)Z</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>writeToQueue</mutatedMethod><methodDescription>([Ljava/lang/Object;Ljava/lang/Object;JJ)Z</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscUnboundedArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscUnboundedArrayQueue</mutatedClass><mutatedMethod>writeToQueue</mutatedMethod><methodDescription>([Ljava/lang/Object;Ljava/lang/Object;JJ)Z</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>46</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>297</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>302</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>48</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>218</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testErrorCutsAhead(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>221</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;)Z</methodDescription><lineNumber>313</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testErrorCutsAhead(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;)Z</methodDescription><lineNumber>317</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testErrorCutsAhead(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;)Z</methodDescription><lineNumber>319</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testErrorCutsAhead(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;)Z</methodDescription><lineNumber>324</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>47</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testInnerBackpressure(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;)Z</methodDescription><lineNumber>315</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;)Z</methodDescription><lineNumber>322</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>42</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;)Z</methodDescription><lineNumber>326</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>55</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;)Z</methodDescription><lineNumber>329</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>60</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testBackpressure(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;)Z</methodDescription><lineNumber>314</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;)Z</methodDescription><lineNumber>320</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;)Z</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testErrorCutsAhead(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;)Z</methodDescription><lineNumber>325</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>51</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testInnerBackpressure(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testBackpressure(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testBoundaryUnsubscribedOnMainCompletion(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testBoundaryUnsubscribedOnMainCompletion(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>57</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testBoundaryUnsubscribedOnMainCompletion(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>61</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testWindowUnsubscribeNonOverlapping(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>72</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testBackpressure(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>163</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testErrorCutsAhead(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>166</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testErrorCutsAhead(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testErrorCutsAhead(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>62</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testErrorCutsAhead(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>66</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testErrorCutsAheadAfterSubscribed(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>78</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableBoundaryThrows(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>59</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>63</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>79</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testBackpressure(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>157</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>92</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>273</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>225</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testInnerBackpressure(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>269</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>201</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testBackpressure(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>270</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>207</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testInnerBackpressure(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>229</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testErrorCutsAhead(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>64</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>243</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>82</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testBackpressure(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>247</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>97</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testBackpressure(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>116</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testBackpressure(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>253</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>130</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testBackpressure(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>254</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>146</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testBackpressure(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>257</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>154</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testBackpressure(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>216</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testInnerBackpressure(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>220</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testInnerBackpressure(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>278</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>239</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>279</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>243</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testBackpressure(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>279</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>246</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testBackpressure(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>262</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>170</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testBackpressure(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>264</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>181</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>265</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>185</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>266</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>192</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>202</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>202</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testBackpressure(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testErrorCutsAhead(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>204</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testBackpressure(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject$State</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>41</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testErrorCutsAhead(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReference;Lrx/internal/operators/OperatorReplay$ReplayBuffer;)V</methodDescription><lineNumber>336</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)Z</methodDescription><lineNumber>373</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>38</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)Z</methodDescription><lineNumber>359</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)Z</methodDescription><lineNumber>368</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)Z</methodDescription><lineNumber>377</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>62</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)Z</methodDescription><lineNumber>369</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)Z</methodDescription><lineNumber>378</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>66</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)Z</methodDescription><lineNumber>374</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>48</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>init</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>340</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>manageRequests</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>509</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>93</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>manageRequests</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>529</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>180</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>manageRequests</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>509</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>108</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>manageRequests</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>516</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>125</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>manageRequests</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>522</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>158</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>manageRequests</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>528</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>173</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>manageRequests</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>487</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>manageRequests</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>491</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>manageRequests</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>499</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>57</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>manageRequests</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>509</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>93</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>manageRequests</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>517</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>132</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>manageRequests</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>519</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>141</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>manageRequests</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>520</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>147</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>manageRequests</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>529</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>180</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>manageRequests</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>536</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>200</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>manageRequests</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>536</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>202</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>manageRequests</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>543</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>224</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>manageRequests</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>522</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>159</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>manageRequests</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>524</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>166</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>manageRequests</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>539</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>212</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>471</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorReplayTest.testColdReplayNoBackpressure(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>474</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorReplayTest.testColdReplayNoBackpressure(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>475</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorReplayTest.testColdReplayNoBackpressure(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>477</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorReplayTest.testIssue2191_UnsubscribeSource(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>477</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>457</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorReplayTest.testBufferedReplayError(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>460</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorReplayTest.testBufferedReplayError(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>461</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest>rx.internal.operators.OperatorReplayTest.testBufferedReplayError(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>463</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.internal.operators.OperatorReplayTest.testIssue2191_SchedulerUnsubscribeOnError(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>463</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>448</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>449</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>450</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressure(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>402</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>39</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>409</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>64</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>402</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>58</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>420</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>85</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>424</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>101</index><killingTest>rx.internal.operators.OperatorReplayTest.testIssue2191_SchedulerUnsubscribeOnError(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>424</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>106</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>424</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>108</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>395</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>395</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>402</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>403</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>47</index><killingTest>rx.internal.operators.OperatorReplayTest.testAsyncComeAndGo(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>409</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>64</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>416</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>73</index><killingTest>rx.internal.operators.OperatorReplayTest.testAsyncComeAndGo(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>427</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>118</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>422</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>95</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>424</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>109</index><killingTest>rx.internal.operators.OperatorReplayTest.testIssue2191_SchedulerUnsubscribeOnError(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>558</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>558</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>36</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>558</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>559</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>438</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>442</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$ReplaySubscriber</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>443</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Subscriber;Lrx/functions/Func1;Lrx/functions/Func1;IZ)V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>49</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupByUnsubscribe(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Subscriber;Lrx/functions/Func1;Lrx/functions/Func1;IZ)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>63</index><killingTest>rx.exceptions.ExceptionsTest.testOnErrorExceptionIsThrownFromGroupBy(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>cancel</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupByUnsubscribe(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>cancel</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>240</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupByUnsubscribe(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>cancel</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>241</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupByUnsubscribe(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>cancel</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>247</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>cancel</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>cancel</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>249</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.internal.operators.OperatorGroupByTest.testUnsubscribeViaTakeOnGroupThenTakeOnInner(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>cancel</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>324</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.exceptions.ExceptionsTest.testOnErrorExceptionIsThrownFromGroupBy(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>326</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorGroupByTest.testCompletionIfInnerNotSubscribed(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>330</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>334</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>53</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>328</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>339</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>74</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>342</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>79</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>327</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupByShouldPropagateError(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>332</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>43</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>335</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>61</index><killingTest>rx.internal.operators.OperatorGroupByTest.testSkippedGroup(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>338</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>70</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>300</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>159</index><killingTest>rx.internal.operators.OperatorGroupByTest.testCompletionIfInnerNotSubscribed(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>303</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>167</index><killingTest>rx.internal.operators.OperatorGroupByTest.testOneGroupInnerRequestsTwiceBuffer(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>292</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>124</index><killingTest>rx.internal.operators.OperatorGroupByTest.testBackpressureInnerDoesntOverflowOuter(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>293</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>130</index><killingTest>rx.internal.operators.OperatorGroupByTest.testCompletionIfInnerNotSubscribed(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorGroupByTest.testBackpressureInnerDoesntOverflowOuter(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>267</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><killingTest>rx.internal.operators.OperatorGroupByTest.testBackpressureObserveOnOuter(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>275</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>70</index><killingTest>rx.internal.operators.OperatorGroupByTest.testCompletionIfInnerNotSubscribed(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>280</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>85</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>282</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>102</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>286</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>110</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>296</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>141</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>297</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>145</index><killingTest>rx.internal.operators.OperatorGroupByTest.testBackpressureObserveOnOuter(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>304</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>173</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>119</index><killingTest>rx.internal.operators.OperatorGroupByTest.testCompletionIfInnerNotSubscribed(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>300</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>160</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>errorAll</mutatedMethod><methodDescription>(Lrx/Subscriber;Ljava/util/Queue;Ljava/lang/Throwable;)V</methodDescription><lineNumber>315</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest>rx.exceptions.ExceptionsTest.testOnErrorExceptionIsThrownFromGroupBy(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>errorAll</mutatedMethod><methodDescription>(Lrx/Subscriber;Ljava/util/Queue;Ljava/lang/Throwable;)V</methodDescription><lineNumber>311</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>errorAll</mutatedMethod><methodDescription>(Lrx/Subscriber;Ljava/util/Queue;Ljava/lang/Throwable;)V</methodDescription><lineNumber>313</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>errorAll</mutatedMethod><methodDescription>(Lrx/Subscriber;Ljava/util/Queue;Ljava/lang/Throwable;)V</methodDescription><lineNumber>316</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>37</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupByShouldPropagateError(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>errorAll</mutatedMethod><methodDescription>(Lrx/Subscriber;Ljava/util/Queue;Ljava/lang/Throwable;)V</methodDescription><lineNumber>319</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>46</index><killingTest>rx.exceptions.ExceptionsTest.testOnErrorExceptionIsThrownFromGroupBy(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>224</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupByShouldPropagateError(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>35</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupByShouldPropagateError(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.exceptions.ExceptionsTest.testOnErrorExceptionIsThrownFromGroupBy(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>56</index><killingTest>rx.internal.operators.OperatorGroupByTest.testCompletionIfInnerNotSubscribed(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>76</index><killingTest>rx.internal.operators.OperatorGroupByTest.testCompletionIfInnerNotSubscribed(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>81</index><killingTest>rx.internal.operators.OperatorGroupByTest.testCompletionIfInnerNotSubscribed(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>163</index><killingTest>rx.ObservableTests.testErrorThrownIssue1685(rx.ObservableTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>37</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>44</index><killingTest>rx.exceptions.ExceptionsTest.testOnErrorExceptionIsThrownFromGroupBy(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>119</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupByShouldPropagateError(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>143</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>150</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>198</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>159</index><killingTest>rx.internal.operators.OperatorGroupByTest.testOneGroupInnerRequestsTwiceBuffer(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>201</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>169</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorGroupByTest.testBackpressureInnerDoesntOverflowOuter(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorGroupByTest.testEmpty(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest>rx.internal.operators.OperatorGroupByTest.testBackpressureInnerDoesntOverflowOuter(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupBySubscriber</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.exceptions.ExceptionsTest.testOnErrorExceptionIsThrownFromGroupBy(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorWindowWithTime;Lrx/Subscriber;Lrx/Scheduler$Worker;)V</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>42</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>266</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimedAndCount(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>267</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimedAndCount(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>269</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>270</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)Z</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimedAndCount(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)Z</methodDescription><lineNumber>183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)Z</methodDescription><lineNumber>184</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)Z</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)Z</methodDescription><lineNumber>189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)Z</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>60</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)Z</methodDescription><lineNumber>199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>78</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)Z</methodDescription><lineNumber>181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)Z</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>36</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)Z</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>82</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)Z</methodDescription><lineNumber>204</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>91</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)Z</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>50</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)Z</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>64</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>emitValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>41</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testExactWindowSize(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>emitValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>224</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimedAndCount(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>emitValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testExactWindowSize(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>emitValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimedAndCount(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>emitValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>226</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>emitValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>238</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>69</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>emitValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimedAndCount(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>emitValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>232</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>47</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimedAndCount(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>257</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>258</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>261</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>nextWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimedAndCount(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>nextWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>309</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>nextWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>319</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>68</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>nextWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>339</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>72</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>nextWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>326</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>118</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>nextWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>339</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>135</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>nextWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>334</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>191</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>nextWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>339</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>195</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>nextWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>339</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>235</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>276</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimedAndCount(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>277</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>88</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>293</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>96</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimedAndCount(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>244</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>57</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimedAndCount(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>69</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>73</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>119</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>136</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>167</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>192</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>196</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>236</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>replaceSubject</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimedAndCount(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>replaceSubject</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimedAndCount(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>replaceSubject</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>36</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>replaceSubject</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>60</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testExactWindowSize(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>replaceSubject</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimed(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>replaceSubject</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber</mutatedClass><mutatedMethod>replaceSubject</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>56</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimedAndCount(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>320</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>7</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>320</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>320</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>315</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>5</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>315</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>354</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>70</index><killingTest>rx.internal.operators.CachedObservableTest.testAsync(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>389</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>282</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>392</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>292</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>392</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>296</index><killingTest>rx.internal.operators.CachedObservableTest.testAsync(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>419</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>485</index><killingTest>rx.internal.operators.OperatorReplayTest.testUnsubscribeSource(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>420</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>488</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>422</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>497</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>370</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>144</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayNoBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>421</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>493</index><killingTest>rx.internal.operators.CachedObservableTest.testValuesAndThenError(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>339</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>354</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>70</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>447</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>78</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>362</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>117</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>366</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>126</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>374</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>161</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>376</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>173</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>447</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>189</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>382</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>224</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>447</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>243</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>389</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>282</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>392</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>292</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>392</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>296</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>393</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>301</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>447</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>309</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>397</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>343</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>404</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>369</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>447</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>381</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>413</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>435</index><killingTest>rx.internal.operators.CachedObservableTest.unsafeChildThrows(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>413</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>439</index><killingTest>rx.internal.operators.CachedObservableTest.unsafeChildThrows(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>447</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>453</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>425</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>506</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>447</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>514</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>438</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>577</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>447</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>594</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>447</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>653</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>377</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>177</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>379</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>185</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>383</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>231</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>239</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>406</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>377</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>421</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>412</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>429</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>414</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>448</index><killingTest>rx.internal.operators.CachedObservableTest.unsafeChildThrows(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>296</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>12</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>300</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>299</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>21</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>296</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>300</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>303</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>40</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>304</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>44</index><killingTest>rx.internal.operators.CachedObservableTest.testValuesAndThenError(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>325</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>11</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>327</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>23</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>325</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>327</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$ReplayProducer</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>328</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>accept</mutatedMethod><methodDescription>(Lrx/Observer;)V</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>accept</mutatedMethod><methodDescription>(Lrx/Observer;)V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>accept</mutatedMethod><methodDescription>(Lrx/Observer;)V</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>accept</mutatedMethod><methodDescription>(Lrx/Observer;)V</methodDescription><lineNumber>157</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>accept</mutatedMethod><methodDescription>(Lrx/Observer;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>accept</mutatedMethod><methodDescription>(Lrx/Observer;)V</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>35</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>createOnCompleted</mutatedMethod><methodDescription>()Lrx/Notification;</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>createOnCompleted</mutatedMethod><methodDescription>(Ljava/lang/Class;)Lrx/Notification;</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>createOnError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Lrx/Notification;</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.NotificationTest.testOnErrorIntegerNotificationWhenNotEqual(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>createOnNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)Lrx/Notification;</methodDescription><lineNumber>37</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.NotificationTest.testOnNextIntegerNotificationDoesNotEqualNullNotification(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>192</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.NotificationTest.testOnNextIntegerNotificationsWhenEqual(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>196</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.NotificationTest.testOnErrorIntegerNotificationWhenNotEqual(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest>rx.NotificationTest.testOnNextIntegerNotificationsWhenEqual(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>205</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><killingTest>rx.NotificationTest.testOnNextIntegerNotificationsWhenEqual(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>53</index><killingTest>rx.NotificationTest.testOnErrorIntegerNotificationWhenNotEqual(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>59</index><killingTest>rx.NotificationTest.testOnNextIntegerNotificationDoesNotEqualNullNotification(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>69</index><killingTest>rx.NotificationTest.testOnErrorIntegerNotificationWhenNotEqual(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>75</index><killingTest>rx.NotificationTest.testOnErrorIntegerNotificationWhenNotEqual(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>85</index><killingTest>rx.NotificationTest.testOnNextNullNotificationDoesNotEqualIntegerNotification(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>88</index><killingTest>rx.NotificationTest.testOnNextNullNotificationDoesNotEqualIntegerNotification(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>91</index><killingTest>rx.NotificationTest.testOnNextNullNotificationDoesNotEqualIntegerNotification(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>221</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>101</index><killingTest>rx.NotificationTest.testOnErrorNullNotificationDoesNotEqualIntegerNotification(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>221</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>104</index><killingTest>rx.NotificationTest.testOnErrorIntegerNotificationsWhenEqual(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>221</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>107</index><killingTest>rx.NotificationTest.testOnErrorNullNotificationDoesNotEqualIntegerNotification(rx.NotificationTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>18</index><killingTest>rx.observers.TestObserverTest.testGetEvents(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>201</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>47</index><killingTest>rx.util.AssertObservableTest.testFailNotNull(rx.util.AssertObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>63</index><killingTest>rx.NotificationTest.testOnNextIntegerNotificationDoesNotEqualNullNotification(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>79</index><killingTest>rx.NotificationTest.testOnErrorIntegerNotificationWhenNotEqual(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>218</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>95</index><killingTest>rx.NotificationTest.testOnNextNullNotificationDoesNotEqualIntegerNotification(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>222</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>111</index><killingTest>rx.NotificationTest.testOnErrorNullNotificationDoesNotEqualIntegerNotification(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>116</index><killingTest>rx.NotificationTest.testOnNextIntegerNotificationsWhenEqual(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>getKind</mutatedMethod><methodDescription>()Lrx/Notification$Kind;</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.NotificationTest.testOnErrorIntegerNotificationWhenNotEqual(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>getThrowable</mutatedMethod><methodDescription>()Ljava/lang/Throwable;</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.NotificationTest.testOnErrorIntegerNotificationWhenNotEqual(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.NotificationTest.testOnNextIntegerNotificationDoesNotEqualNullNotification(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>hasThrowable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.NotificationTest.testOnErrorIntegerNotificationWhenNotEqual(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>hasThrowable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.NotificationTest.testOnErrorIntegerNotificationWhenNotEqual(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>hasThrowable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><killingTest>rx.NotificationTest.testOnErrorIntegerNotificationWhenNotEqual(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>hasValue</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.NotificationTest.testOnNextIntegerNotificationDoesNotEqualNullNotification(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>hasValue</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.NotificationTest.testOnNextNullNotificationDoesNotEqualIntegerNotification(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>hasValue</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><killingTest>rx.NotificationTest.testOnErrorIntegerNotificationWhenNotEqual(rx.NotificationTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>184</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>184</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>36</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupsWithNestedSubscribeOn(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest>rx.internal.operators.OperatorDelayTest.testDelayEmitsEverything(rx.internal.operators.OperatorDelayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>187</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>42</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>isOnCompleted</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testRangeWithOverflow5(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>isOnCompleted</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testRangeWithOverflow5(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>isOnError</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.NotificationTest.testOnErrorIntegerNotificationWhenNotEqual(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>isOnError</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.NotificationTest.testOnErrorIntegerNotificationWhenNotEqual(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>isOnNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.NotificationTest.testOnNextIntegerNotificationDoesNotEqualNullNotification(rx.NotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>isOnNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.NotificationTest.testOnNextIntegerNotificationDoesNotEqualNullNotification(rx.NotificationTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><killingTest>rx.internal.operators.OperatorDelayTest.testDelayEmitsEverything(rx.internal.operators.OperatorDelayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Notification.java</sourceFile><mutatedClass>rx.Notification</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>57</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Scheduler;Lrx/Subscriber;Z)V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>218</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>164</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>125</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testErrorDelayed(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>131</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>137</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>191</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>70</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>84</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testRequestOverflow(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>101</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>203</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>109</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>148</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>150</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>172</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>224</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>186</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>120</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testQueueFullEmitsError(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>191</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>235</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>236</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testErrorDelayed(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>237</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testErrorDelayed(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>240</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testErrorDelayed(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>251</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>80</index><killingTest>rx.observables.BlockingObservableTest.testRunIOException(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>117</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testRequestOverflow(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>232</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>258</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>112</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>266</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>144</index><killingTest>rx.internal.operators.OperatorRetryTest.testRetryWithBackpressure(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>149</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>241</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>41</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testErrorDelayed(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>243</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>47</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>53</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>246</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>64</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>84</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>254</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>89</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>94</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>105</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>262</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>121</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>264</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>126</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Ljava/util/Queue;)Z</methodDescription><lineNumber>264</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>137</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>init</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>init</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>init</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.internal.operators.OperatorTakeTest.testTakeObserveOn(rx.internal.operators.OperatorTakeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testQueueFullEmitsError(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testQueueFullEmitsError(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testQueueFullEmitsError(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testBackpressureWithTakeAfterAndMultipleBatches(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testErrorDelayed(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>440</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorGroupByTest.testBackpressureInnerDoesntOverflowOuter(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>441</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>442</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest>rx.internal.operators.OperatorGroupByTest.testOneGroupInnerRequestsTwiceBuffer(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>443</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupByShouldPropagateError(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>444</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupedObservableCollection(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>446</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest>rx.internal.operators.OperatorGroupByTest.testExceptionIfSubscribeToChildMoreThanOnce(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Z)Z</methodDescription><lineNumber>529</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupByShouldPropagateError(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Z)Z</methodDescription><lineNumber>535</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupByShouldPropagateError(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Z)Z</methodDescription><lineNumber>536</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Z)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Z)Z</methodDescription><lineNumber>539</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Z)Z</methodDescription><lineNumber>548</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>69</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupByShouldPropagateError(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Z)Z</methodDescription><lineNumber>553</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>88</index><killingTest>rx.internal.operators.OperatorGroupByTest.testSkippedGroup(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Z)Z</methodDescription><lineNumber>532</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Z)Z</methodDescription><lineNumber>544</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>59</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Z)Z</methodDescription><lineNumber>551</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>83</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Z)Z</methodDescription><lineNumber>555</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>96</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Z)Z</methodDescription><lineNumber>560</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>101</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupByShouldPropagateError(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Z)Z</methodDescription><lineNumber>530</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Z)Z</methodDescription><lineNumber>531</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Z)Z</methodDescription><lineNumber>540</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>48</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Z)Z</methodDescription><lineNumber>542</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>54</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Z)Z</methodDescription><lineNumber>549</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>74</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Z)Z</methodDescription><lineNumber>550</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>79</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupByShouldPropagateError(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;Z)Z</methodDescription><lineNumber>554</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>92</index><killingTest>rx.internal.operators.OperatorGroupByTest.testSkippedGroup(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>514</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>173</index><killingTest>rx.internal.operators.OperatorGroupByTest.testBackpressureInnerDoesntOverflowOuter(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>518</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>180</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>506</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>137</index><killingTest>rx.internal.operators.OperatorGroupByTest.testgroupByBackpressure(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>507</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>143</index><killingTest>rx.internal.operators.OperatorGroupByTest.testBackpressureInnerDoesntOverflowOuter(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>472</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorGroupByTest.testUnsubscribeViaTakeOnGroupThenMergeAndTake(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>482</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><killingTest>rx.internal.operators.OperatorGroupByTest.testBackpressureInnerDoesntOverflowOuter(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>483</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>48</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupByShouldPropagateError(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>488</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>63</index><killingTest>rx.internal.operators.OperatorGroupByTest.testgroupByBackpressure(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>491</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>82</index><killingTest>rx.internal.operators.OperatorGroupByTest.testOneGroupInnerRequestsTwiceBuffer(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>494</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>96</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>496</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>113</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupByShouldPropagateError(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>500</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>121</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>510</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>154</index><killingTest>rx.internal.operators.OperatorGroupByTest.testgroupByBackpressure(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>511</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>158</index><killingTest>rx.internal.operators.OperatorGroupByTest.testgroupByBackpressure(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>519</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>186</index><killingTest>rx.internal.operators.OperatorGroupByTest.testCompletionIfInnerNotSubscribed(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>522</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>194</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>504</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>132</index><killingTest>rx.internal.operators.OperatorGroupByTest.testOneGroupInnerRequestsTwiceBuffer(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>514</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>174</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>426</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>426</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>onComplete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>468</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorGroupByTest.testSkippedGroup(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>463</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupByShouldPropagateError(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>451</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorGroupByTest.testBackpressureInnerDoesntOverflowOuter(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>457</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>415</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorGroupByTest.testOneGroupInnerRequestsTwiceBuffer(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>415</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorGroupByTest.testBackpressureInnerDoesntOverflowOuter(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>418</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest>rx.internal.operators.OperatorGroupByTest.testOneGroupInnerRequestsTwiceBuffer(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>420</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest>rx.internal.operators.OperatorGroupByTest.testOneGroupInnerRequestsTwiceBuffer(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>431</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorGroupByTest.testUnsubscribeViaTakeOnGroupThenMergeAndTake(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>432</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$State</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>433</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>cleanup</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>412</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnsubscribesFromAllNonTerminatedObservables(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>cleanup</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>414</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnUnsubscribeHasCorrectState(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>cleanup</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>416</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>handleThrownError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>547</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observables.AsyncOnSubscribeTest.testThrowException(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>handleThrownError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>548</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>handleThrownError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>551</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.observables.AsyncOnSubscribeTest.testThrowException(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>handleThrownError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>552</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>404</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>404</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>558</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>562</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>567</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnErrorOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>571</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnErrorOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Observable;)V</methodDescription><lineNumber>576</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Observable;)V</methodDescription><lineNumber>580</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Observable;)V</methodDescription><lineNumber>582</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>425</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>422</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>425</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>430</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>46</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>432</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>55</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>446</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>113</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>450</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>123</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>457</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>142</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>464</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>184</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>465</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>195</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>444</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>109</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>requestRemaining</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>481</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>requestRemaining</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>478</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>requestRemaining</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>481</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>requestRemaining</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>485</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>requestRemaining</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>487</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>requestRemaining</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>498</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>103</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>requestRemaining</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>505</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>122</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>requestRemaining</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>512</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>164</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>requestRemaining</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>513</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>175</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>setConcatProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>396</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>subscribeBufferToObservable</mutatedMethod><methodDescription>(Lrx/Observable;)V</methodDescription><lineNumber>609</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnsubscribesFromAllNonTerminatedObservables(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>subscribeBufferToObservable</mutatedMethod><methodDescription>(Lrx/Observable;)V</methodDescription><lineNumber>618</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>42</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(J)Z</methodDescription><lineNumber>521</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(J)Z</methodDescription><lineNumber>531</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(J)Z</methodDescription><lineNumber>531</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(J)Z</methodDescription><lineNumber>535</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>53</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(J)Z</methodDescription><lineNumber>523</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(J)Z</methodDescription><lineNumber>533</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>47</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(J)Z</methodDescription><lineNumber>537</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>66</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(J)Z</methodDescription><lineNumber>541</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>83</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(J)Z</methodDescription><lineNumber>543</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>88</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(J)Z</methodDescription><lineNumber>522</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(J)Z</methodDescription><lineNumber>529</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(J)Z</methodDescription><lineNumber>532</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>42</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnUnsubscribeHasCorrectState(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(J)Z</methodDescription><lineNumber>536</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>61</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>(J)Z</methodDescription><lineNumber>540</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>79</index><killingTest>rx.observables.AsyncOnSubscribeTest.testThrowException(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>382</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>384</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>391</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>65</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Observer;J)V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.observers.TestSubscriberTest.testNoError(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>399</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>24</index><killingTest>rx.observers.TestSubscriberTest.testDelegate2(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>396</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.observers.TestSubscriberTest.testNotCompleted(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>399</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest>rx.observers.TestSubscriberTest.testDelegate2(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertError</mutatedMethod><methodDescription>(Ljava/lang/Class;)V</methodDescription><lineNumber>433</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>25</index><killingTest>rx.observables.SyncOnSubscribeTest.testStateThrows(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertError</mutatedMethod><methodDescription>(Ljava/lang/Class;)V</methodDescription><lineNumber>430</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.observers.TestSubscriberTest.testNoError(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertError</mutatedMethod><methodDescription>(Ljava/lang/Class;)V</methodDescription><lineNumber>433</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.observers.TestSubscriberTest.testMultipleErrors2(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertError</mutatedMethod><methodDescription>(Ljava/lang/Class;)V</methodDescription><lineNumber>438</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>62</index><killingTest>rx.observers.TestSubscriberTest.testDifferentError3(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>458</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>25</index><killingTest>rx.observers.TestSubscriberTest.testAssertError(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>455</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.observers.TestSubscriberTest.testNoError2(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>458</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.observers.TestSubscriberTest.testMultipleErrors3(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>463</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>62</index><killingTest>rx.observers.TestSubscriberTest.testDifferentError(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertNoErrors</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>10</index><killingTest>rx.internal.producers.ProducersTest.testSingleNoBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertNoErrors</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.observers.TestSubscriberTest.testMultipleErrors(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertNoErrors</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>310</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest>rx.observers.TestSubscriberTest.testMultipleErrors(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertNoTerminalEvent</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>479</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>18</index><killingTest>rx.internal.operators.OnSubscribeCompletableTest.testNeverObservable(rx.internal.operators.OnSubscribeCompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertNoTerminalEvent</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>479</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>20</index><killingTest>rx.internal.operators.OnSubscribeCompletableTest.testNeverObservable(rx.internal.operators.OnSubscribeCompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertNoTerminalEvent</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>479</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><killingTest>rx.observers.TestSubscriberTest.testNoTerminalEventBut2Errors(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertNoTerminalEvent</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>479</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.internal.operators.OnSubscribeCompletableTest.testNeverObservable(rx.internal.operators.OnSubscribeCompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertNoTerminalEvent</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>480</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest>rx.observers.TestSubscriberTest.testNoTerminalEventBut2Errors(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertNoTerminalEvent</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>483</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>54</index><killingTest>rx.observers.TestSubscriberTest.testNoTerminalEventBut2Errors(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertNoValues</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>503</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>11</index><killingTest>rx.internal.operators.OnSubscribeCompletableTest.testNeverObservable(rx.internal.operators.OnSubscribeCompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertNoValues</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>503</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OnSubscribeCompletableTest.testNeverObservable(rx.internal.operators.OnSubscribeCompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertNotCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>415</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>25</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertNotCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>412</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.observers.TestSubscriberTest.testCompleted(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertNotCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>415</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.observers.TestSubscriberTest.testMultipleCompletions2(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertReceivedOnNext</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>275</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.observers.TestSubscriberTest.testAssertNotMatchCount(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertTerminalEvent</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>285</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.observers.TestSubscriberTest.testAssertTerminalEventNotReceived(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertUnsubscribed</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>295</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observers.TestSubscriberTest.testUnsubscribed(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>541</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertValueCount</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>517</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OnSubscribeFromArrayTest.simple(rx.internal.operators.OnSubscribeFromArrayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>assertValues</mutatedMethod><methodDescription>([Ljava/lang/Object;)V</methodDescription><lineNumber>530</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>awaitTerminalEvent</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>329</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.observers.TestSubscriberTest.testInterruptTerminalEventAwait(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>awaitTerminalEventAndUnsubscribeOnTimeout</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)V</methodDescription><lineNumber>368</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.observers.TestSubscriberTest.testAwaitTerminalEventWithDurationAndUnsubscribeOnTimeout(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>awaitTerminalEventAndUnsubscribeOnTimeout</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)V</methodDescription><lineNumber>370</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest>rx.observers.TestSubscriberTest.testAwaitTerminalEventWithDurationAndUnsubscribeOnTimeout(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>awaitTerminalEventAndUnsubscribeOnTimeout</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)V</methodDescription><lineNumber>373</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest>rx.observers.TestSubscriberTest.testInterruptTerminalEventAwaitAndUnsubscribe(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>()Lrx/observers/TestSubscriber;</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.observers.TestSubscriberTest.testDelegate2(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(J)Lrx/observers/TestSubscriber;</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeFromArrayTest.backpressure(rx.internal.operators.OnSubscribeFromArrayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/Observer;)Lrx/observers/TestSubscriber;</methodDescription><lineNumber>166</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.observers.TestSubscriberTest.testDelegate1(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/Observer;J)Lrx/observers/TestSubscriber;</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.observers.TestSubscriberTest.testDelegate3(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/observers/TestSubscriber;</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.observers.TestSubscriberTest.testDelegate2(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>getLastSeenThread</mutatedMethod><methodDescription>()Ljava/lang/Thread;</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorSubscribeOnTest.testBackpressureReschedulesCorrectly(rx.internal.operators.OperatorSubscribeOnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>getOnCompletedEvents</mutatedMethod><methodDescription>()Ljava/util/List;</methodDescription><lineNumber>198</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.producers.ProducersTest.testSingleDelayedNoBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>getOnErrorEvents</mutatedMethod><methodDescription>()Ljava/util/List;</methodDescription><lineNumber>227</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.observers.TestSubscriberTest.testMultipleErrors(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>getOnNextEvents</mutatedMethod><methodDescription>()Ljava/util/List;</methodDescription><lineNumber>263</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.observers.TestSubscriberTest.testAssert(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.observers.TestSubscriberTest.testCompleted(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>187</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest>rx.internal.util.RxRingBufferWithoutUnsafeTest.testPollingTerminalState(rx.internal.util.RxRingBufferWithoutUnsafeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>187</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest>rx.observers.TestSubscriberTest.testOnCompletedCrashCountsDownLatch(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.observers.TestSubscriberTest.testMultipleErrors(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest>rx.internal.util.ScalarSynchronousObservableTest.asyncObserverNextThrows(rx.internal.util.ScalarSynchronousObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest>rx.observers.TestSubscriberTest.testOnErrorCrashCountsDownLatch(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>244</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.observers.TestSubscriberTest.testAssertNotMatchCount(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorAllTest.testBackpressureIfNoneRequestedNoneShouldBeDelivered(rx.internal.operators.OperatorAllTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.observers.TestSubscriberTest.testAssertNotMatchCount(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorAllTest.testBackpressureIfNoneRequestedNoneShouldBeDelivered(rx.internal.operators.OperatorAllTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubscriber.java</sourceFile><mutatedClass>rx.observers.TestSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>254</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>blockForSingle</mutatedMethod><methodDescription>(Lrx/Observable;)Ljava/lang/Object;</methodDescription><lineNumber>452</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>41</index><killingTest>rx.observables.BlockingObservableTest.testSingleDefault(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>blockForSingle</mutatedMethod><methodDescription>(Lrx/Observable;)Ljava/lang/Object;</methodDescription><lineNumber>453</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>47</index><killingTest>rx.observables.BlockingObservableTest.testFirstWithEmpty(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>blockForSingle</mutatedMethod><methodDescription>(Lrx/Observable;)Ljava/lang/Object;</methodDescription><lineNumber>460</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>69</index><killingTest>rx.observables.BlockingObservableTest.testSingleDefault(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>blockForSingle</mutatedMethod><methodDescription>(Lrx/Observable;)Ljava/lang/Object;</methodDescription><lineNumber>450</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>36</index><killingTest>rx.observables.BlockingObservableTest.testUnsubscribeFromSingleWhenInterrupted(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>first</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.observables.BlockingObservableTest.testFirst(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>first</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Ljava/lang/Object;</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.observables.BlockingObservableTest.testFirstWithPredicate(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>firstOrDefault</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.observables.BlockingObservableTest.testFirstOrDefaultWithEmpty(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>firstOrDefault</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/functions/Func1;)Ljava/lang/Object;</methodDescription><lineNumber>205</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.observables.BlockingObservableTest.testFirstOrDefaultWithPredicate(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><killingTest>rx.observables.BlockingObservableTest.testNoInterruptedExceptionWhenInterruptedWhileForEachOnSynchronousObservable(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><killingTest>rx.CompletableTest.toObservableError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>forEach</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest>rx.observables.BlockingObservableTest.testUnsubscribeFromForEachWhenInterrupted(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/observables/BlockingObservable;</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.observables.BlockingObservableTest.testUnsubscribeFromForEachWhenInterrupted(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>getIterator</mutatedMethod><methodDescription>()Ljava/util/Iterator;</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.observables.BlockingObservableTest.testUnsubscribeFromGetIteratorWhenInterrupted(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>last</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.observables.BlockingObservableTest.testLast(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>last</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Ljava/lang/Object;</methodDescription><lineNumber>237</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.observables.BlockingObservableTest.testLastWithPredicate(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>lastOrDefault</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>253</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.observables.BlockingObservableTest.testLastOrDefault2(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>lastOrDefault</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/functions/Func1;)Ljava/lang/Object;</methodDescription><lineNumber>271</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.observables.BlockingObservableTest.testLastOrDefaultWrongPredicate(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>latest</mutatedMethod><methodDescription>()Ljava/lang/Iterable;</methodDescription><lineNumber>319</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.observables.BlockingObservableTest.testUnsubscribeFromLatestWhenInterrupted(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>mostRecent</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Iterable;</methodDescription><lineNumber>288</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.BlockingOperatorMostRecentTest.testMostRecentNull(rx.internal.operators.BlockingOperatorMostRecentTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Iterable;</methodDescription><lineNumber>302</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.observables.BlockingObservableTest.testUnsubscribeFromNextWhenInterrupted(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>single</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>332</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.observables.BlockingObservableTest.testSingle(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>single</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Ljava/lang/Object;</methodDescription><lineNumber>347</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.observables.BlockingObservableTest.testSingleWithPredicateDefault(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>singleOrDefault</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>364</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.observables.BlockingObservableTest.testSingleDefault(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>singleOrDefault</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/functions/Func1;)Ljava/lang/Object;</methodDescription><lineNumber>383</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.observables.BlockingObservableTest.testSingleDefaultPredicateMatchesNothing(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>489</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><killingTest>rx.observables.BlockingObservableTest.testRun(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>490</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>48</index><killingTest>rx.observables.BlockingObservableTest.testRunIOException(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>487</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest>rx.observables.BlockingObservableTest.testRunIOException(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Observer;)V</methodDescription><lineNumber>525</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest>rx.observables.BlockingObservableTest.testSubscribeCallback1(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Observer;)V</methodDescription><lineNumber>528</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><killingTest>rx.observables.BlockingObservableTest.testSubscribeCallback3(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Observer;)V</methodDescription><lineNumber>536</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>49</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Observer;)V</methodDescription><lineNumber>533</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>62</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Observer;)V</methodDescription><lineNumber>534</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>67</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Observer;)V</methodDescription><lineNumber>536</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>71</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Observer;)V</methodDescription><lineNumber>536</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>81</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>599</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>57</index><killingTest>rx.observables.BlockingObservableTest.testSubscriberBackpressure(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>603</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>70</index><killingTest>rx.observables.BlockingObservableTest.testSubscriberBackpressure(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>606</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>81</index><killingTest>rx.observables.BlockingObservableTest.testSubscriberBackpressure(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>606</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>84</index><killingTest>rx.observables.BlockingObservableTest.testSubscriberBackpressure(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>609</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>93</index><killingTest>rx.observables.BlockingObservableTest.testSubscriberBackpressure(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>612</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>104</index><killingTest>rx.observables.BlockingObservableTest.testSubscriberBackpressure(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>615</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>120</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>587</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>588</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>44</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>610</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>97</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>613</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>111</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>623</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>124</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>623</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>134</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>620</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>145</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>621</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>150</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>623</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>154</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>623</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>164</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>639</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.observables.BlockingObservableTest.testSubscribeCallback1(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;)V</methodDescription><lineNumber>654</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.observables.BlockingObservableTest.testSubscribeCallback2(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>subscribe</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)V</methodDescription><lineNumber>665</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.observables.BlockingObservableTest.testSubscribeCallback1(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>toFuture</mutatedMethod><methodDescription>()Ljava/util/concurrent/Future;</methodDescription><lineNumber>401</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.BlockingOperatorToFutureTest.testGetWithASingleNullItem(rx.internal.operators.BlockingOperatorToFutureTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable</mutatedClass><mutatedMethod>toIterable</mutatedMethod><methodDescription>()Ljava/lang/Iterable;</methodDescription><lineNumber>413</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.observables.BlockingObservableTest.testToIterableNextOnlyTwice(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Subscriber;Lrx/functions/Func0;)V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>37</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testChildUnsubscribed(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>268</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testInnerBackpressure(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>269</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testInnerBackpressure(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>271</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testBoundaryUnsubscribedOnMainCompletion(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>createNewWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>createNewWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>createNewWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>57</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testChildUnsubscribed(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testChildUnsubscribed(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowNoDuplication(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowNoDuplication(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>55</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowNoDuplication(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>45</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>59</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>72</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowNoDuplication(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>emitValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowNoDuplication(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>emitValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowNoDuplication(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>279</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>280</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>282</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>283</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>35</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>203</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testBoundaryUnsubscribedOnMainCompletion(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>204</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testObservableBasedCloser(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>75</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>87</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>95</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testBoundaryUnsubscribedOnMainCompletion(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>196</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>57</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowNoDuplication(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowNoDuplication(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>87</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowNoDuplication(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>118</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowNoDuplication(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>135</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>186</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowNoDuplication(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>190</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>226</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>83</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowNoDuplication(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>96</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowNoDuplication(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>replaceSubject</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testChildUnsubscribed(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>replaceSubject</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>157</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testObservableBasedCloser(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>replaceSubject</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testChildUnsubscribed(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>replaceSubject</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>25</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testChildUnsubscribed(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>replaceWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testChildUnsubscribed(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>replaceWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>226</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>replaceWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>241</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>87</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testChildUnsubscribed(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>replaceWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>117</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>replaceWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>134</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>replaceWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>254</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>185</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>replaceWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>189</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>replaceWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>225</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>replaceWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>240</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>83</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber</mutatedClass><mutatedMethod>replaceWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>243</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>95</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testChildUnsubscribed(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>caughtUp</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Z</methodDescription><lineNumber>426</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.subjects.ReplaySubjectConcurrencyTest.testReplaySubjectConcurrentSubscriptions(rx.subjects.ReplaySubjectConcurrencyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>caughtUp</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Z</methodDescription><lineNumber>427</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.subjects.ReplaySubjectConcurrencyTest.testReplaySubjectEmissionSubscriptionRace(rx.subjects.ReplaySubjectConcurrencyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>caughtUp</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Z</methodDescription><lineNumber>431</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>27</index><killingTest>rx.subjects.ReplaySubjectTest.testCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>caughtUp</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Z</methodDescription><lineNumber>434</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>32</index><killingTest>rx.subjects.ReplaySubjectTest.testCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>caughtUp</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Z</methodDescription><lineNumber>429</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>()Lrx/subjects/ReplaySubject;</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.subjects.ReplaySubjectTest.testCurrentStateMethodsEmpty(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(I)Lrx/subjects/ReplaySubject;</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>46</index><killingTest>rx.subjects.ReplaySubjectTest.testCurrentStateMethodsEmpty(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>createUnbounded</mutatedMethod><methodDescription>()Lrx/subjects/ReplaySubject;</methodDescription><lineNumber>177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueEffectivelyUnboundedEmptyCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>createWithSize</mutatedMethod><methodDescription>(I)Lrx/subjects/ReplaySubject;</methodDescription><lineNumber>205</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBoundedEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>createWithState</mutatedMethod><methodDescription>(Lrx/subjects/ReplaySubject$BoundedState;Lrx/functions/Action1;)Lrx/subjects/ReplaySubject;</methodDescription><lineNumber>355</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>36</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBoundedEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>createWithTime</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/subjects/ReplaySubject;</methodDescription><lineNumber>245</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>30</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueTimeBounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>createWithTimeAndSize</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;ILrx/Scheduler;)Lrx/subjects/ReplaySubject;</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>37</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>getThrowable</mutatedMethod><methodDescription>()Ljava/lang/Throwable;</methodDescription><lineNumber>1125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><killingTest>rx.subjects.ReplaySubjectTest.testCurrentStateMethodsEmpty(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>getThrowable</mutatedMethod><methodDescription>()Ljava/lang/Throwable;</methodDescription><lineNumber>1126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>24</index><killingTest>rx.subjects.ReplaySubjectTest.testCurrentStateMethodsError(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>getThrowable</mutatedMethod><methodDescription>()Ljava/lang/Throwable;</methodDescription><lineNumber>1128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>29</index><killingTest>rx.subjects.ReplaySubjectTest.testCurrentStateMethodsEmpty(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>1182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBoundedEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>getValues</mutatedMethod><methodDescription>()[Ljava/lang/Object;</methodDescription><lineNumber>1174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.subjects.ReplaySubjectTest.testGetValues(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>getValues</mutatedMethod><methodDescription>()[Ljava/lang/Object;</methodDescription><lineNumber>1175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBoundedEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>getValues</mutatedMethod><methodDescription>()[Ljava/lang/Object;</methodDescription><lineNumber>1177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest>rx.subjects.ReplaySubjectTest.testGetValues(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>getValues</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>1157</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBoundedEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>hasAnyValue</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBoundedEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>hasAnyValue</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBoundedEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>hasCompleted</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.subjects.ReplaySubjectTest.testCurrentStateMethodsEmpty(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>hasCompleted</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.subjects.ReplaySubjectTest.testCurrentStateMethodsEmpty(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>hasCompleted</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>28</index><killingTest>rx.subjects.ReplaySubjectTest.testCurrentStateMethodsEmpty(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>hasObservers</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>422</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>7</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBoundedEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>hasObservers</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>422</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBoundedEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>hasObservers</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>422</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBoundedEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>hasThrowable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>18</index><killingTest>rx.subjects.ReplaySubjectTest.testCurrentStateMethodsEmpty(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>hasValue</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBoundedEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>406</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>31</index><killingTest>rx.subjects.ReplaySubjectTest.testCurrentStateMethodsEmpty(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>406</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>49</index><killingTest>rx.subjects.ReplaySubjectTest.testCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>404</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.subjects.ReplaySubjectTest.testCurrentStateMethodsEmpty(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>406</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest>rx.subjects.ReplaySubjectTest.testCurrentStateMethodsEmpty(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>407</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>41</index><killingTest>rx.subjects.ReplaySubjectTest.testCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>405</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.subjects.ReplaySubjectTest.testTerminateOnce(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>408</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>45</index><killingTest>rx.subjects.ReplaySubjectTest.testCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>37</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueUnboundedEmptyError(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>81</index><killingTest>rx.subjects.ReplaySubjectTest.testOnErrorThrowsDoesntPreventDelivery(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>382</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.subjects.ReplaySubjectTest.testCurrentStateMethodsError(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>385</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueUnboundedEmptyError(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>387</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>47</index><killingTest>rx.subjects.ReplaySubjectTest.testError(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>391</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>64</index><killingTest>rx.subjects.ReplaySubjectTest.testOnErrorThrowsDoesntPreventDelivery(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>383</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest>rx.subjects.ReplaySubjectTest.testCompletedAfterError(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>388</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>52</index><killingTest>rx.subjects.ReplaySubjectTest.testError(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>398</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>87</index><killingTest>rx.subjects.ReplaySubjectTest.testOnErrorThrowsDoesntPreventDelivery(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>372</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>30</index><killingTest>rx.subjects.ReplaySubjectTest.testCurrentStateMethodsNormal(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>372</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>49</index><killingTest>rx.subjects.ReplaySubjectTest.testCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>370</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueUnboundedError(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>372</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest>rx.subjects.ReplaySubjectTest.testCurrentStateMethodsNormal(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>373</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>40</index><killingTest>rx.subjects.ReplaySubjectTest.testCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>371</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueUnboundedError(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>374</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>45</index><killingTest>rx.subjects.ReplaySubjectTest.testCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueUnboundedEmptyCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject</mutatedClass><mutatedMethod>subscriberCount</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>417</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.subjects.ReplaySubjectTest.testSubscriptionLeak(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>898</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest>rx.internal.operators.OperatorReplayTest.testBoundedReplayBuffer(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>addLast</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$Node;)V</methodDescription><lineNumber>908</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>18</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>addLast</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$Node;)V</methodDescription><lineNumber>906</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorReplayTest.testBoundedReplayBuffer(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>collect</mutatedMethod><methodDescription>(Ljava/util/Collection;)V</methodDescription><lineNumber>1083</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorReplayTest.testBoundedReplayBuffer(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>collect</mutatedMethod><methodDescription>(Ljava/util/Collection;)V</methodDescription><lineNumber>1086</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><killingTest>rx.internal.operators.OperatorReplayTest.testBoundedReplayBuffer(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>collect</mutatedMethod><methodDescription>(Ljava/util/Collection;)V</methodDescription><lineNumber>1086</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>40</index><killingTest>rx.internal.operators.OperatorReplayTest.testBoundedReplayBuffer(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>961</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>962</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>963</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>enterTransform</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>1054</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressureBounded(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>953</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>954</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest>rx.internal.operators.OperatorReplayTest.testBufferedReplayError(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>955</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>hasCompleted</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>hasCompleted</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>hasCompleted</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>hasError</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1097</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>hasError</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1097</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>hasError</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1097</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>leaveTransform</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>1063</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorReplayTest.testBoundedReplayBuffer(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>945</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorReplayTest.testSubscribersComeAndGoAtRequestBoundaries2(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>946</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>947</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>removeFirst</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>919</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>removeFirst</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>916</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorReplayTest.testBoundedReplayBuffer(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>removeFirst</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>922</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>37</index><killingTest>rx.internal.operators.OperatorReplayTest.testBoundedReplayBuffer(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>removeSome</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>926</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorReplayTest.testBoundedReplayBuffer(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>removeSome</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>928</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>20</index><killingTest>rx.internal.operators.OperatorReplayTest.testBoundedReplayBuffer(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>removeSome</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>929</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>removeSome</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>926</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorReplayTest.testBoundedReplayBuffer(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>removeSome</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>932</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>35</index><killingTest>rx.internal.operators.OperatorReplayTest.testBoundedReplayBuffer(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>1018</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>206</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressureBounded(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>1019</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>212</index><killingTest>rx.internal.operators.OperatorReplayTest.testSubscribersComeAndGoAtRequestBoundaries2(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>969</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressureBounded(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>976</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>48</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressureBounded(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>981</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>63</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressureBounded(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>985</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>85</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressureBounded(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>996</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>108</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressureBounded(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>1000</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>118</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressureBounded(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>1002</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>128</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressureBounded(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>1005</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>144</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressureBounded(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>1013</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>180</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>1013</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>185</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>1024</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>222</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressureBounded(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>1029</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>236</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressureBounded(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>1031</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>245</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressureBounded(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>1037</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>263</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>993</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>102</index><killingTest>rx.internal.operators.OperatorReplayTest.testSubscribersComeAndGoAtRequestBoundaries(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>1011</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>169</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>1012</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>173</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>1014</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>196</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$BoundedReplayBuffer</mutatedClass><mutatedMethod>setFirst</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$Node;)V</methodDescription><lineNumber>939</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorReplayTest.testBoundedReplayBuffer(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableNormal1(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>251</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableNormal1(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>253</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableNormal1(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>254</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableBoundaryThrows(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>55</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>45</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>59</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>72</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>emitValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>163</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableBoundaryThrows(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>emitValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableBoundaryThrows(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>261</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableBoundaryThrows(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>262</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableBoundaryThrows(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>264</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableBoundaryThrows(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>265</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>35</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableNormal1(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>75</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>87</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>202</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>95</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableNormal1(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableBoundaryThrows(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>57</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableBoundaryThrows(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableBoundaryThrows(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>87</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableBoundaryThrows(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>118</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>135</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>186</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>190</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>226</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>83</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>96</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableBoundaryThrows(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>replaceSubject</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableBoundaryThrows(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>replaceSubject</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableNormal1(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>replaceSubject</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableBoundaryThrows(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>replaceSubject</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>25</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableBoundaryThrows(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>replaceWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>replaceWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>replaceWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>223</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>87</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableBoundaryThrows(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>replaceWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>117</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>replaceWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>238</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>134</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>replaceWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>236</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>185</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>replaceWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>238</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>189</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>replaceWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>238</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>225</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>replaceWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>222</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>83</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber</mutatedClass><mutatedMethod>replaceWindow</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>95</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableBoundaryThrows(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>acceptTest</mutatedMethod><methodDescription>(Lrx/Observer;Lrx/subjects/ReplaySubject$NodeList$Node;J)V</methodDescription><lineNumber>639</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.subjects.ReplaySubjectTest.testReplayTimestampedDirectly(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>610</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueTimeBounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>612</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueTimeBounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>613</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueTimeBounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>620</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>622</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>624</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>head</mutatedMethod><methodDescription>()Lrx/subjects/ReplaySubject$NodeList$Node;</methodDescription><lineNumber>644</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBoundedEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>710</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBoundedEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>714</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueEffectivelyUnboundedEmptyError(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>714</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueEffectivelyUnboundedEmptyCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>711</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>18</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBoundedEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>714</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>49</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueEffectivelyUnboundedEmptyCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>latest</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>738</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBoundedEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>latest</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>742</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectBoundedError(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>latest</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>747</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>52</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectBoundedError(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>latest</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>747</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>57</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBoundedIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>latest</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>748</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>62</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectBoundedError(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>latest</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>739</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBoundedEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>latest</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>750</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>77</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>latest</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>752</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>82</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectBoundedError(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>latest</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>754</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>90</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBoundedIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>602</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.subjects.ReplaySubjectTest.testGetValuesUnbounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>603</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest>rx.subjects.ReplaySubjectTest.testGetValuesUnbounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>604</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBoundedIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>replayObserver</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Z</methodDescription><lineNumber>653</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.subjects.ReplaySubjectTest.testReplay1Directly(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>replayObserver</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Z</methodDescription><lineNumber>654</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>replayObserver</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Z</methodDescription><lineNumber>661</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>61</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>replayObserver</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Z</methodDescription><lineNumber>660</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>57</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>replayObserverFromIndex</mutatedMethod><methodDescription>(Lrx/subjects/ReplaySubject$NodeList$Node;Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/ReplaySubject$NodeList$Node;</methodDescription><lineNumber>667</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.subjects.ReplaySubjectTest.testReplay1AfterTermination(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>replayObserverFromIndex</mutatedMethod><methodDescription>(Lrx/subjects/ReplaySubject$NodeList$Node;Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/ReplaySubject$NodeList$Node;</methodDescription><lineNumber>671</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><killingTest>rx.subjects.ReplaySubjectTest.testReplay1Directly(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>replayObserverFromIndex</mutatedMethod><methodDescription>(Lrx/subjects/ReplaySubject$NodeList$Node;Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/ReplaySubject$NodeList$Node;</methodDescription><lineNumber>668</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.subjects.ReplaySubjectTest.testReplay1AfterTermination(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>replayObserverFromIndexTest</mutatedMethod><methodDescription>(Lrx/subjects/ReplaySubject$NodeList$Node;Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;J)Lrx/subjects/ReplaySubject$NodeList$Node;</methodDescription><lineNumber>676</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.subjects.ReplaySubjectTest.testReplayTimestampedDirectly(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>replayObserverFromIndexTest</mutatedMethod><methodDescription>(Lrx/subjects/ReplaySubject$NodeList$Node;Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;J)Lrx/subjects/ReplaySubject$NodeList$Node;</methodDescription><lineNumber>680</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>26</index><killingTest>rx.subjects.ReplaySubjectTest.testReplayTimestampedDirectly(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>replayObserverFromIndexTest</mutatedMethod><methodDescription>(Lrx/subjects/ReplaySubject$NodeList$Node;Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;J)Lrx/subjects/ReplaySubject$NodeList$Node;</methodDescription><lineNumber>677</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>694</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>22</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueEffectivelyUnboundedEmptyCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>701</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>66</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueEffectivelyUnboundedEmptyCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>693</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueEffectivelyUnbounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>698</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueEffectivelyUnboundedEmptyCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>700</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>50</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueEffectivelyUnboundedEmptyCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>700</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>55</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueEffectivelyUnboundedEmptyError(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>700</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>60</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueEffectivelyUnboundedEmptyCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>701</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>67</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueEffectivelyUnboundedEmptyCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>704</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>72</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueEffectivelyUnbounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>tail</mutatedMethod><methodDescription>()Lrx/subjects/ReplaySubject$NodeList$Node;</methodDescription><lineNumber>647</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectBoundedError(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>terminated</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>685</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>toArray</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>722</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBoundedEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>toArray</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>725</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest>rx.subjects.ReplaySubjectTest.testGetValuesUnbounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>toArray</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>725</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><killingTest>rx.subjects.ReplaySubjectTest.testGetValuesUnbounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>toArray</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>725</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>44</index><killingTest>rx.subjects.ReplaySubjectTest.testGetValuesUnbounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$BoundedState</mutatedClass><mutatedMethod>toArray</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>733</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>73</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBoundedEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>470</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.subjects.ReplaySubjectTest.testTerminateOnce(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>478</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.subjects.ReplaySubjectTest.testCompletedAfterError(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>539</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueUnboundedEmptyCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>539</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueUnboundedEmptyCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>latest</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>564</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>9</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>latest</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>567</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>36</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectEmpty(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>latest</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>565</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>16</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>latest</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>568</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>45</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelay(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>latest</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>564</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>latest</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>566</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>latest</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>566</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>latest</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>567</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectEmpty(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>latest</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>568</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>48</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelay(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>latest</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>570</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>53</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectEmpty(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>latest</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>572</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>61</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>latest</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>574</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>66</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>458</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueUnboundedError(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>replayObserver</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Z</methodDescription><lineNumber>495</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.subjects.ReplaySubjectTest.testOnErrorThrowsDoesntPreventDelivery(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>replayObserver</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Z</methodDescription><lineNumber>501</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>49</index><killingTest>rx.subjects.ReplaySubjectTest.testOnErrorThrowsDoesntPreventDelivery(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>replayObserver</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Z</methodDescription><lineNumber>496</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><killingTest>rx.subjects.ReplaySubjectConcurrencyTest.testReplaySubjectEmissionSubscriptionRace(rx.subjects.ReplaySubjectConcurrencyTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>replayObserver</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Z</methodDescription><lineNumber>504</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>67</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>replayObserver</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Z</methodDescription><lineNumber>503</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>63</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>replayObserverFromIndex</mutatedMethod><methodDescription>(Ljava/lang/Integer;Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Ljava/lang/Integer;</methodDescription><lineNumber>513</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>12</index><killingTest>rx.subjects.ReplaySubjectTest.testSubscriptionLeak(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>replayObserverFromIndex</mutatedMethod><methodDescription>(Ljava/lang/Integer;Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Ljava/lang/Integer;</methodDescription><lineNumber>515</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>21</index><killingTest>rx.subjects.ReplaySubjectTest.testTerminateOnce(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>replayObserverFromIndex</mutatedMethod><methodDescription>(Ljava/lang/Integer;Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Ljava/lang/Integer;</methodDescription><lineNumber>513</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.subjects.ReplaySubjectTest.testSubscriptionLeak(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>replayObserverFromIndex</mutatedMethod><methodDescription>(Ljava/lang/Integer;Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Ljava/lang/Integer;</methodDescription><lineNumber>518</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>28</index><killingTest>rx.subjects.ReplaySubjectTest.testSubscriptionLeak(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>replayObserverFromIndex</mutatedMethod><methodDescription>(Ljava/lang/Integer;Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Ljava/lang/Integer;</methodDescription><lineNumber>514</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest>rx.subjects.ReplaySubjectTest.testTerminateOnce(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>replayObserverFromIndexTest</mutatedMethod><methodDescription>(Ljava/lang/Integer;Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;J)Ljava/lang/Integer;</methodDescription><lineNumber>523</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>529</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>9</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>530</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>16</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueUnboundedEmptyCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>532</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>36</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueUnboundedEmptyCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>529</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueUnboundedEmptyCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>531</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueUnboundedEmptyCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>531</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueUnboundedEmptyError(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>532</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>37</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueUnboundedEmptyCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>535</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>42</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>terminated</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>487</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>toArray</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>545</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>toArray</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>546</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>toArray</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>549</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>35</index><killingTest>rx.subjects.ReplaySubjectTest.testGetValues(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>toArray</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>552</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>55</index><killingTest>rx.subjects.ReplaySubjectTest.testGetValues(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>toArray</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>556</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>68</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>toArray</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>549</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>47</index><killingTest>rx.subjects.ReplaySubjectTest.testGetValues(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>toArray</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>545</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.subjects.ReplaySubjectTest.testGetValues(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>toArray</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>546</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.subjects.ReplaySubjectTest.testGetValues(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>toArray</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>549</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><killingTest>rx.subjects.ReplaySubjectTest.testGetValues(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>toArray</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>552</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>55</index><killingTest>rx.subjects.ReplaySubjectTest.testGetValues(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>toArray</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>556</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>68</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$UnboundedReplayState</mutatedClass><mutatedMethod>toArray</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>559</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>79</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayEmptyIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/concurrent/ThreadFactory;)V</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/concurrent/ThreadFactory;)V</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/concurrent/ThreadFactory;)V</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>findSetRemoveOnCancelPolicyMethod</mutatedMethod><methodDescription>(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/lang/reflect/Method;</methodDescription><lineNumber>189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>18</index><killingTest>rx.internal.schedulers.NewThreadWorkerTest.tryEnableCancelPolicyShouldNotInvokeMethodOnExecutor(rx.internal.schedulers.NewThreadWorkerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>findSetRemoveOnCancelPolicyMethod</mutatedMethod><methodDescription>(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/lang/reflect/Method;</methodDescription><lineNumber>189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>53</index><killingTest>rx.internal.schedulers.NewThreadWorkerTest.tryEnableCancelPolicyShouldNotInvokeMethodOnExecutor(rx.internal.schedulers.NewThreadWorkerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>findSetRemoveOnCancelPolicyMethod</mutatedMethod><methodDescription>(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/lang/reflect/Method;</methodDescription><lineNumber>189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><killingTest>rx.internal.schedulers.NewThreadWorkerTest.findSetRemoveOnCancelPolicyMethodShouldFindMethod(rx.internal.schedulers.NewThreadWorkerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>findSetRemoveOnCancelPolicyMethod</mutatedMethod><methodDescription>(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/lang/reflect/Method;</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest>rx.internal.schedulers.NewThreadWorkerTest.findSetRemoveOnCancelPolicyMethodShouldFindMethod(rx.internal.schedulers.NewThreadWorkerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>findSetRemoveOnCancelPolicyMethod</mutatedMethod><methodDescription>(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/lang/reflect/Method;</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>40</index><killingTest>rx.internal.schedulers.NewThreadWorkerTest.findSetRemoveOnCancelPolicyMethodShouldFindMethod(rx.internal.schedulers.NewThreadWorkerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>findSetRemoveOnCancelPolicyMethod</mutatedMethod><methodDescription>(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/lang/reflect/Method;</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><killingTest>rx.internal.schedulers.NewThreadWorkerTest.findSetRemoveOnCancelPolicyMethodShouldFindMethod(rx.internal.schedulers.NewThreadWorkerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>findSetRemoveOnCancelPolicyMethod</mutatedMethod><methodDescription>(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/lang/reflect/Method;</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>49</index><killingTest>rx.internal.schedulers.NewThreadWorkerTest.findSetRemoveOnCancelPolicyMethodShouldFindMethod(rx.internal.schedulers.NewThreadWorkerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>findSetRemoveOnCancelPolicyMethod</mutatedMethod><methodDescription>(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/lang/reflect/Method;</methodDescription><lineNumber>199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>59</index><killingTest>rx.internal.schedulers.NewThreadWorkerTest.tryEnableCancelPolicyShouldNotInvokeMethodOnExecutor(rx.internal.schedulers.NewThreadWorkerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>288</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>purgeExecutors</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>purgeExecutors</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>purgeExecutors</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>purgeExecutors</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>purgeExecutors</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>49</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>purgeExecutors</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>55</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>registerExecutor</mutatedMethod><methodDescription>(Ljava/util/concurrent/ScheduledThreadPoolExecutor;)V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>registerExecutor</mutatedMethod><methodDescription>(Ljava/util/concurrent/ScheduledThreadPoolExecutor;)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.schedulers.NewThreadSchedulerTest.testNoSelfInterrupt(rx.schedulers.NewThreadSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>221</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>222</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>224</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>18</index><killingTest>rx.schedulers.NewThreadSchedulerTest.testNoSelfInterrupt(rx.schedulers.NewThreadSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>scheduleActual</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/internal/schedulers/ScheduledAction;</methodDescription><lineNumber>238</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>20</index><killingTest>rx.schedulers.NewThreadSchedulerTest.testRecursiveExecution(rx.schedulers.NewThreadSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>scheduleActual</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/internal/schedulers/ScheduledAction;</methodDescription><lineNumber>238</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.schedulers.NewThreadSchedulerTest.testRecursiveExecution(rx.schedulers.NewThreadSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>scheduleActual</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/internal/schedulers/ScheduledAction;</methodDescription><lineNumber>245</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>49</index><killingTest>rx.schedulers.NewThreadSchedulerTest.testNoSelfInterrupt(rx.schedulers.NewThreadSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>scheduleActual</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/internal/schedulers/ScheduledAction;</methodDescription><lineNumber>243</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>45</index><killingTest>rx.schedulers.CachedThreadSchedulerTest.testCancelledTaskRetention(rx.schedulers.CachedThreadSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>scheduleActual</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;Lrx/internal/util/SubscriptionList;)Lrx/internal/schedulers/ScheduledAction;</methodDescription><lineNumber>269</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>26</index><killingTest>rx.schedulers.ComputationSchedulerTests.testRecursiveExecution(rx.schedulers.ComputationSchedulerTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>scheduleActual</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;Lrx/internal/util/SubscriptionList;)Lrx/internal/schedulers/ScheduledAction;</methodDescription><lineNumber>269</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest>rx.schedulers.ComputationSchedulerTests.testRecursiveExecution(rx.schedulers.ComputationSchedulerTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>scheduleActual</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;Lrx/internal/util/SubscriptionList;)Lrx/internal/schedulers/ScheduledAction;</methodDescription><lineNumber>276</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>55</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>scheduleActual</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;Lrx/internal/util/SubscriptionList;)Lrx/internal/schedulers/ScheduledAction;</methodDescription><lineNumber>266</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>scheduleActual</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;Lrx/internal/util/SubscriptionList;)Lrx/internal/schedulers/ScheduledAction;</methodDescription><lineNumber>274</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>51</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>scheduleActual</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;Lrx/subscriptions/CompositeSubscription;)Lrx/internal/schedulers/ScheduledAction;</methodDescription><lineNumber>253</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>26</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>scheduleActual</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;Lrx/subscriptions/CompositeSubscription;)Lrx/internal/schedulers/ScheduledAction;</methodDescription><lineNumber>253</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest>rx.plugins.RxJavaPluginsTest.testOnNextValueCallsPlugin(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>scheduleActual</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;Lrx/subscriptions/CompositeSubscription;)Lrx/internal/schedulers/ScheduledAction;</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>55</index><killingTest>rx.internal.operators.OperatorSampleTest.testSampleUnsubscribe(rx.internal.operators.OperatorSampleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>scheduleActual</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;Lrx/subscriptions/CompositeSubscription;)Lrx/internal/schedulers/ScheduledAction;</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest>rx.schedulers.ComputationSchedulerTests.testUnSubscribeForScheduler(rx.schedulers.ComputationSchedulerTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>scheduleActual</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;Lrx/subscriptions/CompositeSubscription;)Lrx/internal/schedulers/ScheduledAction;</methodDescription><lineNumber>258</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>51</index><killingTest>rx.schedulers.ComputationSchedulerTests.testUnSubscribeForScheduler(rx.schedulers.ComputationSchedulerTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>tryEnableCancelPolicy</mutatedMethod><methodDescription>(Ljava/util/concurrent/ScheduledExecutorService;)Z</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.schedulers.NewThreadWorkerTest.tryEnableCancelPolicyShouldInvokeMethodOnExecutor(rx.internal.schedulers.NewThreadWorkerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>tryEnableCancelPolicy</mutatedMethod><methodDescription>(Ljava/util/concurrent/ScheduledExecutorService;)Z</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.internal.schedulers.NewThreadWorkerTest.tryEnableCancelPolicyShouldInvokeMethodOnExecutor(rx.internal.schedulers.NewThreadWorkerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>tryEnableCancelPolicy</mutatedMethod><methodDescription>(Ljava/util/concurrent/ScheduledExecutorService;)Z</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>tryEnableCancelPolicy</mutatedMethod><methodDescription>(Ljava/util/concurrent/ScheduledExecutorService;)Z</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>tryEnableCancelPolicy</mutatedMethod><methodDescription>(Ljava/util/concurrent/ScheduledExecutorService;)Z</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>40</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>tryEnableCancelPolicy</mutatedMethod><methodDescription>(Ljava/util/concurrent/ScheduledExecutorService;)Z</methodDescription><lineNumber>166</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>76</index><killingTest>rx.internal.schedulers.NewThreadWorkerTest.tryEnableCancelPolicyShouldInvokeMethodOnExecutor(rx.internal.schedulers.NewThreadWorkerTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>tryEnableCancelPolicy</mutatedMethod><methodDescription>(Ljava/util/concurrent/ScheduledExecutorService;)Z</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>tryEnableCancelPolicy</mutatedMethod><methodDescription>(Ljava/util/concurrent/ScheduledExecutorService;)Z</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>94</index><killingTest>rx.internal.schedulers.NewThreadWorkerTest.tryEnableCancelPolicyShouldInvokeMethodOnExecutor(rx.internal.schedulers.NewThreadWorkerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>tryEnableCancelPolicy</mutatedMethod><methodDescription>(Ljava/util/concurrent/ScheduledExecutorService;)Z</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>109</index><killingTest>rx.internal.schedulers.NewThreadWorkerTest.tryEnableCancelPolicyShouldNotInvokeMethodOnExecutor(rx.internal.schedulers.NewThreadWorkerTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>tryEnableCancelPolicy</mutatedMethod><methodDescription>(Ljava/util/concurrent/ScheduledExecutorService;)Z</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>104</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>283</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>99</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>127</index><killingTest>rx.internal.operators.OperatorSwitchIfEmptyTest.testSwitchRequestAlternativeObservableWithBackpressure(rx.internal.operators.OperatorSwitchIfEmptyTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>163</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>92</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>120</index><killingTest>rx.internal.operators.OperatorConcatTest.testInnerBackpressureWithAlignedBoundaries(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>87</index><killingTest>rx.observables.AsyncOnSubscribeTest.testSerializesConcurrentObservables(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>99</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>103</index><killingTest>rx.internal.operators.OperatorConcatTest.testInnerBackpressureWithAlignedBoundaries(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>127</index><killingTest>rx.internal.operators.OperatorSwitchIfEmptyTest.testSwitchRequestAlternativeObservableWithBackpressure(rx.internal.operators.OperatorSwitchIfEmptyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>149</index><killingTest>rx.internal.operators.OperatorSwitchIfEmptyTest.testSwitchRequestAlternativeObservableWithBackpressure(rx.internal.operators.OperatorSwitchIfEmptyTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>154</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>182</index><killingTest>rx.internal.operators.OperatorSwitchTest.testBackpressure(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>186</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>171</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>191</index><killingTest>rx.internal.operators.OperatorSwitchTest.testBackpressure(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>87</index><killingTest>rx.internal.operators.OperatorOnErrorResumeNextViaFunctionTest.normalBackpressure(rx.internal.operators.OperatorOnErrorResumeNextViaFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>32</index><killingTest>rx.internal.operators.OperatorConcatTest.testInnerBackpressureWithAlignedBoundaries(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>80</index><killingTest>rx.internal.producers.ProducersTest.testArbiter(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.producers.ProducersTest.testArbiter(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.internal.producers.ProducersTest.testArbiter(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>75</index><killingTest>rx.internal.producers.ProducersTest.testArbiter(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>87</index><killingTest>rx.internal.producers.ProducersTest.testArbiter(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>113</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>148</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>105</index><killingTest>rx.internal.producers.ProducersTest.testArbiter(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSwitchIfEmptyTest.testBackpressureNoRequest(rx.internal.operators.OperatorSwitchIfEmptyTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>91</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>42</index><killingTest>rx.CompletableTest.concatObservableMany(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>84</index><killingTest>rx.internal.producers.ProducersTest.testArbiter(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSwitchIfEmptyTest.testSwitchShouldTriggerUnsubscribe(rx.internal.operators.OperatorSwitchIfEmptyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>45</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.internal.producers.ProducersTest.testArbiter(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><killingTest>rx.internal.operators.OperatorOnErrorReturnTest.testFunctionThrowsError(rx.internal.operators.OperatorOnErrorReturnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>91</index><killingTest>rx.internal.producers.ProducersTest.testArbiter(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>110</index><killingTest>rx.internal.operators.OperatorSwitchIfEmptyTest.testSwitchShouldTriggerUnsubscribe(rx.internal.operators.OperatorSwitchIfEmptyTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>128</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>163</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>115</index><killingTest>rx.internal.operators.OperatorSwitchIfEmptyTest.testSwitchRequestAlternativeObservableWithBackpressure(rx.internal.operators.OperatorSwitchIfEmptyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>120</index><killingTest>rx.internal.producers.ProducersTest.testArbiter(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.producers.ProducersTest.testArbiter(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>64</index><killingTest>rx.internal.producers.ProducersTest.testArbiter(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>83</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>118</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>70</index><killingTest>rx.internal.producers.ProducersTest.testArbiter(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ProducerArbiter.java</sourceFile><mutatedClass>rx.internal.producers.ProducerArbiter</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>75</index><killingTest>rx.internal.producers.ProducersTest.testArbiter(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>()Lrx/subjects/BehaviorSubject;</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectIncompleteEmpty(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Ljava/lang/Object;)Lrx/subjects/BehaviorSubject;</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.subjects.BehaviorSubjectTest.testCurrentStateMethodsNormalSomeStart(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Ljava/lang/Object;Z)Lrx/subjects/BehaviorSubject;</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectIncompleteEmpty(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Ljava/lang/Object;Z)Lrx/subjects/BehaviorSubject;</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>40</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectIncompleteEmpty(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Ljava/lang/Object;Z)Lrx/subjects/BehaviorSubject;</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest>rx.subjects.BehaviorSubjectTest.testCurrentStateMethodsNormalSomeStart(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>getThrowable</mutatedMethod><methodDescription>()Ljava/lang/Throwable;</methodDescription><lineNumber>228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectIncompleteEmpty(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>getThrowable</mutatedMethod><methodDescription>()Ljava/lang/Throwable;</methodDescription><lineNumber>229</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest>rx.subjects.BehaviorSubjectTest.testCurrentStateMethodsError(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>getThrowable</mutatedMethod><methodDescription>()Ljava/lang/Throwable;</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectIncompleteEmpty(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.subjects.BehaviorSubjectTest.testCurrentStateMethodsEmpty(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectValueRelayIncomplete(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>218</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectIncompleteEmpty(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>getValues</mutatedMethod><methodDescription>()[Ljava/lang/Object;</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectValueRelayIncomplete(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>getValues</mutatedMethod><methodDescription>()[Ljava/lang/Object;</methodDescription><lineNumber>273</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectIncompleteEmpty(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>getValues</mutatedMethod><methodDescription>()[Ljava/lang/Object;</methodDescription><lineNumber>275</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectValueRelayIncomplete(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>getValues</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>44</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectValueRelayIncomplete(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>getValues</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>57</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectIncompleteEmpty(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>getValues</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>243</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectIncompleteEmpty(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>getValues</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>244</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectValueRelayIncomplete(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>getValues</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>44</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectValueRelayIncomplete(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>getValues</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>57</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectIncompleteEmpty(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>getValues</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>255</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>68</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectIncompleteEmpty(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>hasCompleted</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>201</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectIncompleteEmpty(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>hasObservers</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>7</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectIncompleteEmpty(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>hasObservers</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectIncompleteEmpty(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>hasObservers</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectIncompleteEmpty(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>hasThrowable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>192</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectIncompleteEmpty(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>hasValue</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectIncompleteEmpty(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>40</index><killingTest>rx.subjects.BehaviorSubjectTest.testCurrentStateMethodsEmpty(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>55</index><killingTest>rx.subjects.BehaviorSubjectTest.testStartEmpty(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.subjects.BehaviorSubjectTest.testCompletedAfterErrorIsNotSent2(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectValueRelay(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>40</index><killingTest>rx.subjects.BehaviorSubjectTest.testCurrentStateMethodsEmpty(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>52</index><killingTest>rx.subjects.BehaviorSubjectTest.testStartEmpty(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>45</index><killingTest>rx.subjects.BehaviorSubjectTest.testCurrentStateMethodsError(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>85</index><killingTest>rx.subjects.BehaviorSubjectTest.testOnErrorThrowsDoesntPreventDelivery(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.subjects.BehaviorSubjectTest.testSubscribeToErrorOnlyEmitsOnError(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><killingTest>rx.subjects.BehaviorSubjectTest.testCurrentStateMethodsError(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>68</index><killingTest>rx.subjects.BehaviorSubjectTest.testOnErrorThrowsDoesntPreventDelivery(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>57</index><killingTest>rx.subjects.BehaviorSubjectTest.testOnErrorThrowsDoesntPreventDelivery(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>91</index><killingTest>rx.subjects.BehaviorSubjectTest.testOnErrorThrowsDoesntPreventDelivery(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>41</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectValueRelay(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>56</index><killingTest>rx.subjects.BehaviorSubjectTest.testThatObserverReceivesDefaultValueAndSubsequentEvents(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>157</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.subjects.BehaviorSubjectTest.testStartEmptyCompleteWithOne(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>157</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.subjects.BehaviorSubjectTest.testCurrentStateMethodsNormalSomeStart(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>41</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectValueRelay(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>53</index><killingTest>rx.subjects.BehaviorSubjectTest.testThatObserverReceivesDefaultValueAndSubsequentEvents(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject</mutatedClass><mutatedMethod>subscriberCount</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>166</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.subjects.BehaviorSubjectTest.testTakeOneSubscriber(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>doUnsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>377</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.observables.SyncOnSubscribeTest.testStateAfterTerminal(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>doUnsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>379</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>doUnsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>380</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>fastpath</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>407</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><killingTest>rx.observables.SyncOnSubscribeTest.testGenericsCreateStatelessWithUnsub(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>fastpath</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>402</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>fastpath</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>404</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest>rx.observables.SyncOnSubscribeTest.testThrows(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>handleThrownError</mutatedMethod><methodDescription>(Lrx/Subscriber;Ljava/lang/Throwable;)V</methodDescription><lineNumber>414</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observables.SyncOnSubscribeTest.testThrows(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>handleThrownError</mutatedMethod><methodDescription>(Lrx/Subscriber;Ljava/lang/Throwable;)V</methodDescription><lineNumber>415</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>handleThrownError</mutatedMethod><methodDescription>(Lrx/Subscriber;Ljava/lang/Throwable;)V</methodDescription><lineNumber>418</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest>rx.observables.SyncOnSubscribeTest.testThrows(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>handleThrownError</mutatedMethod><methodDescription>(Lrx/Subscriber;Ljava/lang/Throwable;)V</methodDescription><lineNumber>419</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>344</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>7</index><killingTest>rx.observables.SyncOnSubscribeTest.testExtendingBase(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>344</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.observables.SyncOnSubscribeTest.testExtendingBase(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>344</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.observables.SyncOnSubscribeTest.testExtendingBase(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>457</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observables.SyncOnSubscribeTest.testGenericsCreateStatelessWithUnsub(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>461</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest>rx.observables.SyncOnSubscribeTest.testGenericsCreateStatelessWithUnsub(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>462</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.observables.SyncOnSubscribeTest.testGenericsCreateStatelessWithUnsub(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>468</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observables.SyncOnSubscribeTest.testMultipleOnErrors(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>472</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest>rx.observables.SyncOnSubscribeTest.testError(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>473</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest>rx.observables.SyncOnSubscribeTest.testError(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>479</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observables.SyncOnSubscribeTest.testGenericsCreateStatelessWithUnsub(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>483</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.observables.SyncOnSubscribeTest.testGenericsCreateStatelessWithUnsub(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>386</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>386</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.observables.SyncOnSubscribeTest.testGenericsCreateStatelessWithUnsub(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>386</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.observables.SyncOnSubscribeTest.testGenericsCreateStatelessWithUnsub(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>387</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>388</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.observables.SyncOnSubscribeTest.testGenericsCreateStatelessWithUnsub(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>390</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.observables.SyncOnSubscribeTest.testThrowsSlowPath(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>slowPath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>444</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>87</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>slowPath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>443</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>79</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>slowPath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>441</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>66</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>slowPath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>437</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>52</index><killingTest>rx.observables.SyncOnSubscribeTest.testExtendingBase(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>slowPath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>440</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>61</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>slowPath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>442</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>74</index><killingTest>rx.observables.SyncOnSubscribeTest.testExtendingBase(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>slowPath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>444</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>87</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>slowPath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>432</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>slowPath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>434</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>43</index><killingTest>rx.observables.SyncOnSubscribeTest.testThrowsSlowPath(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>tryUnsubscribe</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>367</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>tryUnsubscribe</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>367</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observables.SyncOnSubscribeTest.testGenericsCreateStatelessWithUnsub(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>tryUnsubscribe</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>367</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.observables.SyncOnSubscribeTest.testExtendingBase(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>tryUnsubscribe</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>370</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>24</index><killingTest>rx.observables.SyncOnSubscribeTest.testGenericsCreateStatelessWithUnsub(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>tryUnsubscribe</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>372</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>29</index><killingTest>rx.observables.SyncOnSubscribeTest.testExtendingBase(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>tryUnsubscribe</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>368</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>tryUnsubscribe</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>369</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest>rx.observables.SyncOnSubscribeTest.testStateAfterTerminal(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>351</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.observables.SyncOnSubscribeTest.testIndependentStates(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>355</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SubscriptionProducer</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>352</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest>rx.observables.SyncOnSubscribeTest.testUnsubscribeOutsideOfLoop(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.producers.ProducersTest.testQueuedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.internal.producers.ProducersTest.testQueuedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest>rx.internal.producers.ProducersTest.testQueuedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>44</index><killingTest>rx.internal.producers.ProducersTest.testQueuedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>39</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>53</index><killingTest>rx.internal.producers.ProducersTest.testQueuedNoBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>58</index><killingTest>rx.internal.producers.ProducersTest.testQueuedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>35</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZ)Z</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>49</index><killingTest>rx.internal.producers.ProducersTest.testQueuedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>169</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>142</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>148</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.producers.ProducersTest.testQueuedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest>rx.internal.producers.ProducersTest.testQueuedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>52</index><killingTest>rx.internal.producers.ProducersTest.testQueuedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>68</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>77</index><killingTest>rx.internal.producers.ProducersTest.testQueuedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>85</index><killingTest>rx.internal.producers.ProducersTest.testQueuedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>94</index><killingTest>rx.internal.producers.ProducersTest.testQueuedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>125</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>159</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>164</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>178</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>36</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>99</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>110</index><killingTest>rx.internal.producers.ProducersTest.testQueuedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>133</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.producers.ProducersTest.testQueuedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest>rx.internal.producers.ProducersTest.testQueuedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>36</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest>rx.internal.producers.ProducersTest.testQueuedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest>rx.internal.producers.ProducersTest.testQueuedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest>rx.internal.producers.ProducersTest.testQueuedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.producers.ProducersTest.testQueuedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.internal.producers.ProducersTest.testQueuedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest>rx.internal.producers.ProducersTest.testQueuedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>cleanup</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testMainError(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>cleanup</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>cleanup</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>53</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>344</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testInnerNull(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>265</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>360</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>247</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>307</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testAsynchronousRun(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>313</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testInnerNull(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testInnerNull(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testMainError(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>184</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>80</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testMainError(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>92</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testMainError(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>101</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testMainError(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>118</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testInnerEmpty(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>130</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testMainError(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>202</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>145</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testBackpressure(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>177</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>189</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testInnerEmpty(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>198</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testInnerEmpty(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>215</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testInnerEmpty(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>259</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testInnerNull(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>234</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>269</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testPrefetchIsBounded(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>251</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>324</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testBackpressure(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>328</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testBackpressure(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>255</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>339</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>350</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>266</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>366</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>105</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>110</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testMainError(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>122</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testInnerEmpty(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>202</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>207</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testInnerError(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>224</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>247</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>241</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>285</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testInnerNull(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>243</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>298</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>345</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>init</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>init</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>init</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testInnerNull(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testInnerEmpty(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testMainError(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>40</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testPrefetchIsBounded(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>56</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testPrefetchIsBounded(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>90</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testInnerEmpty(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testMapperThrows(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>104</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>accept</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/Observer;)Z</methodDescription><lineNumber>445</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>asError</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Throwable;</methodDescription><lineNumber>449</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>available</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>371</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>available</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>371</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>capacity</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>375</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>count</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>380</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>count</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>381</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>count</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>383</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>getSpmcInstance</mutatedMethod><methodDescription>()Lrx/internal/util/RxRingBuffer;</methodDescription><lineNumber>44</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>getSpmcInstance</mutatedMethod><methodDescription>()Lrx/internal/util/RxRingBuffer;</methodDescription><lineNumber>45</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.internal.util.RxRingBufferSpmcTest.addAndPoll(rx.internal.util.RxRingBufferSpmcTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>getSpmcInstance</mutatedMethod><methodDescription>()Lrx/internal/util/RxRingBuffer;</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>getSpscInstance</mutatedMethod><methodDescription>()Lrx/internal/util/RxRingBuffer;</methodDescription><lineNumber>36</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>getSpscInstance</mutatedMethod><methodDescription>()Lrx/internal/util/RxRingBuffer;</methodDescription><lineNumber>37</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.internal.util.RxRingBufferSpscTest.addAndPoll(rx.internal.util.RxRingBufferSpscTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>getSpscInstance</mutatedMethod><methodDescription>()Lrx/internal/util/RxRingBuffer;</methodDescription><lineNumber>39</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>440</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorZipTest.testAggregate3Types(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>isCompleted</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>432</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.util.RxRingBufferWithoutUnsafeTest.testPollingTerminalState(rx.internal.util.RxRingBufferWithoutUnsafeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>388</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorMergeTest.shouldCompleteAfterApplyingBackpressure_NormalPath(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>389</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>391</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorMergeTest.shouldCompleteAfterApplyingBackpressure_NormalPath(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>isError</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>436</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>454</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>454</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>358</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.util.RxRingBufferWithoutUnsafeTest.testPollingTerminalState(rx.internal.util.RxRingBufferWithoutUnsafeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>365</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>341</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest>rx.internal.util.RxRingBufferWithoutUnsafeTest.addAndPoll(rx.internal.util.RxRingBufferWithoutUnsafeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>342</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest>rx.internal.util.RxRingBufferWithoutUnsafeTest.addAndPoll(rx.internal.util.RxRingBufferWithoutUnsafeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>65</index><killingTest>rx.internal.util.RxRingBufferWithoutUnsafeTest.addAndPoll(rx.internal.util.RxRingBufferWithoutUnsafeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>351</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>77</index><killingTest>rx.internal.util.RxRingBufferWithoutUnsafeTest.addAndPoll(rx.internal.util.RxRingBufferWithoutUnsafeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>418</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>424</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>424</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>424</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>420</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>428</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>66</index><killingTest>rx.internal.operators.OperatorZipTest.testStartEmptyObservables(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>398</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.internal.util.RxRingBufferWithoutUnsafeTest.addAndPollFailBackpressure(rx.internal.util.RxRingBufferWithoutUnsafeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>405</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><killingTest>rx.internal.util.RxRingBufferWithoutUnsafeTest.testPollingTerminalState(rx.internal.util.RxRingBufferWithoutUnsafeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>405</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><killingTest>rx.internal.util.RxRingBufferWithoutUnsafeTest.testPollingTerminalState(rx.internal.util.RxRingBufferWithoutUnsafeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>405</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><killingTest>rx.internal.util.RxRingBufferWithoutUnsafeTest.testPollingTerminalState(rx.internal.util.RxRingBufferWithoutUnsafeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>400</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest>rx.BackpressureTests.testMergeAsyncThenObserveOnLoop(rx.BackpressureTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>411</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>71</index><killingTest>rx.internal.util.RxRingBufferWithoutUnsafeTest.testPollingTerminalState(rx.internal.util.RxRingBufferWithoutUnsafeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>release</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>314</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>release</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>314</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorGroupByTest.testgroupByBackpressure2(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>release</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>315</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest>rx.internal.operators.OperatorMergeTest.merge2000AsyncStreamOf100(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>release</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>317</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>323</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/Subscriber;)V</methodDescription><lineNumber>189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;)Z</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;)Z</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;)Z</methodDescription><lineNumber>211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorScanTest.testNoBackpressureWithInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;)Z</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><killingTest>rx.internal.operators.OperatorScanTest.testEverythingIsNull(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;)Z</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;)Z</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;)Z</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>45</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;)Z</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>50</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;)Z</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest>rx.ObservableTests.testCountError(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>checkTerminated</mutatedMethod><methodDescription>(ZZLrx/Subscriber;)Z</methodDescription><lineNumber>216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>41</index><killingTest>rx.internal.operators.OperatorScanTest.testEverythingIsNull(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>289</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>295</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>47</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>330</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>147</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>153</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>306</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>309</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>57</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>313</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>72</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>316</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>86</index><killingTest>rx.internal.operators.OperatorScanTest.testInitialValueEmittedNoProducer(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>317</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>102</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>320</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>110</index><killingTest>rx.internal.operators.OperatorScanTest.testInitialValueEmittedNoProducer(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>334</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>164</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>334</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>166</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>339</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>184</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>325</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>125</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>327</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>138</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>227</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.ObservableTests.testCountError(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>202</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorScanTest.testUnboundedSource(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>238</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>238</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>241</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>244</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>59</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>254</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>91</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>255</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>96</index><killingTest>rx.internal.operators.OperatorScanTest.testScanShouldNotRequestZero(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>257</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>101</index><killingTest>rx.internal.operators.OperatorScanTest.testInitialValueEmittedNoProducer(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>281</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>80</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>275</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>47</index><killingTest>rx.internal.operators.OperatorScanTest.testScanShouldNotRequestZero(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>262</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>268</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>274</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><killingTest>rx.internal.operators.OperatorScanTest.scanShouldPassUpstreamARequestForMaxValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>281</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>80</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>282</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>85</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$InitialProducer</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>284</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>90</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>44</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>52</index><killingTest>rx.internal.operators.OperatorSwitchTest.testUnsubscribe(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>229</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorSwitchTest.testSwitchWhenOuterCompleteBeforeInner(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest>rx.internal.operators.OperatorSwitchTest.testSwitchWhenOuterCompleteBeforeInner(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>236</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><killingTest>rx.internal.operators.OperatorSwitchTest.testSwitchWhenOuterCompleteBeforeInner(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>237</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>47</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>249</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>106</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>111</index><killingTest>rx.internal.operators.OperatorSwitchTest.testSwitchWhenOuterCompleteBeforeInner(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>251</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>115</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorSwitchTest.testUnsubscribe(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>187</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>191</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>44</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>192</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>53</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>67</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>198</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>73</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Ljava/lang/Object;ILrx/internal/operators/OperatorSwitch$InnerSubscriber;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorSwitchTest.testUnsubscribe(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Ljava/lang/Object;ILrx/internal/operators/OperatorSwitch$InnerSubscriber;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.internal.operators.OperatorSwitchTest.testUnsubscribe(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Ljava/lang/Object;ILrx/internal/operators/OperatorSwitch$InnerSubscriber;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest>rx.internal.operators.OperatorSwitchTest.testSwitchWithSubsequenceError(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Ljava/lang/Object;ILrx/internal/operators/OperatorSwitch$InnerSubscriber;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>100</index><killingTest>rx.internal.operators.OperatorSwitchTest.testUnsubscribe(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Ljava/lang/Object;ILrx/internal/operators/OperatorSwitch$InnerSubscriber;)V</methodDescription><lineNumber>167</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>138</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Ljava/lang/Object;ILrx/internal/operators/OperatorSwitch$InnerSubscriber;)V</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>175</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Ljava/lang/Object;ILrx/internal/operators/OperatorSwitch$InnerSubscriber;)V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>180</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Ljava/lang/Object;ILrx/internal/operators/OperatorSwitch$InnerSubscriber;)V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>216</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Ljava/lang/Object;ILrx/internal/operators/OperatorSwitch$InnerSubscriber;)V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>96</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Ljava/lang/Object;ILrx/internal/operators/OperatorSwitch$InnerSubscriber;)V</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>110</index><killingTest>rx.internal.operators.OperatorSwitchTest.testUnsubscribe(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Ljava/lang/Object;ILrx/internal/operators/OperatorSwitch$InnerSubscriber;)V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>116</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;I)V</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorSwitchTest.testSwitchWithSubsequenceError(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;I)V</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;I)V</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;I)V</methodDescription><lineNumber>222</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>90</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;I)V</methodDescription><lineNumber>223</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>96</index><killingTest>rx.internal.operators.OperatorSwitchTest.testSwitchWithSubsequenceError(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;I)V</methodDescription><lineNumber>224</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>100</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorSwitchTest.testSwitchWhenOuterCompleteBeforeInner(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest>rx.internal.operators.OperatorSwitchTest.testSwitchWhenInnerCompleteBeforeOuter(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>93</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>98</index><killingTest>rx.internal.operators.OperatorSwitchTest.testSwitchWhenInnerCompleteBeforeOuter(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>102</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSwitchTest.testSwitchWithError(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Observable;)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Observable;)V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>55</index><killingTest>rx.internal.operators.OperatorSwitchTest.testBackpressure(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>236</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpmcArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>236</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpmcArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>79</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>85</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>94</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>53</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>67</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>82</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>88</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>123</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpmcArrayQueueNull(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>60</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>69</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpmcOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>79</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>85</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>94</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>98</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpmcOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>128</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpmcOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>115</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>124</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>28</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpmcArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>61</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>65</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>35</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>49</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>108</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>110</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpmcArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>61</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>65</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>72</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>76</index><killingTest>rx.internal.util.IndexedRingBufferTest.removeMiddle(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>195</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>115</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpmcArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>99</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpmcArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>111</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>31</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpmcArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>224</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>33</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpmcArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>accountProduced</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>accountProduced</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testFlatMapTransformsOnCompletedFuncThrows(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testFlatMapTransformsOnErrorFuncThrows(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testFlatMapTransformsException(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testFlatMapTransformsOnNextFuncThrows(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>requestInner</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>requestInner</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>42</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testFlatMapTransformsOnCompletedFuncThrows(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>requestInner</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>50</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>requestInner</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>58</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>requestInner</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>requestInner</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>requestInner</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testFlatMapTransformsOnCompletedFuncThrows(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>requestInner</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>67</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>requestInner</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>73</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>requestInner</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>79</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>requestInner</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>93</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>requestInner</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>187</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>121</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>requestInner</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>195</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>144</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.testJust(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>requestInner</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>168</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.testJust(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>requestInner</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>202</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>181</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>requestInner</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>86</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>requestInner</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>98</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>requestInner</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>196</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>149</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>requestInner</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>203</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>186</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testFlatMapTransformsOnNextFuncThrows(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testFlatMapTransformsOnNextFuncThrows(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>27</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.noBackpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>46</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.noBackpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>60</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.noBackpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>53</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.noBackpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber</mutatedClass><mutatedMethod>tryEmit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>65</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.noBackpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>69</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>203</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>207</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>305</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>202</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>203</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>69</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>71</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>76</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>184</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>85</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>229</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>103</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>138</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>195</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>151</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>198</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>161</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>229</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>169</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>227</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>242</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>246</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>248</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>229</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>265</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>314</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>316</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>320</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>322</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>229</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>340</index><killingTest>rx.internal.operators.OperatorMergeTest.testConcurrencyWithBrokenOnCompleteContract(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>229</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>394</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>187</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>99</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>isTerminated</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>63</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>61</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>75</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest>rx.observables.AsyncOnSubscribeTest.testSerializesConcurrentObservables(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>63</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureBoundedBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>84</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>89</index><killingTest>rx.observables.AsyncOnSubscribeTest.testSerializesConcurrentObservables(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>157</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>93</index><killingTest>rx.observables.AsyncOnSubscribeTest.testSerializesConcurrentObservables(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>terminate</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>terminateAndDrain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>terminateAndDrain</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnErrorOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureDrainManager.java</sourceFile><mutatedClass>rx.internal.util.BackpressureDrainManager</mutatedClass><mutatedMethod>terminateAndDrain</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnErrorOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>84</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>64</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>84</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>87</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>121</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>124</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>133</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimple(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>158</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>202</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>237</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>163</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>97</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>139</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleError(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>146</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimple(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimple(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleError(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>22</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>47</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>40</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSynchronousDrop(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>47</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSynchronousDrop(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>59</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>65</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>71</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>76</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSynchronousDrop(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>addAll</mutatedMethod><methodDescription>(Ljava/util/Collection;)Z</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>clone</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>contains</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>containsAll</mutatedMethod><methodDescription>(Ljava/util/Collection;)Z</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>element</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>41</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>46</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>59</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.util.SynchronizedQueueTest.testEquals(rx.internal.util.SynchronizedQueueTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>50</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>63</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>68</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.util.RxRingBufferWithoutUnsafeTest.testConcurrency(rx.internal.util.RxRingBufferWithoutUnsafeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>iterator</mutatedMethod><methodDescription>()Ljava/util/Iterator;</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>14</index><killingTest>rx.internal.util.RxRingBufferWithoutUnsafeTest.missingBackpressureException(rx.internal.util.RxRingBufferWithoutUnsafeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>11</index><killingTest>rx.internal.util.RxRingBufferWithoutUnsafeTest.addAndPollFailBackpressure(rx.internal.util.RxRingBufferWithoutUnsafeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.util.RxRingBufferWithoutUnsafeTest.addAndPollFailBackpressure(rx.internal.util.RxRingBufferWithoutUnsafeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.util.RxRingBufferWithoutUnsafeTest.addAndPoll(rx.internal.util.RxRingBufferWithoutUnsafeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>18</index><killingTest>rx.internal.util.RxRingBufferWithoutUnsafeTest.addAndPollFailBackpressure(rx.internal.util.RxRingBufferWithoutUnsafeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>26</index><killingTest>rx.internal.util.RxRingBufferWithoutUnsafeTest.addAndPoll(rx.internal.util.RxRingBufferWithoutUnsafeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.util.RxRingBufferWithoutUnsafeTest.testPollingTerminalState(rx.internal.util.RxRingBufferWithoutUnsafeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.util.RxRingBufferWithoutUnsafeTest.testPollingTerminalState(rx.internal.util.RxRingBufferWithoutUnsafeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>removeAll</mutatedMethod><methodDescription>(Ljava/util/Collection;)Z</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>retainAll</mutatedMethod><methodDescription>(Ljava/util/Collection;)Z</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>toArray</mutatedMethod><methodDescription>()[Ljava/lang/Object;</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>toArray</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/Object;</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedQueue.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedQueue</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Subscriber;Lrx/functions/FuncN;)V</methodDescription><lineNumber>198</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest>rx.internal.operators.OperatorZipTest.testAggregatorUnsubscribe(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>([Lrx/Observable;Ljava/util/concurrent/atomic/AtomicLong;)V</methodDescription><lineNumber>204</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorZipTest.testStartEmptyObservables(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>([Lrx/Observable;Ljava/util/concurrent/atomic/AtomicLong;)V</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>60</index><killingTest>rx.internal.operators.OperatorZipTest.testAggregate3Types(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>([Lrx/Observable;Ljava/util/concurrent/atomic/AtomicLong;)V</methodDescription><lineNumber>204</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>38</index><killingTest>rx.internal.operators.OperatorZipTest.testStartEmptyObservables(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>([Lrx/Observable;Ljava/util/concurrent/atomic/AtomicLong;)V</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>74</index><killingTest>rx.ZipTests.testCovarianceOfZip(rx.ZipTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>([Lrx/Observable;Ljava/util/concurrent/atomic/AtomicLong;)V</methodDescription><lineNumber>204</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorZipTest.testStartEmptyObservables(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>([Lrx/Observable;Ljava/util/concurrent/atomic/AtomicLong;)V</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>60</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>([Lrx/Observable;Ljava/util/concurrent/atomic/AtomicLong;)V</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>35</index><killingTest>rx.internal.operators.OperatorZipTest.testAggregatorUnsubscribe(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>241</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>54</index><killingTest>rx.ZipTests.testCovarianceOfZip(rx.ZipTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>261</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>119</index><killingTest>rx.internal.operators.OperatorZipTest.testDownstreamBackpressureRequestsWithFiniteSyncObservables(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>273</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>175</index><killingTest>rx.internal.operators.OperatorZipTest.testAggregate3Types(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>285</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>221</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>286</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>237</index><killingTest>rx.internal.operators.OperatorZipTest.testBackpressureSync(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>295</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>271</index><killingTest>rx.internal.operators.OperatorZipTest.testAggregatorUnsubscribe(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>241</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>110</index><killingTest>rx.ZipTests.testCovarianceOfZip(rx.ZipTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>273</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>213</index><killingTest>rx.internal.operators.OperatorZipTest.testAggregate3Types(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>286</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>252</index><killingTest>rx.internal.operators.OperatorZipTest.testBackpressureSync(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>267</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>141</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.ZipTests.nonBlockingObservable(rx.ZipTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>232</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.internal.operators.OperatorZipTest.testAggregate3Types(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>241</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>54</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>245</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>71</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>85</index><killingTest>rx.internal.operators.OperatorZipTest.testStartEmptyObservables(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>261</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>119</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>261</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>121</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>273</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>175</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>277</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>197</index><killingTest>rx.internal.operators.OperatorZipTest.testAggregate3Types(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>285</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>221</index><killingTest>rx.BackpressureTests.testZipSync(rx.BackpressureTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>286</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>237</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>295</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>271</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>251</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>89</index><killingTest>rx.internal.operators.OperatorZipTest.testStartpingDifferentLengthObservableSequences2(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>254</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>94</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>264</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>129</index><killingTest>rx.internal.operators.OperatorZipTest.testAggregate3Types(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>269</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>155</index><killingTest>rx.internal.operators.OperatorZipTest.testOnNextExceptionInvokesOnError(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>279</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>201</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>281</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>206</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip</mutatedClass><mutatedMethod>tick</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>287</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>249</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>accept</mutatedMethod><methodDescription>(Lrx/Observer;Ljava/lang/Object;)Z</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observers.SerializedObserverTest.testSerializeNull(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>accept</mutatedMethod><methodDescription>(Lrx/Observer;Ljava/lang/Object;)Z</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest>rx.observers.SerializedObserverTest.testSerializeNull(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>accept</mutatedMethod><methodDescription>(Lrx/Observer;Ljava/lang/Object;)Z</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><killingTest>rx.observers.SerializedObserverTest.testErrorReentry(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>accept</mutatedMethod><methodDescription>(Lrx/Observer;Ljava/lang/Object;)Z</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><killingTest>rx.observers.SerializedObserverTest.testErrorReentry(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>accept</mutatedMethod><methodDescription>(Lrx/Observer;Ljava/lang/Object;)Z</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>accept</mutatedMethod><methodDescription>(Lrx/Observer;Ljava/lang/Object;)Z</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>accept</mutatedMethod><methodDescription>(Lrx/Observer;Ljava/lang/Object;)Z</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>50</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>accept</mutatedMethod><methodDescription>(Lrx/Observer;Ljava/lang/Object;)Z</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>60</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testRequestOverflow(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>accept</mutatedMethod><methodDescription>(Lrx/Observer;Ljava/lang/Object;)Z</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest>rx.observers.SerializedObserverTest.testCompleteReentry(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>accept</mutatedMethod><methodDescription>(Lrx/Observer;Ljava/lang/Object;)Z</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.observers.SerializedObserverTest.testSerializeNull(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>accept</mutatedMethod><methodDescription>(Lrx/Observer;Ljava/lang/Object;)Z</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>46</index><killingTest>rx.observers.SerializedObserverTest.testErrorReentry(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>accept</mutatedMethod><methodDescription>(Lrx/Observer;Ljava/lang/Object;)Z</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>56</index><killingTest>rx.subjects.ReplaySubjectTest.testTerminateOnce(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>completed</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.NotificationLiteTest.testComplete(rx.internal.operators.NotificationLiteTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Ljava/lang/Object;</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.subjects.PublishSubjectTest.testPublishSubjectValueError(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>getError</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Throwable;</methodDescription><lineNumber>244</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.subjects.PublishSubjectTest.testPublishSubjectValueError(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.NotificationLiteTest.testComplete(rx.internal.operators.NotificationLiteTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.internal.operators.NotificationLiteTest.testComplete(rx.internal.operators.NotificationLiteTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>()Lrx/internal/operators/NotificationLite;</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.NotificationLiteTest.testComplete(rx.internal.operators.NotificationLiteTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>isCompleted</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.NotificationLiteTest.testComplete(rx.internal.operators.NotificationLiteTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>isCompleted</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.internal.operators.NotificationLiteTest.testComplete(rx.internal.operators.NotificationLiteTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>isError</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.operators.NotificationLiteTest.testValueKind(rx.internal.operators.NotificationLiteTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>isNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.operators.NotificationLiteTest.testValueKind(rx.internal.operators.NotificationLiteTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>isNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.NotificationLiteTest.testValueKind(rx.internal.operators.NotificationLiteTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>isNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.internal.operators.NotificationLiteTest.testValueKind(rx.internal.operators.NotificationLiteTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>isNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest>rx.internal.operators.NotificationLiteTest.testValueKind(rx.internal.operators.NotificationLiteTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>isNull</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.NotificationLiteTest.testValueKind(rx.internal.operators.NotificationLiteTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>isNull</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.internal.operators.NotificationLiteTest.testValueKind(rx.internal.operators.NotificationLiteTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>kind</mutatedMethod><methodDescription>(Ljava/lang/Object;)Lrx/Notification$Kind;</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>kind</mutatedMethod><methodDescription>(Ljava/lang/Object;)Lrx/Notification$Kind;</methodDescription><lineNumber>211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>kind</mutatedMethod><methodDescription>(Ljava/lang/Object;)Lrx/Notification$Kind;</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>kind</mutatedMethod><methodDescription>(Ljava/lang/Object;)Lrx/Notification$Kind;</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>kind</mutatedMethod><methodDescription>(Ljava/lang/Object;)Lrx/Notification$Kind;</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>kind</mutatedMethod><methodDescription>(Ljava/lang/Object;)Lrx/Notification$Kind;</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>36</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.operators.NotificationLiteTest.testComplete(rx.internal.operators.NotificationLiteTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.NotificationLiteTest.testValueKind(rx.internal.operators.NotificationLiteTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.internal.operators.NotificationLiteTest.testComplete(rx.internal.operators.NotificationLiteTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>()Lrx/subjects/AsyncSubject;</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest>rx.subjects.AsyncSubjectTest.testAsyncSubjectValueError(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>getThrowable</mutatedMethod><methodDescription>()Ljava/lang/Throwable;</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.subjects.AsyncSubjectTest.testAsyncSubjectValueError(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>getThrowable</mutatedMethod><methodDescription>()Ljava/lang/Throwable;</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest>rx.subjects.AsyncSubjectTest.testAsyncSubjectValueError(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>getThrowable</mutatedMethod><methodDescription>()Ljava/lang/Throwable;</methodDescription><lineNumber>196</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><killingTest>rx.subjects.AsyncSubjectTest.testCurrentStateMethodsEmpty(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><killingTest>rx.subjects.AsyncSubjectTest.testAsyncSubjectValueRelay(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest>rx.subjects.AsyncSubjectTest.testAsyncSubjectValueRelay(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>30</index><killingTest>rx.subjects.AsyncSubjectTest.testAsyncSubjectValueRelay(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>35</index><killingTest>rx.subjects.AsyncSubjectTest.testAsyncSubjectValueError(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>hasCompleted</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.subjects.AsyncSubjectTest.testCurrentStateMethodsEmpty(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>hasCompleted</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.subjects.AsyncSubjectTest.testAsyncSubjectValueError(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>hasCompleted</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><killingTest>rx.subjects.AsyncSubjectTest.testAsyncSubjectValueError(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>hasObservers</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>7</index><killingTest>rx.subjects.AsyncSubjectTest.testAsyncSubjectValueError(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>hasObservers</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.subjects.AsyncSubjectTest.testAsyncSubjectValueError(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>hasObservers</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.subjects.AsyncSubjectTest.testAsyncSubjectValueError(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>hasThrowable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.subjects.AsyncSubjectTest.testAsyncSubjectValueError(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>hasValue</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><killingTest>rx.subjects.AsyncSubjectTest.testAsyncSubjectValueRelay(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>hasValue</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest>rx.subjects.AsyncSubjectTest.testCurrentStateMethodsEmpty(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>hasValue</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>31</index><killingTest>rx.subjects.AsyncSubjectTest.testAsyncSubjectValueError(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>41</index><killingTest>rx.subjects.AsyncSubjectTest.testCurrentStateMethodsEmpty(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>74</index><killingTest>rx.subjects.AsyncSubjectTest.testEmptySubjectCompleted(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.subjects.AsyncSubjectTest.testCurrentStateMethodsEmpty(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.subjects.AsyncSubjectTest.testCurrentStateMethodsEmpty(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>41</index><killingTest>rx.subjects.AsyncSubjectTest.testCurrentStateMethodsEmpty(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>52</index><killingTest>rx.subjects.AsyncSubjectTest.testEmptySubjectCompleted(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>56</index><killingTest>rx.subjects.AsyncSubjectTest.testEmptySubjectCompleted(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>66</index><killingTest>rx.subjects.AsyncSubjectTest.testCompleted(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>70</index><killingTest>rx.subjects.AsyncSubjectTest.testCompleted(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>36</index><killingTest>rx.subjects.AsyncSubjectTest.testAsyncSubjectValueError(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>73</index><killingTest>rx.subjects.AsyncSubjectTest.testOnErrorThrowsDoesntPreventDelivery(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.subjects.AsyncSubjectTest.testAsyncSubjectValueError(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><killingTest>rx.subjects.AsyncSubjectTest.testAsyncSubjectValueError(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>56</index><killingTest>rx.subjects.AsyncSubjectTest.testOnErrorThrowsDoesntPreventDelivery(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>45</index><killingTest>rx.subjects.AsyncSubjectTest.testOnErrorThrowsDoesntPreventDelivery(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>79</index><killingTest>rx.subjects.AsyncSubjectTest.testOnErrorThrowsDoesntPreventDelivery(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpmcArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpmcArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>55</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>48</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>83</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpmcArrayQueueNull(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpmcOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>55</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>68</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>59</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpmcOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>88</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpmcOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>77</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpmcOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>84</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpmcArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>32</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpmcArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>184</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>55</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpmcArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>46</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpmcArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>48</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpmcArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>32</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpmcArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>77</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpmcArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>73</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>31</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpmcArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>33</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpmcArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Subscriber;Ljava/lang/Long;Lrx/functions/Action0;)V</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>accept</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>assertCapacity</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>assertCapacity</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>96</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>assertCapacity</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>assertCapacity</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>assertCapacity</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>assertCapacity</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>56</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureBoundedBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>assertCapacity</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>98</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>assertCapacity</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>assertCapacity</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>167</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>82</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>assertCapacity</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>87</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>assertCapacity</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>102</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>assertCapacity</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>assertCapacity</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>51</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>assertCapacity</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>61</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureBoundedBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>assertCapacity</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>163</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>72</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>assertCapacity</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>78</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnErrorOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>manager</mutatedMethod><methodDescription>()Lrx/Producer;</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnErrorOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnErrorOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>24</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>addTotalRequested</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>656</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressureBounded(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>addTotalRequested</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>655</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>addTotalRequested</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>656</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>addTotalRequested</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>659</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>index</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>729</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>699</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>699</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>672</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>685</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>42</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressure(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>683</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>35</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressure(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>672</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressure(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>679</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressure(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>685</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressure(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>689</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>70</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressure(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>680</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>29</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>691</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>74</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>608</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>622</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>628</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>51</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>626</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>44</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressure(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>608</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>618</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>622</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>622</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>628</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressure(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>633</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>63</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>635</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>68</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>638</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>73</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>640</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>80</index><killingTest>rx.internal.operators.OperatorReplayTest.testBufferedWindowReplay(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>705</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>712</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>714</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$InnerProducer</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>719</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Subscriber;Lrx/subscriptions/SerialSubscription;)V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>57</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>completeInner</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>completeInner</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>completeInner</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>completeInner</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorConcatTest.testRequestOverflowDoesNotStallStream(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorConcatTest.testRequestOverflowDoesNotStallStream(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.CompletableTest.startWithFlowableError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Observable;)V</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Observable;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest>rx.internal.operators.OperatorConcatTest.testRequestOverflowDoesNotStallStream(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorConcatTest.testInnerBackpressureWithAlignedBoundaries(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>requestFromChild</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>requestFromChild</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>55</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>requestFromChild</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorConcatTest.testRequestOverflowDoesNotStallStream(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>requestFromChild</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.internal.operators.OperatorConcatTest.testRequestOverflowDoesNotStallStream(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>requestFromChild</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>46</index><killingTest>rx.internal.operators.OperatorMaterializeTest.testBackpressureWithEmissionThenError(rx.internal.operators.OperatorMaterializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>requestFromChild</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><killingTest>rx.internal.operators.OperatorMaterializeTest.testBackpressureWithEmissionThenError(rx.internal.operators.OperatorMaterializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>requestFromChild</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>55</index><killingTest>rx.internal.operators.OperatorMaterializeTest.testBackpressureWithEmissionThenError(rx.internal.operators.OperatorMaterializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>requestFromChild</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>40</index><killingTest>rx.internal.operators.OperatorConcatTest.testRequestOverflowDoesNotStallStream(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>requestFromChild</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>59</index><killingTest>rx.internal.operators.OperatorMaterializeTest.testBackpressureWithEmissionThenError(rx.internal.operators.OperatorMaterializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>subscribeNext</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>166</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorRetryWithPredicateTest.testBackpressure(rx.internal.operators.OperatorRetryWithPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>subscribeNext</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>166</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorConcatTest.testRequestOverflowDoesNotStallStream(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>subscribeNext</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorConcatTest.testConcatObservableOfObservables(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>subscribeNext</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest>rx.internal.operators.OperatorConcatTest.testRequestOverflowDoesNotStallStream(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>subscribeNext</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>84</index><killingTest>rx.internal.operators.OperatorMaterializeTest.testBackpressureWithEmissionThenError(rx.internal.operators.OperatorMaterializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>subscribeNext</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest>rx.internal.operators.OperatorConcatTest.testRequestOverflowDoesNotStallStream(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>subscribeNext</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>59</index><killingTest>rx.internal.operators.OperatorConcatTest.testConcatUnsubscribeConcurrent(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber</mutatedClass><mutatedMethod>subscribeNext</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>89</index><killingTest>rx.observables.AsyncOnSubscribeTest.testSerializesConcurrentObservables(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>beginWindow</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testUnsubscribeAll(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>beginWindow</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>53</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>beginWindow</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>74</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>beginWindow</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>92</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testUnsubscribeAll(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>createSerializedSubject</mutatedMethod><methodDescription>()Lrx/internal/operators/OperatorWindowWithStartEndObservable$SerializedSubject;</methodDescription><lineNumber>237</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testUnsubscribeAll(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>endWindow</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorWindowWithStartEndObservable$SerializedSubject;)V</methodDescription><lineNumber>218</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>endWindow</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorWindowWithStartEndObservable$SerializedSubject;)V</methodDescription><lineNumber>222</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>endWindow</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorWindowWithStartEndObservable$SerializedSubject;)V</methodDescription><lineNumber>224</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>46</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>endWindow</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorWindowWithStartEndObservable$SerializedSubject;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>81</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>endWindow</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorWindowWithStartEndObservable$SerializedSubject;)V</methodDescription><lineNumber>226</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>54</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>endWindow</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorWindowWithStartEndObservable$SerializedSubject;)V</methodDescription><lineNumber>232</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>86</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testNoUnsubscribeAndNoLeak(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>66</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>167</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>41</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>163</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>75</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>84</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testNoUnsubscribeAndNoLeak(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>167</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>89</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testNoUnsubscribeAndNoLeak(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>167</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>100</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>66</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>41</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>76</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>86</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>91</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>102</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>52</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>62</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;Ljava/util/Collection;)V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.exceptions.CompositeExceptionTest.testNullCollection(rx.exceptions.CompositeExceptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;Ljava/util/Collection;)V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><killingTest>rx.exceptions.CompositeExceptionTest.testCompositeExceptionWithNullInitCause(rx.exceptions.CompositeExceptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;Ljava/util/Collection;)V</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>44</index><killingTest>rx.exceptions.CompositeExceptionTest.testNullElement(rx.exceptions.CompositeExceptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;Ljava/util/Collection;)V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>58</index><killingTest>rx.exceptions.CompositeExceptionTest.testNullElement(rx.exceptions.CompositeExceptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>appendStackTrace</mutatedMethod><methodDescription>(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>27</index><killingTest>rx.exceptions.CompositeExceptionTest.testNullElement(rx.exceptions.CompositeExceptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>appendStackTrace</mutatedMethod><methodDescription>(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>44</index><killingTest>rx.exceptions.CompositeExceptionTest.testNullElement(rx.exceptions.CompositeExceptionTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>appendStackTrace</mutatedMethod><methodDescription>(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>appendStackTrace</mutatedMethod><methodDescription>(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><killingTest>rx.exceptions.CompositeExceptionTest.testNullElement(rx.exceptions.CompositeExceptionTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>appendStackTrace</mutatedMethod><methodDescription>(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>65</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>getCause</mutatedMethod><methodDescription>()Ljava/lang/Throwable;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.exceptions.CompositeExceptionTest.testCompositeExceptionWithNullInitCause(rx.exceptions.CompositeExceptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>getCause</mutatedMethod><methodDescription>()Ljava/lang/Throwable;</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest>rx.CompletableTest.subscribeTwoActionsThrowFromOnError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>getCause</mutatedMethod><methodDescription>()Ljava/lang/Throwable;</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><killingTest>rx.CompletableTest.subscribeTwoActionsThrowFromOnError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>getCause</mutatedMethod><methodDescription>()Ljava/lang/Throwable;</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>68</index><killingTest>rx.exceptions.CompositeExceptionTest.testNullElement(rx.exceptions.CompositeExceptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>getCause</mutatedMethod><methodDescription>()Ljava/lang/Throwable;</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>78</index><killingTest>rx.exceptions.CompositeExceptionTest.testCompositeExceptionFromParentThenChild(rx.exceptions.CompositeExceptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>getCause</mutatedMethod><methodDescription>()Ljava/lang/Throwable;</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>137</index><killingTest>rx.exceptions.CompositeExceptionTest.testCompositeExceptionWithNullInitCause(rx.exceptions.CompositeExceptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>getExceptions</mutatedMethod><methodDescription>()Ljava/util/List;</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.exceptions.CompositeExceptionTest.testCompositeExceptionWithNullInitCause(rx.exceptions.CompositeExceptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>getListOfCauses</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Ljava/util/List;</methodDescription><lineNumber>254</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.exceptions.CompositeExceptionTest.testNullElement(rx.exceptions.CompositeExceptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>getListOfCauses</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Ljava/util/List;</methodDescription><lineNumber>259</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest>rx.exceptions.CompositeExceptionTest.testMultipleWithSameCause(rx.exceptions.CompositeExceptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>getListOfCauses</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Ljava/util/List;</methodDescription><lineNumber>255</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest>rx.exceptions.CompositeExceptionTest.testNullElement(rx.exceptions.CompositeExceptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>getListOfCauses</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Ljava/util/List;</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>35</index><killingTest>rx.exceptions.CompositeExceptionTest.testMultipleWithSameCause(rx.exceptions.CompositeExceptionTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>getMessage</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>printStackTrace</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>printStackTrace</mutatedMethod><methodDescription>(Ljava/io/PrintStream;)V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>printStackTrace</mutatedMethod><methodDescription>(Ljava/io/PrintWriter;)V</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>printStackTrace</mutatedMethod><methodDescription>(Lrx/exceptions/CompositeException$PrintStreamOrWriter;)V</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>31</index><killingTest>rx.exceptions.CompositeExceptionTest.testNullElement(rx.exceptions.CompositeExceptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>printStackTrace</mutatedMethod><methodDescription>(Lrx/exceptions/CompositeException$PrintStreamOrWriter;)V</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>48</index><killingTest>rx.exceptions.CompositeExceptionTest.testNullElement(rx.exceptions.CompositeExceptionTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>printStackTrace</mutatedMethod><methodDescription>(Lrx/exceptions/CompositeException$PrintStreamOrWriter;)V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>91</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>printStackTrace</mutatedMethod><methodDescription>(Lrx/exceptions/CompositeException$PrintStreamOrWriter;)V</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>printStackTrace</mutatedMethod><methodDescription>(Lrx/exceptions/CompositeException$PrintStreamOrWriter;)V</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>65</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>printStackTrace</mutatedMethod><methodDescription>(Lrx/exceptions/CompositeException$PrintStreamOrWriter;)V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>88</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException</mutatedClass><mutatedMethod>printStackTrace</mutatedMethod><methodDescription>(Lrx/exceptions/CompositeException$PrintStreamOrWriter;)V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>108</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>addProducer</mutatedMethod><methodDescription>(Lrx/internal/operators/CachedObservable$ReplayProducer;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>22</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>addProducer</mutatedMethod><methodDescription>(Lrx/internal/operators/CachedObservable$ReplayProducer;)V</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorReplayTest.testUnsubscribeSource(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorReplayTest.testUnsubscribeSource(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>32</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>dispatch</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorReplayTest.testUnsubscribeSource(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayNoBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest>rx.internal.operators.OperatorReplayTest.testUnsubscribeSource(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayNoBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>196</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.CachedObservableTest.testValuesAndThenError(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.internal.operators.CachedObservableTest.testValuesAndThenError(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>201</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest>rx.internal.operators.CachedObservableTest.testValuesAndThenError(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>191</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>removeProducer</mutatedMethod><methodDescription>(Lrx/internal/operators/CachedObservable$ReplayProducer;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>removeProducer</mutatedMethod><methodDescription>(Lrx/internal/operators/CachedObservable$ReplayProducer;)V</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>55</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>removeProducer</mutatedMethod><methodDescription>(Lrx/internal/operators/CachedObservable$ReplayProducer;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>49</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>removeProducer</mutatedMethod><methodDescription>(Lrx/internal/operators/CachedObservable$ReplayProducer;)V</methodDescription><lineNumber>157</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>84</index><killingTest>rx.internal.operators.CachedObservableTest.testAsyncComeAndGo(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>removeProducer</mutatedMethod><methodDescription>(Lrx/internal/operators/CachedObservable$ReplayProducer;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>100</index><killingTest>rx.internal.operators.CachedObservableTest.testAsyncComeAndGo(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>removeProducer</mutatedMethod><methodDescription>(Lrx/internal/operators/CachedObservable$ReplayProducer;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>105</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>removeProducer</mutatedMethod><methodDescription>(Lrx/internal/operators/CachedObservable$ReplayProducer;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>107</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>removeProducer</mutatedMethod><methodDescription>(Lrx/internal/operators/CachedObservable$ReplayProducer;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>removeProducer</mutatedMethod><methodDescription>(Lrx/internal/operators/CachedObservable$ReplayProducer;)V</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>removeProducer</mutatedMethod><methodDescription>(Lrx/internal/operators/CachedObservable$ReplayProducer;)V</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>55</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>removeProducer</mutatedMethod><methodDescription>(Lrx/internal/operators/CachedObservable$ReplayProducer;)V</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>67</index><killingTest>rx.internal.operators.CachedObservableTest.testAsyncComeAndGo(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>removeProducer</mutatedMethod><methodDescription>(Lrx/internal/operators/CachedObservable$ReplayProducer;)V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>94</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState</mutatedClass><mutatedMethod>removeProducer</mutatedMethod><methodDescription>(Lrx/internal/operators/CachedObservable$ReplayProducer;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>108</index><killingTest>rx.internal.operators.CachedObservableTest.testAsyncComeAndGo(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>163</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observers.SerializedObserverTest.testCompleteReentry(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>167</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.observers.SerializedObserverTest.testCompleteReentry(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><killingTest>rx.observers.SerializedObserverTest.testSerializeReentrantNullAndComplete(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>46</index><killingTest>rx.observers.SerializedObserverTest.testSerializeReentrantNullAndComplete(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>65</index><killingTest>rx.observers.SerializedObserverTest.testCompleteReentry(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>97</index><killingTest>rx.observers.SerializedObserverTest.testSingleThreadedBasic(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.observers.SerializedObserverTest.testErrorReentry(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest>rx.observers.SerializedObserverTest.testErrorReentry(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>41</index><killingTest>rx.observers.SerializedObserverTest.testSerializeReentrantNullAndError(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>50</index><killingTest>rx.observers.SerializedObserverTest.testSerializeReentrantNullAndError(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>70</index><killingTest>rx.observers.SerializedObserverTest.testErrorReentry(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>103</index><killingTest>rx.internal.operators.OperatorWithLatestFromTest.testFunctionThrows(rx.internal.operators.OperatorWithLatestFromTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>126</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>190</index><killingTest>rx.observers.SerializedObserverTest.runConcurrencyTest(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>251</index><killingTest>rx.observers.SerializedObserverTest.testSerializeNull(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>256</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observers.SerializedObserverTest.testSerializeAllowsOnError(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.observers.SerializedObserverTest.testSerializeAllowsOnError(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest>rx.observers.SerializedObserverTest.testSerializeAllowsOnError(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>41</index><killingTest>rx.observers.SerializedObserverTest.testSerializeNull(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>126</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>141</index><killingTest>rx.observers.SerializedObserverTest.testSerializeNull(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>190</index><killingTest>rx.observers.SerializedObserverTest.testSerializeNull(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>198</index><killingTest>rx.observers.SerializedObserverTest.testSerializeNull(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>211</index><killingTest>rx.observers.SerializedObserverTest.runConcurrencyTest(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>61</index><killingTest>rx.observers.SerializedObserverTest.testSerializeNull(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>94</index><killingTest>rx.observers.SerializedObserverTest.testSerializeAllowsOnError(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>113</index><killingTest>rx.observers.SerializedObserverTest.testSerializeAllowsOnError(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>236</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>244</index><killingTest>rx.observers.SerializedObserverTest.testSerializeDrainPhaseThrows(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>createCountedSerializedSubject</mutatedMethod><methodDescription>()Lrx/internal/operators/OperatorWindowWithTime$CountedSerializedSubject;</methodDescription><lineNumber>496</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>428</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>435</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>62</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>433</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>37</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>436</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>71</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>438</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>80</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>411</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>418</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>62</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>416</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>37</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>419</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>72</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>421</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>82</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>394</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>52</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>387</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>392</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>394</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>58</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>399</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>92</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>401</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>110</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>395</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>62</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>400</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>102</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>402</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>115</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>380</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>startNewChunk</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>453</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>startNewChunk</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>459</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>53</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>startNewChunk</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>461</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>65</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>terminateChunk</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorWindowWithTime$CountedSerializedSubject;)V</methodDescription><lineNumber>477</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>terminateChunk</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorWindowWithTime$CountedSerializedSubject;)V</methodDescription><lineNumber>481</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>terminateChunk</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorWindowWithTime$CountedSerializedSubject;)V</methodDescription><lineNumber>483</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>46</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>terminateChunk</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorWindowWithTime$CountedSerializedSubject;)V</methodDescription><lineNumber>490</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>81</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>terminateChunk</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorWindowWithTime$CountedSerializedSubject;)V</methodDescription><lineNumber>485</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>54</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber</mutatedClass><mutatedMethod>terminateChunk</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorWindowWithTime$CountedSerializedSubject;)V</methodDescription><lineNumber>491</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>86</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>141</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>116</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>122</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.producers.ProducersTest.testQueuedValueWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest>rx.internal.producers.ProducersTest.testQueuedValueWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>48</index><killingTest>rx.internal.producers.ProducersTest.testQueuedValueWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>54</index><killingTest>rx.internal.producers.ProducersTest.testQueuedValueWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>59</index><killingTest>rx.internal.producers.ProducersTest.testQueuedValueWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>90</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>107</index><killingTest>rx.internal.producers.ProducersTest.testQueuedValueWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>131</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>136</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>150</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>64</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>75</index><killingTest>rx.internal.producers.ProducersTest.testQueuedValueWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>98</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.producers.ProducersTest.testQueuedValueWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest>rx.internal.producers.ProducersTest.testQueuedValueWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>36</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest>rx.internal.producers.ProducersTest.testQueuedValueWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest>rx.internal.producers.ProducersTest.testQueuedValueWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.producers.ProducersTest.testQueuedValueWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.internal.producers.ProducersTest.testQueuedValueWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>QueuedValueProducer.java</sourceFile><mutatedClass>rx.internal.producers.QueuedValueProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest>rx.internal.producers.ProducersTest.testQueuedValueWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>45</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>25</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>lvConsumerIndex</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>lvProducerIndex</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>43</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>58</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>69</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>91</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscAtomicArrayQueueNull(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>62</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>80</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>84</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>103</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>92</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>99</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>40</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>33</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>52</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>41</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>48</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>31</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>33</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>soConsumerIndex</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscAtomicArrayQueue</mutatedClass><mutatedMethod>soProducerIndex</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorPublish$PublishSubscriber;Lrx/Subscriber;)V</methodDescription><lineNumber>676</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>764</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testRefCount(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>764</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testRefCount(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>732</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>750</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>56</index><killingTest>rx.internal.operators.OperatorPublishTest.testBackpressureFastSlow(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>748</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>49</index><killingTest>rx.internal.operators.OperatorPublishTest.testNoSubscriberRetentionOnCompleted(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>732</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorPublishTest.testNoSubscriberRetentionOnCompleted(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>740</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.internal.operators.OperatorPublishTest.testNoSubscriberRetentionOnCompleted(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>744</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><killingTest>rx.internal.operators.OperatorPublishTest.testBackpressureFastSlow(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>750</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>56</index><killingTest>rx.internal.operators.OperatorPublishTest.testNoSubscriberRetentionOnCompleted(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>754</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>84</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>745</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>43</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>756</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>88</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>682</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorPublishTest.testZeroRequested(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>696</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>708</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>64</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>706</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>57</index><killingTest>rx.internal.operators.OperatorPublishTest.testObserveOn(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>682</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorPublishTest.testNoSubscriberRetentionOnCompleted(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>692</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorPublishTest.testNoSubscriberRetentionOnCompleted(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>696</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest>rx.internal.operators.OperatorPublishTest.testZeroRequested(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>696</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><killingTest>rx.internal.operators.OperatorPublishTest.testZeroRequested(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>701</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><killingTest>rx.internal.operators.OperatorPublishTest.testZeroRequested(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>708</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>64</index><killingTest>rx.internal.operators.OperatorPublishTest.testObserveOn(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>714</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>76</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>717</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>81</index><killingTest>rx.internal.operators.OperatorPublishTest.testZeroRequested(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>770</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testRefCount(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>777</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>779</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$InnerProducer</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>784</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testRemoveUnsubscribes(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testRemoveUnsubscribes(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testRemoveUnsubscribes(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testRemoveUnsubscribes(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>72</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testClear(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testClear(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testClear(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>60</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testClear(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>hasSubscriptions</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testNoTimedTaskPartRetention(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>hasSubscriptions</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testNoTimedTaskPartRetention(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>hasSubscriptions</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testNoTimedTaskPartRetention(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>hasSubscriptions</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testNoTimedTaskPartRetention(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>hasSubscriptions</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>34</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testNoTimedTaskPartRetention(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>hasSubscriptions</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>48</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testClear(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testRemoveUnsubscribes(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testRemoveUnsubscribes(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testRemoveUnsubscribes(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>57</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testRemoveUnsubscribes(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>61</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testRemoveUnsubscribes(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testSuccess(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testSuccess(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>61</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testSuccess(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>unsubscribeFromAll</mutatedMethod><methodDescription>(Ljava/util/Collection;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testSuccess(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>unsubscribeFromAll</mutatedMethod><methodDescription>(Ljava/util/Collection;)V</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testSuccess(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>unsubscribeFromAll</mutatedMethod><methodDescription>(Ljava/util/Collection;)V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>41</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testCompositeException(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>unsubscribeFromAll</mutatedMethod><methodDescription>(Ljava/util/Collection;)V</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testSuccess(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeSubscription.java</sourceFile><mutatedClass>rx.subscriptions.CompositeSubscription</mutatedClass><mutatedMethod>unsubscribeFromAll</mutatedMethod><methodDescription>(Ljava/util/Collection;)V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>63</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testCompositeException(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>17</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>28</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>31</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>49</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>57</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueNull(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>42</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>68</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>58</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>64</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>9</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>12</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>35</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>46</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>36</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>42</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueue(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SpscExactAtomicArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscExactAtomicArrayQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>29</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>addCause</mutatedMethod><methodDescription>(Ljava/lang/Throwable;Ljava/lang/Throwable;)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>addCause</mutatedMethod><methodDescription>(Ljava/lang/Throwable;Ljava/lang/Throwable;)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>addCause</mutatedMethod><methodDescription>(Ljava/lang/Throwable;Ljava/lang/Throwable;)V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.exceptions.ExceptionsNullTest.testOnErrorThrowableAddValueAsLastCause(rx.exceptions.ExceptionsNullTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>addCause</mutatedMethod><methodDescription>(Ljava/lang/Throwable;Ljava/lang/Throwable;)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>addCause</mutatedMethod><methodDescription>(Ljava/lang/Throwable;Ljava/lang/Throwable;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>getFinalCause</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Ljava/lang/Throwable;</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>getFinalCause</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Ljava/lang/Throwable;</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>getFinalCause</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Ljava/lang/Throwable;</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.exceptions.ExceptionsNullTest.testOnErrorThrowableAddValueAsLastCause(rx.exceptions.ExceptionsNullTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>getFinalCause</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Ljava/lang/Throwable;</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>getFinalCause</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Ljava/lang/Throwable;</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>getFinalCause</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Ljava/lang/Throwable;</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>35</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>propagate</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.CompletableTest.concatSingleSourceThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>propagate</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.CompletableTest.fromFutureThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>throwIfAny</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.util.SubscriptionListTest.testSuccess(rx.internal.util.SubscriptionListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>throwIfAny</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.internal.util.SubscriptionListTest.testException(rx.internal.util.SubscriptionListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>throwIfAny</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.internal.util.SubscriptionListTest.testException(rx.internal.util.SubscriptionListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>throwIfAny</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.internal.util.SubscriptionListTest.testException(rx.internal.util.SubscriptionListTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>throwIfAny</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>167</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>throwIfFatal</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.exceptions.ExceptionsTest.testThreadDeathIsThrown(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>throwIfFatal</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.exceptions.ExceptionsTest.testThreadDeathIsThrown(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>throwIfFatal</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest>rx.exceptions.ExceptionsTest.testThreadDeathIsThrown(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>throwIfFatal</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><killingTest>rx.exceptions.ExceptionsTest.testThreadDeathIsThrown(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>throwIfFatal</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>49</index><killingTest>rx.exceptions.ExceptionsTest.testThreadDeathIsThrown(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>throwIfFatal</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>60</index><killingTest>rx.exceptions.ExceptionsTest.testOnErrorExceptionIsThrown(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>throwOrReport</mutatedMethod><methodDescription>(Ljava/lang/Throwable;Lrx/Observer;)V</methodDescription><lineNumber>199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>throwOrReport</mutatedMethod><methodDescription>(Ljava/lang/Throwable;Lrx/Observer;)V</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest>rx.exceptions.ExceptionsTest.testOnErrorNotImplementedIsThrown(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>throwOrReport</mutatedMethod><methodDescription>(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorSkipWhileTest.testPredicateFatalError(rx.internal.operators.OperatorSkipWhileTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Exceptions.java</sourceFile><mutatedClass>rx.exceptions.Exceptions</mutatedClass><mutatedMethod>throwOrReport</mutatedMethod><methodDescription>(Ljava/lang/Throwable;Lrx/Observer;Ljava/lang/Object;)V</methodDescription><lineNumber>189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.exceptions.ExceptionsTest.testOnErrorExceptionIsThrownFromOnNext(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>38</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>45</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><killingTest>rx.BackpressureTests.testFirehoseFailsAsExpected(rx.BackpressureTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>64</index><killingTest>rx.BackpressureTests.testFirehoseFailsAsExpected(rx.BackpressureTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>computation</mutatedMethod><methodDescription>()Lrx/Scheduler;</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.schedulers.ComputationSchedulerTests.testRecursiveExecution(rx.schedulers.ComputationSchedulerTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>(Ljava/util/concurrent/Executor;)Lrx/Scheduler;</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testCancelledTasksDontRun(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>immediate</mutatedMethod><methodDescription>()Lrx/Scheduler;</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.schedulers.ImmediateSchedulerTest.testRecursiveExecution(rx.schedulers.ImmediateSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>io</mutatedMethod><methodDescription>()Lrx/Scheduler;</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.schedulers.CachedThreadSchedulerTest.testRecursiveExecution(rx.schedulers.CachedThreadSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>newThread</mutatedMethod><methodDescription>()Lrx/Scheduler;</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.schedulers.NewThreadSchedulerTest.testRecursiveExecution(rx.schedulers.NewThreadSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>35</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>48</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>53</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>184</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>57</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>61</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testStartIdempotence(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testStartIdempotence(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testStartIdempotence(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>35</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testStartIdempotence(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>48</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>53</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testStartIdempotence(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>57</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>61</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testStartIdempotence(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>test</mutatedMethod><methodDescription>()Lrx/schedulers/TestScheduler;</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Schedulers.java</sourceFile><mutatedClass>rx.schedulers.Schedulers</mutatedClass><mutatedMethod>trampoline</mutatedMethod><methodDescription>()Lrx/Scheduler;</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.schedulers.TrampolineSchedulerTest.testRecursiveExecution(rx.schedulers.TrampolineSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>fastpath</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testNoBackpressure(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>fastpath</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>45</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>fastpath</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testNoBackpressure(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>fastpath</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testNoBackpressure(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>fastpath</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>53</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testNoBackpressure(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>fastpath</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>40</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testNoBackpressure(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>fastpath</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>57</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testNoBackpressure(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testNoBackpressure(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testNoBackpressure(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>46</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testNoBackpressure(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>51</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>slowpath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>107</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>slowpath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>11</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testRequestOverflow(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>slowpath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>54</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>slowpath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>60</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>slowpath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>slowpath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>slowpath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>slowpath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>68</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>slowpath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>78</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>slowpath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>97</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>slowpath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>115</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>slowpath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>49</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange$RangeProducer</mutatedClass><mutatedMethod>slowpath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>82</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;IZ)V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><killingTest>rx.CompletableTest.mergeDelayErrorObservableMaxConcurrent(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;IZ)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>44</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;IZ)V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>52</index><killingTest>rx.CompletableTest.mergeDelayErrorObservableMaxConcurrent(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>getOrCreateErrors</mutatedMethod><methodDescription>()Ljava/util/Queue;</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.CompletableTest.mergeObservableSingleThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>getOrCreateErrors</mutatedMethod><methodDescription>()Ljava/util/Queue;</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>getOrCreateErrors</mutatedMethod><methodDescription>()Ljava/util/Queue;</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>getOrCreateErrors</mutatedMethod><methodDescription>()Ljava/util/Queue;</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>32</index><killingTest>rx.CompletableTest.mergeObservableSingleThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>getOrCreateErrors</mutatedMethod><methodDescription>()Ljava/util/Queue;</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>38</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.CompletableTest.mergeObservableEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest>rx.CompletableTest.mergeObservableEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.CompletableTest.mergeDelayErrorObservableError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest>rx.CompletableTest.mergeDelayErrorObservableError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Completable;)V</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.CompletableTest.mergeDelayErrorObservableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Completable;)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest>rx.CompletableTest.mergeDelayErrorObservableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>terminate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.CompletableTest.mergeObservableEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>terminate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.CompletableTest.mergeObservableEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>terminate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><killingTest>rx.CompletableTest.mergeDelayErrorObservableError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>terminate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><killingTest>rx.CompletableTest.mergeDelayErrorObservableError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>terminate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>63</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>terminate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>72</index><killingTest>rx.CompletableTest.mergeObservableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>terminate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>75</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>terminate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>88</index><killingTest>rx.CompletableTest.mergeObservableSingleThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>terminate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.CompletableTest.mergeObservableEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>terminate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>45</index><killingTest>rx.CompletableTest.mergeDelayErrorObservableError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>terminate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>53</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>terminate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>94</index><killingTest>rx.CompletableTest.mergeObservableSingleThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber</mutatedClass><mutatedMethod>terminate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>102</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>fastPath</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>22</index><killingTest>rx.internal.operators.OnSubscribeCompletableTest.testJustTwoEmissionsObservableThrowsError(rx.internal.operators.OnSubscribeCompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>fastPath</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>43</index><killingTest>rx.SubscriberTest.testOnStartRequestsAreAdditiveAndOverflowBecomesMaxValue(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>fastPath</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest>rx.SubscriberTest.testOnStartRequestsAreAdditiveAndOverflowBecomesMaxValue(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>fastPath</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest>rx.SubscriberTest.testOnStartRequestsAreAdditiveAndOverflowBecomesMaxValue(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>fastPath</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>50</index><killingTest>rx.internal.operators.OnSubscribeFromArrayTest.simple(rx.internal.operators.OnSubscribeFromArrayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>fastPath</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>40</index><killingTest>rx.SubscriberTest.testOnStartRequestsAreAdditiveAndOverflowBecomesMaxValue(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>fastPath</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>58</index><killingTest>rx.internal.operators.OnSubscribeFromArrayTest.simple(rx.internal.operators.OnSubscribeFromArrayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeFromArrayTest.backpressure(rx.internal.operators.OnSubscribeFromArrayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.SubscriberTest.testOnStartRequestsAreAdditive(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest>rx.internal.operators.OnSubscribeFromArrayTest.backpressure(rx.internal.operators.OnSubscribeFromArrayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><killingTest>rx.SubscriberTest.testOnStartRequestsAreAdditiveAndOverflowBecomesMaxValue(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>47</index><killingTest>rx.SubscriberTest.testOnStartRequestsAreAdditive(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>55</index><killingTest>rx.SubscriberTest.testOnStartRequestsAreAdditive(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>39</index><killingTest>rx.SubscriberTest.testOnStartRequestsAreAdditiveAndOverflowBecomesMaxValue(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>60</index><killingTest>rx.SubscriberTest.testOnStartRequestsAreAdditive(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>slowPath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>53</index><killingTest>rx.SubscriberTest.testOnStartRequestsAreAdditive(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>slowPath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>77</index><killingTest>rx.internal.operators.OnSubscribeFromArrayTest.backpressure(rx.internal.operators.OnSubscribeFromArrayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>slowPath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>83</index><killingTest>rx.internal.operators.OnSubscribeFromArrayTest.backpressure(rx.internal.operators.OnSubscribeFromArrayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>slowPath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>92</index><killingTest>rx.internal.operators.OnSubscribeFromArrayTest.backpressure(rx.internal.operators.OnSubscribeFromArrayTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>slowPath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>slowPath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>slowPath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><killingTest>rx.SubscriberTest.testOnStartRequestsAreAdditive(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>slowPath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>58</index><killingTest>rx.SubscriberTest.testOnStartRequestsAreAdditive(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>slowPath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>63</index><killingTest>rx.internal.operators.OnSubscribeFromArrayTest.backpressure(rx.internal.operators.OnSubscribeFromArrayTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>slowPath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>99</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>slowPath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>116</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>slowPath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>50</index><killingTest>rx.SubscriberTest.testOnStartRequestsAreAdditive(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray$FromArrayProducer</mutatedClass><mutatedMethod>slowPath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>67</index><killingTest>rx.internal.operators.OnSubscribeFromArrayTest.backpressure(rx.internal.operators.OnSubscribeFromArrayTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>120</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>153</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testBackpressure2(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>115</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testBackpressure2(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>166</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testBackpressure2(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testBackpressure2(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testTakeLastEmpty(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testTakeLastEmpty(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testTakeLastEmpty(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>99</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testRequestOverflow(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>120</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>127</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testRequestOverflow(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>133</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testRequestOverflow(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>146</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testRequestOverflow(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>173</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testBackpressure2(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>184</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>190</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>58</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>71</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>76</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>87</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testTakeLastEmpty(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testBackpressure2(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>47</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>startEmitting</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>40</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testTakeLastEmpty(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TakeLastQueueProducer.java</sourceFile><mutatedClass>rx.internal.operators.TakeLastQueueProducer</mutatedClass><mutatedMethod>startEmitting</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testTakeLastEmpty(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>()Lrx/subjects/PublishSubject;</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest>rx.subjects.PublishSubjectTest.testCurrentStateMethodsEmpty(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>getThrowable</mutatedMethod><methodDescription>()Ljava/lang/Throwable;</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.subjects.PublishSubjectTest.testCurrentStateMethodsEmpty(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>getThrowable</mutatedMethod><methodDescription>()Ljava/lang/Throwable;</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest>rx.subjects.PublishSubjectTest.testPublishSubjectValueError(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>getThrowable</mutatedMethod><methodDescription>()Ljava/lang/Throwable;</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><killingTest>rx.subjects.PublishSubjectTest.testCurrentStateMethodsEmpty(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>hasCompleted</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.subjects.PublishSubjectTest.testCurrentStateMethodsEmpty(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>hasCompleted</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.subjects.PublishSubjectTest.testCurrentStateMethodsEmpty(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>hasCompleted</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><killingTest>rx.subjects.PublishSubjectTest.testCurrentStateMethodsEmpty(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>hasObservers</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>7</index><killingTest>rx.subjects.PublishSubjectTest.testPublishSubjectValueError(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>hasObservers</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.subjects.PublishSubjectTest.testPublishSubjectValueError(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>hasObservers</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.subjects.PublishSubjectTest.testPublishSubjectValueError(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>hasThrowable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.subjects.PublishSubjectTest.testCurrentStateMethodsEmpty(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>31</index><killingTest>rx.subjects.PublishSubjectTest.testCurrentStateMethodsEmpty(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>46</index><killingTest>rx.subjects.PublishSubjectTest.testSubscribeMidSequence(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.subjects.PublishSubjectTest.testCurrentStateMethodsEmpty(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest>rx.subjects.PublishSubjectTest.testCurrentStateMethodsEmpty(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>43</index><killingTest>rx.subjects.PublishSubjectTest.testSubscribeMidSequence(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>36</index><killingTest>rx.subjects.PublishSubjectTest.testPublishSubjectValueError(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>76</index><killingTest>rx.subjects.PublishSubjectTest.testOnErrorThrowsDoesntPreventDelivery(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.subjects.PublishSubjectTest.testPublishSubjectValueError(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><killingTest>rx.subjects.PublishSubjectTest.testPublishSubjectValueError(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>59</index><killingTest>rx.subjects.PublishSubjectTest.testOnErrorThrowsDoesntPreventDelivery(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>48</index><killingTest>rx.subjects.PublishSubjectTest.testOnErrorThrowsDoesntPreventDelivery(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>82</index><killingTest>rx.subjects.PublishSubjectTest.testOnErrorThrowsDoesntPreventDelivery(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>18</index><killingTest>rx.subjects.PublishSubjectTest.testCurrentStateMethodsNormal(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>30</index><killingTest>rx.subjects.PublishSubjectTest.testReSubscribe(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><killingTest>rx.subjects.PublishSubjectTest.testCurrentStateMethodsNormal(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest>rx.subjects.PublishSubjectTest.testReSubscribe(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>emitChunk</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>195</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorBufferTest.testBufferStopsWhenUnsubscribed1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>emitChunk</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest>rx.internal.operators.OperatorBufferTest.testBufferStopsWhenUnsubscribed1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>emitChunk</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>201</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><killingTest>rx.internal.operators.OperatorBufferTest.testBufferStopsWhenUnsubscribed1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>emitChunk</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>80</index><killingTest>rx.internal.operators.OperatorBufferTest.testBufferStopsWhenUnsubscribed1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>emitChunk</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>202</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>49</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithTimeSkipTake2(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>emitChunk</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>86</index><killingTest>rx.internal.operators.OperatorBufferTest.testBufferStopsWhenUnsubscribed1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>emitChunk</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>98</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>61</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>157</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>36</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>71</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>163</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>88</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>166</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>97</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>167</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>101</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>49</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>53</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithTimeSkipTake2(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithTimeSkipTake2(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>54</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithTimeSkipTake2(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>62</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>99</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithTimeSkipTake2(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>109</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>58</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>119</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber</mutatedClass><mutatedMethod>startNewChunk</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorBufferTest.testBufferStopsWhenUnsubscribed1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>createCountedSubject</mutatedMethod><methodDescription>()Lrx/internal/operators/OperatorWindowWithSize$CountedSubject;</methodDescription><lineNumber>245</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testSkipAndCountWindowsWithGaps(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>init</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>init</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>237</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testSkipAndCountWindowsWithGaps(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>235</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>238</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>37</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>240</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>46</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>226</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>224</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>227</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>229</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>48</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testSkipAndCountWindowsWithGaps(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>83</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testSkipAndCountWindowsWithGaps(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>195</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>205</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>64</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>89</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testSkipAndCountWindowsWithGaps(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>109</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testWindowUnsubscribeOverlapping(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>120</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>51</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>76</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testSkipAndCountWindowsWithGaps(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>93</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testWindowUnsubscribeOverlapping(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>98</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>124</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testWindowUnsubscribeOverlapping(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>234</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>53</index><killingTest>rx.CompletableTest.ambIterableOneThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>242</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>75</index><killingTest>rx.CompletableTest.ambIterableOneThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>242</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>78</index><killingTest>rx.CompletableTest.ambIterableOneThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>251</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>102</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>127</index><killingTest>rx.CompletableTest.ambIterableOneThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>261</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>131</index><killingTest>rx.CompletableTest.ambIterableEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>269</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>146</index><killingTest>rx.CompletableTest.ambIterableOneThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>269</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>149</index><killingTest>rx.CompletableTest.ambIterableOneThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>278</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>174</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>287</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>199</index><killingTest>rx.CompletableTest.ambIterableOneThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>289</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>213</index><killingTest>rx.CompletableTest.ambIterableWithNull(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>298</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>239</index><killingTest>rx.CompletableTest.ambIterableOneThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>298</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>242</index><killingTest>rx.CompletableTest.ambIterableOneThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>195</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>45</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>235</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>61</index><killingTest>rx.CompletableTest.ambIterableIteratorNull(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>106</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>253</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>111</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>255</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>118</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>262</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>135</index><killingTest>rx.CompletableTest.ambIterableEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>279</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>178</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>280</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>183</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>282</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>190</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>217</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>291</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>222</index><killingTest>rx.CompletableTest.ambIterableWithNull(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>293</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>229</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>303</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>252</index><killingTest>rx.CompletableTest.ambIterableOneThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.util.SubscriptionListTest.testSuccess(rx.internal.util.SubscriptionListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.util.SubscriptionListTest.testException(rx.internal.util.SubscriptionListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.internal.util.SubscriptionListTest.testException(rx.internal.util.SubscriptionListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest>rx.internal.util.SubscriptionListTest.testSuccess(rx.internal.util.SubscriptionListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>78</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>40</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>hasSubscriptions</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>hasSubscriptions</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>hasSubscriptions</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>hasSubscriptions</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>hasSubscriptions</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>hasSubscriptions</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>48</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.observers.TestSubscriberTest.testUnsubscribed(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>60</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>64</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.util.SubscriptionListTest.testSuccess(rx.internal.util.SubscriptionListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.internal.util.SubscriptionListTest.testSuccess(rx.internal.util.SubscriptionListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>57</index><killingTest>rx.internal.util.SubscriptionListTest.testSuccess(rx.internal.util.SubscriptionListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>unsubscribeFromAll</mutatedMethod><methodDescription>(Ljava/util/Collection;)V</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.util.SubscriptionListTest.testSuccess(rx.internal.util.SubscriptionListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>unsubscribeFromAll</mutatedMethod><methodDescription>(Ljava/util/Collection;)V</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest>rx.internal.util.SubscriptionListTest.testSuccess(rx.internal.util.SubscriptionListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>unsubscribeFromAll</mutatedMethod><methodDescription>(Ljava/util/Collection;)V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>41</index><killingTest>rx.internal.util.SubscriptionListTest.testException(rx.internal.util.SubscriptionListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>unsubscribeFromAll</mutatedMethod><methodDescription>(Ljava/util/Collection;)V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest>rx.internal.util.SubscriptionListTest.testSuccess(rx.internal.util.SubscriptionListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubscriptionList.java</sourceFile><mutatedClass>rx.internal.util.SubscriptionList</mutatedClass><mutatedMethod>unsubscribeFromAll</mutatedMethod><methodDescription>(Ljava/util/Collection;)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>63</index><killingTest>rx.internal.util.SubscriptionListTest.testException(rx.internal.util.SubscriptionListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>50</index><killingTest>rx.CompletableTest.mergeDelayErrorIterableEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>67</index><killingTest>rx.CompletableTest.mergeDelayErrorIterableEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>94</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>99</index><killingTest>rx.CompletableTest.mergeDelayErrorIterableIteratorHasNextThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>120</index><killingTest>rx.CompletableTest.mergeDelayErrorIterableEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>129</index><killingTest>rx.CompletableTest.mergeDelayErrorIterableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>157</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>162</index><killingTest>rx.CompletableTest.mergeDelayErrorIterableIteratorNextThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>184</index><killingTest>rx.CompletableTest.mergeDelayErrorIterableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>192</index><killingTest>rx.CompletableTest.mergeDelayErrorIterableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>210</index><killingTest>rx.CompletableTest.mergeDelayErrorIterableWithNull(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>215</index><killingTest>rx.CompletableTest.mergeDelayErrorIterableWithNull(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>258</index><killingTest>rx.CompletableTest.mergeDelayErrorIterableEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>263</index><killingTest>rx.CompletableTest.mergeDelayErrorIterableOneThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>42</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>58</index><killingTest>rx.CompletableTest.mergeDelayErrorIterableIteratorNull(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>103</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>111</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>166</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>174</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>219</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>227</index><killingTest>rx.CompletableTest.mergeDelayErrorIterableWithNull(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>249</index><killingTest>rx.CompletableTest.mergeDelayErrorIterableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>267</index><killingTest>rx.CompletableTest.mergeDelayErrorIterableEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>275</index><killingTest>rx.CompletableTest.mergeDelayErrorIterableManyOneThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>run</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>24</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testCancelledTasksDontRun(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>run</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testCancelledTasksDontRun(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>run</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>run</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testCancelledTasksDontRun(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>78</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testCancelledTasksDontRun(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>25</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testCancelledWorkerDoesntRunTasks(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>44</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>57</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>69</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testSequenceOfDelayedActions(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testNoTimedTaskPartRetention(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testNoTimedTaskPartRetention(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testNoPeriodicTimedTaskPartRetention(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>128</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testNoTimedTaskPartRetention(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>60</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testCancelledTaskRetention(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>66</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testNoTimedTaskPartRetention(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>93</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testCancelledTaskRetention(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>106</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testCancelledTaskRetention(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>157</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>119</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testCancelledWorkerDoesntRunTasks(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>getErrorHandler</mutatedMethod><methodDescription>()Lrx/plugins/RxJavaErrorHandler;</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.plugins.RxJavaPluginsTest.testErrorHandlerDefaultImpl(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>getErrorHandler</mutatedMethod><methodDescription>()Lrx/plugins/RxJavaErrorHandler;</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.plugins.RxJavaPluginsTest.testErrorHandlerDefaultImpl(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>getErrorHandler</mutatedMethod><methodDescription>()Lrx/plugins/RxJavaErrorHandler;</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>43</index><killingTest>rx.plugins.RxJavaPluginsTest.testErrorHandlerDefaultImpl(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>getInstance</mutatedMethod><methodDescription>()Lrx/plugins/RxJavaPlugins;</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.plugins.RxJavaPluginsTest.testErrorHandlerDefaultImpl(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>getObservableExecutionHook</mutatedMethod><methodDescription>()Lrx/plugins/RxJavaObservableExecutionHook;</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.plugins.RxJavaPluginsTest.testObservableExecutionHookDefaultImpl(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>getObservableExecutionHook</mutatedMethod><methodDescription>()Lrx/plugins/RxJavaObservableExecutionHook;</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.plugins.RxJavaPluginsTest.testObservableExecutionHookDefaultImpl(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>getObservableExecutionHook</mutatedMethod><methodDescription>()Lrx/plugins/RxJavaObservableExecutionHook;</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>43</index><killingTest>rx.plugins.RxJavaPluginsTest.testObservableExecutionHookDefaultImpl(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>getPluginImplementationViaProperty</mutatedMethod><methodDescription>(Ljava/lang/Class;Ljava/util/Properties;)Ljava/lang/Object;</methodDescription><lineNumber>183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>92</index><killingTest>rx.plugins.RxJavaPluginsTest.testShortPluginDiscovery(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>getPluginImplementationViaProperty</mutatedMethod><methodDescription>(Ljava/lang/Class;Ljava/util/Properties;)Ljava/lang/Object;</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest>rx.plugins.RxJavaPluginsTest.testShortPluginDiscovery(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>getPluginImplementationViaProperty</mutatedMethod><methodDescription>(Ljava/lang/Class;Ljava/util/Properties;)Ljava/lang/Object;</methodDescription><lineNumber>177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><killingTest>rx.plugins.RxJavaPluginsTest.testShortPluginDiscovery(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>getPluginImplementationViaProperty</mutatedMethod><methodDescription>(Ljava/lang/Class;Ljava/util/Properties;)Ljava/lang/Object;</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>67</index><killingTest>rx.plugins.RxJavaPluginsTest.testShortPluginDiscovery(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>getPluginImplementationViaProperty</mutatedMethod><methodDescription>(Ljava/lang/Class;Ljava/util/Properties;)Ljava/lang/Object;</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>71</index><killingTest>rx.plugins.RxJavaPluginsTest.testShortPluginDiscovery(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>getPluginImplementationViaProperty</mutatedMethod><methodDescription>(Ljava/lang/Class;Ljava/util/Properties;)Ljava/lang/Object;</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>83</index><killingTest>rx.plugins.RxJavaPluginsTest.testShortPluginDiscovery(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>getPluginImplementationViaProperty</mutatedMethod><methodDescription>(Ljava/lang/Class;Ljava/util/Properties;)Ljava/lang/Object;</methodDescription><lineNumber>189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>120</index><killingTest>rx.plugins.RxJavaPluginsTest.testShortPluginDiscovery(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>getPluginImplementationViaProperty</mutatedMethod><methodDescription>(Ljava/lang/Class;Ljava/util/Properties;)Ljava/lang/Object;</methodDescription><lineNumber>199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>147</index><killingTest>rx.plugins.RxJavaPluginsTest.testErrorHandlerDefaultImpl(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>getPluginImplementationViaProperty</mutatedMethod><methodDescription>(Ljava/lang/Class;Ljava/util/Properties;)Ljava/lang/Object;</methodDescription><lineNumber>204</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>164</index><killingTest>rx.plugins.RxJavaPluginsTest.testErrorHandlerViaProperty(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>getPluginImplementationViaProperty</mutatedMethod><methodDescription>(Ljava/lang/Class;Ljava/util/Properties;)Ljava/lang/Object;</methodDescription><lineNumber>216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>256</index><killingTest>rx.plugins.RxJavaPluginsTest.testErrorHandlerDefaultImpl(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>getSchedulersHook</mutatedMethod><methodDescription>()Lrx/plugins/RxJavaSchedulersHook;</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.schedulers.NewThreadSchedulerTest.testRecursiveExecution(rx.schedulers.NewThreadSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>getSchedulersHook</mutatedMethod><methodDescription>()Lrx/plugins/RxJavaSchedulersHook;</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.schedulers.CachedThreadSchedulerTest.testNestedScheduling(rx.schedulers.CachedThreadSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>getSchedulersHook</mutatedMethod><methodDescription>()Lrx/plugins/RxJavaSchedulersHook;</methodDescription><lineNumber>242</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>43</index><killingTest>rx.schedulers.NewThreadSchedulerTest.testRecursiveExecution(rx.schedulers.NewThreadSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>registerErrorHandler</mutatedMethod><methodDescription>(Lrx/plugins/RxJavaErrorHandler;)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.plugins.RxJavaPluginsTest.testErrorHandlerViaRegisterMethod(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>registerObservableExecutionHook</mutatedMethod><methodDescription>(Lrx/plugins/RxJavaObservableExecutionHook;)V</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.plugins.RxJavaPluginsTest.testObservableExecutionHookViaRegisterMethod(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>registerSchedulersHook</mutatedMethod><methodDescription>(Lrx/plugins/RxJavaSchedulersHook;)V</methodDescription><lineNumber>256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>reset</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.plugins.RxJavaPluginsTest.testOnNextValueRenderingWhenImplementedAndNotManaged(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>reset</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>RxJavaPlugins.java</sourceFile><mutatedClass>rx.plugins.RxJavaPlugins</mutatedClass><mutatedMethod>reset</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorTimestampTest.timestampWithScheduler2(rx.internal.operators.OperatorTimestampTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorTimestampTest.timestampWithScheduler2(rx.internal.operators.OperatorTimestampTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest>rx.internal.operators.OperatorTimestampTest.timestampWithScheduler2(rx.internal.operators.OperatorTimestampTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><killingTest>rx.internal.operators.OperatorTimestampTest.timestampWithScheduler2(rx.internal.operators.OperatorTimestampTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>52</index><killingTest>rx.internal.operators.OperatorTimestampTest.timestampWithScheduler2(rx.internal.operators.OperatorTimestampTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>57</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>70</index><killingTest>rx.internal.operators.OperatorTimestampTest.timestampWithScheduler2(rx.internal.operators.OperatorTimestampTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>46</index><killingTest>rx.internal.operators.OperatorTimestampTest.timestampWithScheduler2(rx.internal.operators.OperatorTimestampTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>61</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>74</index><killingTest>rx.internal.operators.OperatorTimestampTest.timestampWithScheduler2(rx.internal.operators.OperatorTimestampTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>79</index><killingTest>rx.internal.operators.OperatorTimestampTest.timestampWithScheduler2(rx.internal.operators.OperatorTimestampTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>getTimestampMillis</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>36</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>45</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>41</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>46</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Timestamped.java</sourceFile><mutatedClass>rx.schedulers.Timestamped</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorTimeIntervalTest.testTimeInterval(rx.internal.operators.OperatorTimeIntervalTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorTimeIntervalTest.testTimeInterval(rx.internal.operators.OperatorTimeIntervalTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest>rx.internal.operators.OperatorTimeIntervalTest.testTimeInterval(rx.internal.operators.OperatorTimeIntervalTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>44</index><killingTest>rx.internal.operators.OperatorTimeIntervalTest.testTimeInterval(rx.internal.operators.OperatorTimeIntervalTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>54</index><killingTest>rx.internal.operators.OperatorTimeIntervalTest.testTimeInterval(rx.internal.operators.OperatorTimeIntervalTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>59</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>72</index><killingTest>rx.internal.operators.OperatorTimeIntervalTest.testTimeInterval(rx.internal.operators.OperatorTimeIntervalTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>48</index><killingTest>rx.internal.operators.OperatorTimeIntervalTest.testTimeInterval(rx.internal.operators.OperatorTimeIntervalTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>63</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>76</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>81</index><killingTest>rx.internal.operators.OperatorTimeIntervalTest.testTimeInterval(rx.internal.operators.OperatorTimeIntervalTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>getIntervalInMilliseconds</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>41</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>46</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>TimeInterval.java</sourceFile><mutatedClass>rx.schedulers.TimeInterval</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>50</index><killingTest>rx.CompletableTest.mergeIterableEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>67</index><killingTest>rx.CompletableTest.mergeIterableEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>94</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>116</index><killingTest>rx.CompletableTest.mergeIterableEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>125</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>153</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>176</index><killingTest>rx.CompletableTest.mergeIterableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>184</index><killingTest>rx.CompletableTest.mergeIterableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>202</index><killingTest>rx.CompletableTest.mergeIterableWithNull(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>246</index><killingTest>rx.CompletableTest.mergeIterableEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>253</index><killingTest>rx.CompletableTest.mergeIterableEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>40</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>42</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>58</index><killingTest>rx.CompletableTest.mergeIterableIteratorNull(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>87</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>99</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>107</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>146</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>158</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>166</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>188</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>207</index><killingTest>rx.CompletableTest.mergeIterableWithNull(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>215</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>237</index><killingTest>rx.CompletableTest.mergeIterableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>257</index><killingTest>rx.CompletableTest.mergeIterableEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>_onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest>rx.observers.SafeSubscriberTest.testPluginExceptionWhenUnsubscribing2(rx.observers.SafeSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>_onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest>rx.plugins.RxJavaPluginsTest.testOnErrorWhenImplementedViaSubscribe(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>_onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>157</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.observers.SafeSubscriberTest.testPluginExceptionWhileOnErrorThrows(rx.observers.SafeSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>_onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest>rx.observers.SafeObserverTest.onErrorNotImplementedFailureWithUnsubscribeFailure(rx.observers.SafeObserverTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>_onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>37</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>_onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>184</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>69</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>_onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>73</index><killingTest>rx.observers.SafeObserverTest.onErrorFailureWithUnsubscribeFailure(rx.observers.SafeObserverTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>_onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>84</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>_onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>136</index><killingTest>rx.observers.SafeSubscriberTest.testPluginExceptionWhileOnErrorUnsubscribeThrows(rx.observers.SafeSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>_onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>147</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>getActual</mutatedMethod><methodDescription>()Lrx/Subscriber;</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.observers.SafeObserverTest.testActual(rx.observers.SafeObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observers.SafeSubscriberTest.testOnCompletedThrows2(rx.observers.SafeSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest>rx.observers.SafeSubscriberTest.testPluginException(rx.observers.SafeSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.observers.SafeSubscriberTest.testPluginErrorHandlerReceivesExceptionWhenUnsubscribeAfterCompletionThrows(rx.observers.SafeSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest>rx.observers.SafeSubscriberTest.testPluginErrorHandlerReceivesExceptionWhenUnsubscribeAfterCompletionThrows(rx.observers.SafeSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>47</index><killingTest>rx.observers.SafeSubscriberTest.testOnCompletedThrows2(rx.observers.SafeSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>51</index><killingTest>rx.observers.SafeSubscriberTest.testPluginErrorHandlerReceivesExceptionFromFailingUnsubscribeAfterCompletionThrows(rx.observers.SafeSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>68</index><killingTest>rx.observers.SafeSubscriberTest.testOnCompletedThrows2(rx.observers.SafeSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>79</index><killingTest>rx.observers.SafeSubscriberTest.testPluginErrorHandlerReceivesExceptionFromFailingUnsubscribeAfterCompletionThrows(rx.observers.SafeSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.observers.SafeSubscriberTest.testPluginExceptionWhileOnErrorUnsubscribeThrows(rx.observers.SafeSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.observers.SafeSubscriberTest.testPluginExceptionWhileOnErrorUnsubscribeThrows(rx.observers.SafeSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observers.SafeObserverTest.onNextFailureSafe(rx.observers.SafeObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.observers.SafeObserverTest.onNextFailureSafe(rx.observers.SafeObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SafeSubscriber.java</sourceFile><mutatedClass>rx.observers.SafeSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.observers.SafeObserverTest.onNextFailureSafe(rx.observers.SafeObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer</mutatedClass><mutatedMethod>enterTransform</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>1148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer</mutatedClass><mutatedMethod>leaveTransform</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>1153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer</mutatedClass><mutatedMethod>truncate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1166</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>37</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer</mutatedClass><mutatedMethod>truncate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>73</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer</mutatedClass><mutatedMethod>truncate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1167</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>40</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer</mutatedClass><mutatedMethod>truncate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>76</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer</mutatedClass><mutatedMethod>truncate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer</mutatedClass><mutatedMethod>truncate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>47</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer</mutatedClass><mutatedMethod>truncate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>83</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer</mutatedClass><mutatedMethod>truncate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer</mutatedClass><mutatedMethod>truncate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1166</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer</mutatedClass><mutatedMethod>truncate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>73</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer</mutatedClass><mutatedMethod>truncate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>102</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer</mutatedClass><mutatedMethod>truncate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1187</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>107</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer</mutatedClass><mutatedMethod>truncateFinal</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer</mutatedClass><mutatedMethod>truncateFinal</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1201</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>47</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer</mutatedClass><mutatedMethod>truncateFinal</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1202</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>50</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer</mutatedClass><mutatedMethod>truncateFinal</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1192</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorReplayTest.testWindowedReplay(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer</mutatedClass><mutatedMethod>truncateFinal</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1203</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>57</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer</mutatedClass><mutatedMethod>truncateFinal</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer</mutatedClass><mutatedMethod>truncateFinal</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer</mutatedClass><mutatedMethod>truncateFinal</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1201</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>47</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer</mutatedClass><mutatedMethod>truncateFinal</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>76</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeAndTimeBoundReplayBuffer</mutatedClass><mutatedMethod>truncateFinal</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>81</index><killingTest>rx.internal.operators.OperatorReplayTest.testTimedAndSizedTruncation(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Z</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.observers.TestObserverTest.testAssertTerminalEventNotReceived(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Z</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Z</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Z</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>46</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Z</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest>rx.subjects.AsyncSubjectTest.testSubscribeAfterCompleted(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Z</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>42</index><killingTest>rx.subjects.BehaviorSubjectTest.testThatObserverReceivesDefaultValueAndSubsequentEvents(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager</mutatedClass><mutatedMethod>addUnsubscriber</mutatedMethod><methodDescription>(Lrx/Subscriber;Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.subjects.ReplaySubjectTest.testSubscriptionLeak(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest>rx.observers.TestObserverTest.testAssertTerminalEventNotReceived(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><killingTest>rx.observers.TestObserverTest.testAssertTerminalEventNotReceived(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.subjects.ReplaySubjectTest.testSubscriptionLeak(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.subjects.ReplaySubjectTest.testSubscriptionLeak(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager</mutatedClass><mutatedMethod>getLatest</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.subjects.PublishSubjectTest.testCurrentStateMethodsEmpty(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(Ljava/lang/Object;)[Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectValueRelay(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(Ljava/lang/Object;)[Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectValueRelayIncomplete(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager</mutatedClass><mutatedMethod>observers</mutatedMethod><methodDescription>()[Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.subjects.BehaviorSubjectTest.testBehaviorSubjectIncompleteEmpty(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.subjects.ReplaySubjectTest.testSubscriptionLeak(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest>rx.subjects.ReplaySubjectTest.testSubscriptionLeak(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager</mutatedClass><mutatedMethod>terminate</mutatedMethod><methodDescription>(Ljava/lang/Object;)[Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest>rx.subjects.AsyncSubjectTest.testEmptySubjectCompleted(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager</mutatedClass><mutatedMethod>terminate</mutatedMethod><methodDescription>(Ljava/lang/Object;)[Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager</mutatedClass><mutatedMethod>terminate</mutatedMethod><methodDescription>(Ljava/lang/Object;)[Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>34</index><killingTest>rx.subjects.PublishSubjectTest.testCurrentStateMethodsEmpty(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager</mutatedClass><mutatedMethod>terminate</mutatedMethod><methodDescription>(Ljava/lang/Object;)[Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.subjects.PublishSubjectTest.testCurrentStateMethodsEmpty(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber</mutatedClass><mutatedMethod>expire</mutatedMethod><methodDescription>(ILrx/Subscription;)V</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber</mutatedClass><mutatedMethod>expire</mutatedMethod><methodDescription>(ILrx/Subscription;)V</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber</mutatedClass><mutatedMethod>expire</mutatedMethod><methodDescription>(ILrx/Subscription;)V</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber</mutatedClass><mutatedMethod>expire</mutatedMethod><methodDescription>(ILrx/Subscription;)V</methodDescription><lineNumber>219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>54</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber</mutatedClass><mutatedMethod>expire</mutatedMethod><methodDescription>(ILrx/Subscription;)V</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>60</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber</mutatedClass><mutatedMethod>expire</mutatedMethod><methodDescription>(ILrx/Subscription;)V</methodDescription><lineNumber>221</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>66</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber</mutatedClass><mutatedMethod>expire</mutatedMethod><methodDescription>(ILrx/Subscription;)V</methodDescription><lineNumber>223</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>75</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>279</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.normal1(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>279</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>283</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>54</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.normal1(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>284</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>60</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.normal1(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>285</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>66</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>287</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>75</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>270</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.rightDurationSelectorThrows(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>271</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>133</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>232</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>17</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.normal1WithDuration(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>251</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>121</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.resultSelectorThrows(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>133</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.resultSelectorThrows(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>258</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>170</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.resultSelectorThrows(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>237</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>63</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>244</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>88</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>190</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.normal1(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>264</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>206</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.rightDurationSelectorThrows(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;I)V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>50</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;I)V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>56</index><killingTest>rx.CompletableTest.concatObservablePrefetch(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber</mutatedClass><mutatedMethod>innerComplete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber</mutatedClass><mutatedMethod>innerComplete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.CompletableTest.concatObservablePrefetch(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber</mutatedClass><mutatedMethod>innerComplete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber</mutatedClass><mutatedMethod>innerComplete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest>rx.CompletableTest.concatObservablePrefetch(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber</mutatedClass><mutatedMethod>innerError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber</mutatedClass><mutatedMethod>innerError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest>rx.CompletableTest.concatObservableSingleThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.CompletableTest.concatObservableSingleThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.CompletableTest.concatObservableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest>rx.CompletableTest.concatObservableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest>rx.CompletableTest.concatObservableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>47</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>57</index><killingTest>rx.CompletableTest.concatObservableSingleThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.CompletableTest.concatObservableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.CompletableTest.concatObservableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.CompletableTest.concatObservableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.CompletableTest.concatObservableSingleThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.CompletableTest.concatObservableSingleThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Completable;)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.CompletableTest.concatObservableSingleThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Completable;)V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest>rx.CompletableTest.concatObservableSingleThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Completable;)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Completable;)V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest>rx.CompletableTest.concatObservableSingleThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>82</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>124</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestOverflowThroughBufferWithSize3(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>67</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>74</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestThroughBufferWithSize3(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>80</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestThroughBufferWithSize3(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>107</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestThroughBufferWithSize3(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>108</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestThroughBufferWithSize3(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>109</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestThroughBufferWithSize3(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>122</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestThroughBufferWithSize3(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>143</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestThroughBufferWithSize3(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestThroughBufferWithSize4(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestThroughBufferWithSize4(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestThroughBufferWithSize4(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>157</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>46</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestThroughBufferWithSize3(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>57</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestThroughBufferWithSize3(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>82</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestThroughBufferWithSize3(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>124</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestThroughBufferWithSize3(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>50</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestThroughBufferWithSize4(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>86</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestOverflowThroughBufferWithSize2(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>110</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestThroughBufferWithSize3(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>128</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestOverflowThroughBufferWithSize3(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>144</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestThroughBufferWithSize3(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2$1</mutatedClass><mutatedMethod>requestInfinite</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestThroughBufferWithSize4(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$State</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>15</index><killingTest>rx.observers.TestObserverTest.testAssertTerminalEventNotReceived(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$State</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>41</index><killingTest>rx.observers.TestObserverTest.testAssertTerminalEventNotReceived(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$State</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;</methodDescription><lineNumber>163</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest>rx.subjects.AsyncSubjectTest.testOnErrorThrowsDoesntPreventDelivery(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$State</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>54</index><killingTest>rx.subjects.PublishSubjectTest.testCompletedStopsEmittingData(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$State</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>106</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$State</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;</methodDescription><lineNumber>184</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>82</index><killingTest>rx.subjects.PublishSubjectTest.testCompletedStopsEmittingData(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$State</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>88</index><killingTest>rx.subjects.PublishSubjectTest.testCompletedStopsEmittingData(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$State</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>39</index><killingTest>rx.subjects.PublishSubjectTest.testCompletedStopsEmittingData(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$State</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;</methodDescription><lineNumber>181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>71</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$State</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>105</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$State</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.subjects.PublishSubjectTest.testCompletedStopsEmittingData(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$State</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$State</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest>rx.subjects.ReplaySubjectTest.testCompletedStopsEmittingData(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$State</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>54</index><killingTest>rx.subjects.PublishSubjectTest.testCompletedStopsEmittingData(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$State</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>65</index><killingTest>rx.subjects.PublishSubjectTest.testCompletedStopsEmittingData(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$State</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;</methodDescription><lineNumber>181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>72</index><killingTest>rx.subjects.ReplaySubjectTest.testCompletedStopsEmittingData(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$State</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;</methodDescription><lineNumber>187</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>94</index><killingTest>rx.subjects.PublishSubjectTest.testCompletedStopsEmittingData(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$State</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>106</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$State</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>24</index><killingTest>rx.subjects.ReplaySubjectTest.testSubscriptionLeak(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$State</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>33</index><killingTest>rx.subjects.BehaviorSubjectTest.testTakeOneSubscriber(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$State</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>76</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$State</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>98</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$State</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;</methodDescription><lineNumber>195</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>133</index><killingTest>rx.subjects.PublishSubjectTest.testCompletedStopsEmittingData(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$State</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)Lrx/subjects/SubjectSubscriptionManager$State;</methodDescription><lineNumber>192</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>119</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber</mutatedClass><mutatedMethod>expire</mutatedMethod><methodDescription>(ILrx/Subscription;)V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber</mutatedClass><mutatedMethod>expire</mutatedMethod><methodDescription>(ILrx/Subscription;)V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber</mutatedClass><mutatedMethod>expire</mutatedMethod><methodDescription>(ILrx/Subscription;)V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.normal1WithDuration(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber</mutatedClass><mutatedMethod>expire</mutatedMethod><methodDescription>(ILrx/Subscription;)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>54</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.normal1WithDuration(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber</mutatedClass><mutatedMethod>expire</mutatedMethod><methodDescription>(ILrx/Subscription;)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>60</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber</mutatedClass><mutatedMethod>expire</mutatedMethod><methodDescription>(ILrx/Subscription;)V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>66</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber</mutatedClass><mutatedMethod>expire</mutatedMethod><methodDescription>(ILrx/Subscription;)V</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>75</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>167</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.normal2(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>167</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.normal2(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>54</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.normal2(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>60</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>66</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>75</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.leftDurationThrows(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>120</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>17</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.resultSelectorThrows(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>108</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.normal1(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>120</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.normal1WithDuration(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>157</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.normal1(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>75</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>177</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.normal1WithDuration(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>193</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.leftDurationSelectorThrows(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable$IterableProducer</mutatedClass><mutatedMethod>fastpath</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testSubscribeMultipleTimes(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable$IterableProducer</mutatedClass><mutatedMethod>fastpath</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testSubscribeMultipleTimes(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable$IterableProducer</mutatedClass><mutatedMethod>fastpath</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testNoBackpressure(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable$IterableProducer</mutatedClass><mutatedMethod>fastpath</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testSubscribeMultipleTimes(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable$IterableProducer</mutatedClass><mutatedMethod>fastpath</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>42</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testNoBackpressure(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable$IterableProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable$IterableProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testSubscribeMultipleTimes(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable$IterableProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable$IterableProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testSubscribeMultipleTimes(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable$IterableProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable$IterableProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>40</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable$IterableProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testSubscribeMultipleTimes(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable$IterableProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>45</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable$IterableProducer</mutatedClass><mutatedMethod>slowpath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>44</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable$IterableProducer</mutatedClass><mutatedMethod>slowpath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>74</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable$IterableProducer</mutatedClass><mutatedMethod>slowpath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>39</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable$IterableProducer</mutatedClass><mutatedMethod>slowpath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable$IterableProducer</mutatedClass><mutatedMethod>slowpath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable$IterableProducer</mutatedClass><mutatedMethod>slowpath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>44</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable$IterableProducer</mutatedClass><mutatedMethod>slowpath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>57</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable$IterableProducer</mutatedClass><mutatedMethod>slowpath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>82</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable$IterableProducer</mutatedClass><mutatedMethod>slowpath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>50</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable$IterableProducer</mutatedClass><mutatedMethod>slowpath</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>61</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions</mutatedClass><mutatedMethod>empty</mutatedMethod><methodDescription>()Lrx/functions/Actions$EmptyAction;</methodDescription><lineNumber>28</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.functions.ActionsTest.testEmptyArities(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions</mutatedClass><mutatedMethod>toFunc</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/functions/Func0;</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.functions.ActionsTest.testToFunc0(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions</mutatedClass><mutatedMethod>toFunc</mutatedMethod><methodDescription>(Lrx/functions/Action0;Ljava/lang/Object;)Lrx/functions/Func0;</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.functions.ActionsTest.testToFunc0(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions</mutatedClass><mutatedMethod>toFunc</mutatedMethod><methodDescription>(Lrx/functions/Action1;)Lrx/functions/Func1;</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.functions.ActionsTest.testToFunc1(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions</mutatedClass><mutatedMethod>toFunc</mutatedMethod><methodDescription>(Lrx/functions/Action1;Ljava/lang/Object;)Lrx/functions/Func1;</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.functions.ActionsTest.testToFunc1(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions</mutatedClass><mutatedMethod>toFunc</mutatedMethod><methodDescription>(Lrx/functions/Action2;)Lrx/functions/Func2;</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.functions.ActionsTest.testToFunc2(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions</mutatedClass><mutatedMethod>toFunc</mutatedMethod><methodDescription>(Lrx/functions/Action2;Ljava/lang/Object;)Lrx/functions/Func2;</methodDescription><lineNumber>269</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.functions.ActionsTest.testToFunc2(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions</mutatedClass><mutatedMethod>toFunc</mutatedMethod><methodDescription>(Lrx/functions/Action3;)Lrx/functions/Func3;</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.functions.ActionsTest.testToFunc3(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions</mutatedClass><mutatedMethod>toFunc</mutatedMethod><methodDescription>(Lrx/functions/Action3;Ljava/lang/Object;)Lrx/functions/Func3;</methodDescription><lineNumber>288</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.functions.ActionsTest.testToFunc3(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions</mutatedClass><mutatedMethod>toFunc</mutatedMethod><methodDescription>(Lrx/functions/Action4;)Lrx/functions/Func4;</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.functions.ActionsTest.testToFunc4(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions</mutatedClass><mutatedMethod>toFunc</mutatedMethod><methodDescription>(Lrx/functions/Action4;Ljava/lang/Object;)Lrx/functions/Func4;</methodDescription><lineNumber>307</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.functions.ActionsTest.testToFunc4(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions</mutatedClass><mutatedMethod>toFunc</mutatedMethod><methodDescription>(Lrx/functions/Action5;)Lrx/functions/Func5;</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.functions.ActionsTest.testToFunc5(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions</mutatedClass><mutatedMethod>toFunc</mutatedMethod><methodDescription>(Lrx/functions/Action5;Ljava/lang/Object;)Lrx/functions/Func5;</methodDescription><lineNumber>327</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.functions.ActionsTest.testToFunc5(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions</mutatedClass><mutatedMethod>toFunc</mutatedMethod><methodDescription>(Lrx/functions/Action6;)Lrx/functions/Func6;</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.functions.ActionsTest.testToFunc6(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions</mutatedClass><mutatedMethod>toFunc</mutatedMethod><methodDescription>(Lrx/functions/Action6;Ljava/lang/Object;)Lrx/functions/Func6;</methodDescription><lineNumber>347</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.functions.ActionsTest.testToFunc6(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions</mutatedClass><mutatedMethod>toFunc</mutatedMethod><methodDescription>(Lrx/functions/Action7;)Lrx/functions/Func7;</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.functions.ActionsTest.testToFunc7(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions</mutatedClass><mutatedMethod>toFunc</mutatedMethod><methodDescription>(Lrx/functions/Action7;Ljava/lang/Object;)Lrx/functions/Func7;</methodDescription><lineNumber>367</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.functions.ActionsTest.testToFunc7(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions</mutatedClass><mutatedMethod>toFunc</mutatedMethod><methodDescription>(Lrx/functions/Action8;)Lrx/functions/Func8;</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.functions.ActionsTest.testToFunc8(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions</mutatedClass><mutatedMethod>toFunc</mutatedMethod><methodDescription>(Lrx/functions/Action8;Ljava/lang/Object;)Lrx/functions/Func8;</methodDescription><lineNumber>387</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.functions.ActionsTest.testToFunc8(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions</mutatedClass><mutatedMethod>toFunc</mutatedMethod><methodDescription>(Lrx/functions/Action9;)Lrx/functions/Func9;</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.functions.ActionsTest.testToFunc9(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions</mutatedClass><mutatedMethod>toFunc</mutatedMethod><methodDescription>(Lrx/functions/Action9;Ljava/lang/Object;)Lrx/functions/Func9;</methodDescription><lineNumber>407</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.functions.ActionsTest.testToFunc9(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions</mutatedClass><mutatedMethod>toFunc</mutatedMethod><methodDescription>(Lrx/functions/ActionN;)Lrx/functions/FuncN;</methodDescription><lineNumber>218</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.functions.ActionsTest.testToFuncN(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions</mutatedClass><mutatedMethod>toFunc</mutatedMethod><methodDescription>(Lrx/functions/ActionN;Ljava/lang/Object;)Lrx/functions/FuncN;</methodDescription><lineNumber>427</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.functions.ActionsTest.testToFuncN(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscArrayQueue</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscArrayQueue</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscArrayQueue</mutatedClass><mutatedMethod>lvConsumerIndex</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>184</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscArrayQueue</mutatedClass><mutatedMethod>lvProducerIndex</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>47</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscArrayQueueNull(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>40</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>59</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>48</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscArrayQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>55</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscArrayQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>39</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest>rx.internal.util.RxRingBufferSpscTest.addAndPollFailBackpressure(rx.internal.util.RxRingBufferSpscTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>32</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>51</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>40</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscArrayQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>47</index><killingTest>rx.internal.util.RxRingBufferSpscTest.addAndPollFailBackpressure(rx.internal.util.RxRingBufferSpscTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscArrayQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>31</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpscArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscArrayQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscArrayQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>33</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscArrayQueue</mutatedClass><mutatedMethod>soConsumerIndex</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscArrayQueue</mutatedClass><mutatedMethod>soProducerIndex</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestObserver.java</sourceFile><mutatedClass>rx.observers.TestObserver</mutatedClass><mutatedMethod>assertReceivedOnNext</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>40</index><killingTest>rx.observers.TestObserverTest.testAssertTerminalEventNotReceived(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestObserver.java</sourceFile><mutatedClass>rx.observers.TestObserver</mutatedClass><mutatedMethod>assertReceivedOnNext</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>136</index><killingTest>rx.observers.TestObserverTest.testAssertNotMatchValue(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestObserver.java</sourceFile><mutatedClass>rx.observers.TestObserver</mutatedClass><mutatedMethod>assertReceivedOnNext</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.observers.TestObserverTest.testAssertNotMatchValue(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestObserver.java</sourceFile><mutatedClass>rx.observers.TestObserver</mutatedClass><mutatedMethod>assertReceivedOnNext</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>40</index><killingTest>rx.observers.TestObserverTest.testNullActual(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestObserver.java</sourceFile><mutatedClass>rx.observers.TestObserver</mutatedClass><mutatedMethod>assertReceivedOnNext</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>57</index><killingTest>rx.observers.TestObserverTest.testNullActual(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestObserver.java</sourceFile><mutatedClass>rx.observers.TestObserver</mutatedClass><mutatedMethod>assertReceivedOnNext</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>61</index><killingTest>rx.observers.TestObserverTest.testNullExpected(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestObserver.java</sourceFile><mutatedClass>rx.observers.TestObserver</mutatedClass><mutatedMethod>assertReceivedOnNext</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>88</index><killingTest>rx.observers.TestObserverTest.testNullActual(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestObserver.java</sourceFile><mutatedClass>rx.observers.TestObserver</mutatedClass><mutatedMethod>assertReceivedOnNext</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>117</index><killingTest>rx.observers.TestObserverTest.testNullActual(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestObserver.java</sourceFile><mutatedClass>rx.observers.TestObserver</mutatedClass><mutatedMethod>assertTerminalEvent</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorIgnoreElementsTest.testErrorReceived(rx.internal.operators.OperatorIgnoreElementsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestObserver.java</sourceFile><mutatedClass>rx.observers.TestObserver</mutatedClass><mutatedMethod>assertTerminalEvent</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>31</index><killingTest>rx.observers.TestObserverTest.testAssert(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestObserver.java</sourceFile><mutatedClass>rx.observers.TestObserver</mutatedClass><mutatedMethod>assertTerminalEvent</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.observers.TestObserverTest.testTerminalErrorOnce(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestObserver.java</sourceFile><mutatedClass>rx.observers.TestObserver</mutatedClass><mutatedMethod>assertTerminalEvent</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest>rx.observers.TestObserverTest.testTerminalCompletedOnce(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestObserver.java</sourceFile><mutatedClass>rx.observers.TestObserver</mutatedClass><mutatedMethod>assertTerminalEvent</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>55</index><killingTest>rx.observers.TestObserverTest.testTerminalOneKind(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestObserver.java</sourceFile><mutatedClass>rx.observers.TestObserver</mutatedClass><mutatedMethod>assertTerminalEvent</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>60</index><killingTest>rx.observers.TestObserverTest.testTerminalOneKind(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestObserver.java</sourceFile><mutatedClass>rx.observers.TestObserver</mutatedClass><mutatedMethod>assertTerminalEvent</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>74</index><killingTest>rx.observers.TestObserverTest.testAssertTerminalEventNotReceived(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestObserver.java</sourceFile><mutatedClass>rx.observers.TestObserver</mutatedClass><mutatedMethod>assertTerminalEvent</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>78</index><killingTest>rx.observers.TestObserverTest.testAssertTerminalEventNotReceived(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestObserver.java</sourceFile><mutatedClass>rx.observers.TestObserver</mutatedClass><mutatedMethod>getEvents</mutatedMethod><methodDescription>()Ljava/util/List;</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>32</index><killingTest>rx.observers.TestObserverTest.testGetEvents(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestObserver.java</sourceFile><mutatedClass>rx.observers.TestObserver</mutatedClass><mutatedMethod>getOnCompletedEvents</mutatedMethod><methodDescription>()Ljava/util/List;</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.observers.TestSubscriberTest.testNotCompleted(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestObserver.java</sourceFile><mutatedClass>rx.observers.TestObserver</mutatedClass><mutatedMethod>getOnErrorEvents</mutatedMethod><methodDescription>()Ljava/util/List;</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.observers.TestSubscriberTest.testNoError(rx.observers.TestSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestObserver.java</sourceFile><mutatedClass>rx.observers.TestObserver</mutatedClass><mutatedMethod>getOnNextEvents</mutatedMethod><methodDescription>()Ljava/util/List;</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.observers.TestObserverTest.testAssertTerminalEventNotReceived(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestObserver.java</sourceFile><mutatedClass>rx.observers.TestObserver</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest>rx.observers.TestObserverTest.testWrappingMock(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestObserver.java</sourceFile><mutatedClass>rx.observers.TestObserver</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.internal.operators.SafeSubscriberTest.testOnNextAfterOnError(rx.internal.operators.SafeSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestObserver.java</sourceFile><mutatedClass>rx.observers.TestObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.observers.TestObserverTest.testWrappingMock(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>201</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>204</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>35</index><killingTest>rx.internal.operators.OperatorRetryTest.testUnsubscribeFromRetry(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>358</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>108</index><killingTest>rx.internal.operators.OperatorRetryTest.testUnsubscribeFromRetry(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo</mutatedClass><mutatedMethod>redo</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/functions/Func1;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo</mutatedClass><mutatedMethod>repeat</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.CompletableTest.repeatError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo</mutatedClass><mutatedMethod>repeat</mutatedMethod><methodDescription>(Lrx/Observable;J)Lrx/Observable;</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.CompletableTest.repeat0Time(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo</mutatedClass><mutatedMethod>repeat</mutatedMethod><methodDescription>(Lrx/Observable;JLrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo</mutatedClass><mutatedMethod>repeat</mutatedMethod><methodDescription>(Lrx/Observable;JLrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>33</index><killingTest>rx.CompletableTest.repeat1Time(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo</mutatedClass><mutatedMethod>repeat</mutatedMethod><methodDescription>(Lrx/Observable;JLrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.CompletableTest.repeat0Time(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo</mutatedClass><mutatedMethod>repeat</mutatedMethod><methodDescription>(Lrx/Observable;JLrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.CompletableTest.repeat1Time(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo</mutatedClass><mutatedMethod>repeat</mutatedMethod><methodDescription>(Lrx/Observable;JLrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>157</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.CompletableTest.repeat0Time(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo</mutatedClass><mutatedMethod>repeat</mutatedMethod><methodDescription>(Lrx/Observable;JLrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>37</index><killingTest>rx.CompletableTest.repeat1Time(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo</mutatedClass><mutatedMethod>repeat</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.CompletableTest.repeatError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo</mutatedClass><mutatedMethod>repeat</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo</mutatedClass><mutatedMethod>repeat</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/functions/Func1;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.CompletableTest.repeat1Time(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo</mutatedClass><mutatedMethod>retry</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorRetryTest.testUnsubscribeFromRetry(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo</mutatedClass><mutatedMethod>retry</mutatedMethod><methodDescription>(Lrx/Observable;J)Lrx/Observable;</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorRetryTest.testSourceObservableRetry0(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo</mutatedClass><mutatedMethod>retry</mutatedMethod><methodDescription>(Lrx/Observable;J)Lrx/Observable;</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.CompletableTest.retryNegativeTimes(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo</mutatedClass><mutatedMethod>retry</mutatedMethod><methodDescription>(Lrx/Observable;J)Lrx/Observable;</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.internal.operators.OperatorRetryTest.testSourceObservableCallsUnsubscribe(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo</mutatedClass><mutatedMethod>retry</mutatedMethod><methodDescription>(Lrx/Observable;J)Lrx/Observable;</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>24</index><killingTest>rx.internal.operators.OperatorRetryTest.testSourceObservableRetry0(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo</mutatedClass><mutatedMethod>retry</mutatedMethod><methodDescription>(Lrx/Observable;J)Lrx/Observable;</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>34</index><killingTest>rx.internal.operators.OperatorRetryTest.testSourceObservableCallsUnsubscribe(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo</mutatedClass><mutatedMethod>retry</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorRetryTest.testOnCompletedFromNotificationHandler(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo</mutatedClass><mutatedMethod>retry</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/functions/Func1;Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureUtils.java</sourceFile><mutatedClass>rx.internal.operators.BackpressureUtils</mutatedClass><mutatedMethod>addCap</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorGroupByTest.testBackpressureInnerDoesntOverflowOuter(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureUtils.java</sourceFile><mutatedClass>rx.internal.operators.BackpressureUtils</mutatedClass><mutatedMethod>addCap</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>5</index><killingTest>rx.internal.operators.BackpressureUtilsTest.testAddCap(rx.internal.operators.BackpressureUtilsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureUtils.java</sourceFile><mutatedClass>rx.internal.operators.BackpressureUtils</mutatedClass><mutatedMethod>addCap</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.internal.operators.BackpressureUtilsTest.testAddCap(rx.internal.operators.BackpressureUtilsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureUtils.java</sourceFile><mutatedClass>rx.internal.operators.BackpressureUtils</mutatedClass><mutatedMethod>addCap</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><killingTest>rx.internal.operators.BackpressureUtilsTest.testAddCap(rx.internal.operators.BackpressureUtilsTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BackpressureUtils.java</sourceFile><mutatedClass>rx.internal.operators.BackpressureUtils</mutatedClass><mutatedMethod>getAndAddRequest</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicLong;J)J</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureUtils.java</sourceFile><mutatedClass>rx.internal.operators.BackpressureUtils</mutatedClass><mutatedMethod>getAndAddRequest</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicLong;J)J</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BackpressureUtils.java</sourceFile><mutatedClass>rx.internal.operators.BackpressureUtils</mutatedClass><mutatedMethod>getAndAddRequest</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BackpressureUtils.java</sourceFile><mutatedClass>rx.internal.operators.BackpressureUtils</mutatedClass><mutatedMethod>getAndAddRequest</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureUtils.java</sourceFile><mutatedClass>rx.internal.operators.BackpressureUtils</mutatedClass><mutatedMethod>multiplyCap</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>5</index><killingTest>rx.internal.operators.BackpressureUtilsTest.testMultiplyCap(rx.internal.operators.BackpressureUtilsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureUtils.java</sourceFile><mutatedClass>rx.internal.operators.BackpressureUtils</mutatedClass><mutatedMethod>multiplyCap</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>11</index><killingTest>rx.internal.operators.BackpressureUtilsTest.testMultiplyCap(rx.internal.operators.BackpressureUtilsTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BackpressureUtils.java</sourceFile><mutatedClass>rx.internal.operators.BackpressureUtils</mutatedClass><mutatedMethod>multiplyCap</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureUtils.java</sourceFile><mutatedClass>rx.internal.operators.BackpressureUtils</mutatedClass><mutatedMethod>multiplyCap</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>25</index><killingTest>rx.internal.operators.BackpressureUtilsTest.testMultiplyCap(rx.internal.operators.BackpressureUtilsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureUtils.java</sourceFile><mutatedClass>rx.internal.operators.BackpressureUtils</mutatedClass><mutatedMethod>multiplyCap</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.internal.operators.BackpressureUtilsTest.testMultiplyCap(rx.internal.operators.BackpressureUtilsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureUtils.java</sourceFile><mutatedClass>rx.internal.operators.BackpressureUtils</mutatedClass><mutatedMethod>multiplyCap</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest>rx.internal.operators.BackpressureUtilsTest.testMultiplyCap(rx.internal.operators.BackpressureUtilsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureUtils.java</sourceFile><mutatedClass>rx.internal.operators.BackpressureUtils</mutatedClass><mutatedMethod>multiplyCap</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest>rx.internal.operators.BackpressureUtilsTest.testMultiplyCap(rx.internal.operators.BackpressureUtilsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureUtils.java</sourceFile><mutatedClass>rx.internal.operators.BackpressureUtils</mutatedClass><mutatedMethod>multiplyCap</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>37</index><killingTest>rx.internal.operators.BackpressureUtilsTest.testMultiplyCap(rx.internal.operators.BackpressureUtilsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureUtils.java</sourceFile><mutatedClass>rx.internal.operators.BackpressureUtils</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicLong;J)J</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>29</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureUtils.java</sourceFile><mutatedClass>rx.internal.operators.BackpressureUtils</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicLong;J)J</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>22</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureUtils.java</sourceFile><mutatedClass>rx.internal.operators.BackpressureUtils</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicLong;J)J</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureUtils.java</sourceFile><mutatedClass>rx.internal.operators.BackpressureUtils</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicLong;J)J</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureUtils.java</sourceFile><mutatedClass>rx.internal.operators.BackpressureUtils</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicLong;J)J</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BackpressureUtils.java</sourceFile><mutatedClass>rx.internal.operators.BackpressureUtils</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicLong;J)J</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorConcatTest.testNestedAsyncConcat(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BackpressureUtils.java</sourceFile><mutatedClass>rx.internal.operators.BackpressureUtils</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicLong;J)J</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>55</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$CachedWorkerPool</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testStartIdempotence(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$CachedWorkerPool</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)V</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$CachedWorkerPool</mutatedClass><mutatedMethod>evictExpiredWorkers</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$CachedWorkerPool</mutatedClass><mutatedMethod>evictExpiredWorkers</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$CachedWorkerPool</mutatedClass><mutatedMethod>evictExpiredWorkers</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$CachedWorkerPool</mutatedClass><mutatedMethod>evictExpiredWorkers</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$CachedWorkerPool</mutatedClass><mutatedMethod>evictExpiredWorkers</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>40</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$CachedWorkerPool</mutatedClass><mutatedMethod>evictExpiredWorkers</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>46</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$CachedWorkerPool</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>()Lrx/schedulers/CachedThreadScheduler$ThreadWorker;</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.schedulers.CachedThreadSchedulerTest.testRecursiveExecution(rx.schedulers.CachedThreadSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$CachedWorkerPool</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>()Lrx/schedulers/CachedThreadScheduler$ThreadWorker;</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$CachedWorkerPool</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>()Lrx/schedulers/CachedThreadScheduler$ThreadWorker;</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$CachedWorkerPool</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>()Lrx/schedulers/CachedThreadScheduler$ThreadWorker;</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$CachedWorkerPool</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>()Lrx/schedulers/CachedThreadScheduler$ThreadWorker;</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>32</index><killingTest>rx.schedulers.CachedThreadSchedulerTest.testRecursiveExecution(rx.schedulers.CachedThreadSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$CachedWorkerPool</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>()Lrx/schedulers/CachedThreadScheduler$ThreadWorker;</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>54</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test1ToNSourcesScheduled(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$CachedWorkerPool</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>()Lrx/schedulers/CachedThreadScheduler$ThreadWorker;</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>50</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$CachedWorkerPool</mutatedClass><mutatedMethod>now</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$CachedWorkerPool</mutatedClass><mutatedMethod>release</mutatedMethod><methodDescription>(Lrx/schedulers/CachedThreadScheduler$ThreadWorker;)V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>8</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$CachedWorkerPool</mutatedClass><mutatedMethod>release</mutatedMethod><methodDescription>(Lrx/schedulers/CachedThreadScheduler$ThreadWorker;)V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$CachedWorkerPool</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testStartIdempotence(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$CachedWorkerPool</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testStartIdempotence(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$CachedWorkerPool</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$CachedWorkerPool</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>41</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorBufferWithStartEndObservable;Lrx/Subscriber;)V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber</mutatedClass><mutatedMethod>endBuffer</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorBufferTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber</mutatedClass><mutatedMethod>endBuffer</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>201</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest>rx.internal.operators.OperatorBufferTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber</mutatedClass><mutatedMethod>endBuffer</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>203</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><killingTest>rx.internal.operators.OperatorBufferTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber</mutatedClass><mutatedMethod>endBuffer</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>80</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithStartEndBoundaryTake2(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber</mutatedClass><mutatedMethod>endBuffer</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>205</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>53</index><killingTest>rx.internal.operators.OperatorBufferTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber</mutatedClass><mutatedMethod>endBuffer</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>86</index><killingTest>rx.internal.operators.OperatorBufferTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorBufferTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>61</index><killingTest>rx.internal.operators.OperatorBufferTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>36</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>71</index><killingTest>rx.internal.operators.OperatorBufferTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>88</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>97</index><killingTest>rx.internal.operators.OperatorBufferTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>101</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithStartEndEndFunctionThrows(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>49</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithStartEndEndFunctionThrows(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>53</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorBufferTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber</mutatedClass><mutatedMethod>startBuffer</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithStartEndEndFunctionThrows(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber</mutatedClass><mutatedMethod>startBuffer</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>167</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>67</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithStartEndEndFunctionThrows(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber</mutatedClass><mutatedMethod>startBuffer</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>85</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$SubjectObserver</mutatedClass><mutatedMethod>accept</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/internal/operators/NotificationLite;)V</methodDescription><lineNumber>317</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.subjects.BehaviorSubjectTest.testThatObserverReceivesDefaultValueAndSubsequentEvents(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$SubjectObserver</mutatedClass><mutatedMethod>emitFirst</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/internal/operators/NotificationLite;)V</methodDescription><lineNumber>263</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.subjects.BehaviorSubjectTest.testThatObserverReceivesDefaultValueAndSubsequentEvents(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$SubjectObserver</mutatedClass><mutatedMethod>emitFirst</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/internal/operators/NotificationLite;)V</methodDescription><lineNumber>263</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.subjects.BehaviorSubjectTest.testThatObserverReceivesDefaultValueAndSubsequentEvents(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$SubjectObserver</mutatedClass><mutatedMethod>emitFirst</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/internal/operators/NotificationLite;)V</methodDescription><lineNumber>267</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest>rx.subjects.BehaviorSubjectTest.testStartEmpty(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$SubjectObserver</mutatedClass><mutatedMethod>emitFirst</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/internal/operators/NotificationLite;)V</methodDescription><lineNumber>269</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>59</index><killingTest>rx.subjects.BehaviorSubjectTest.testThatObserverReceivesDefaultValueAndSubsequentEvents(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$SubjectObserver</mutatedClass><mutatedMethod>emitFirst</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/internal/operators/NotificationLite;)V</methodDescription><lineNumber>270</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>66</index><killingTest>rx.subjects.BehaviorSubjectTest.testThatObserverReceivesDefaultValueAndSubsequentEvents(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$SubjectObserver</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>(Ljava/util/List;Ljava/lang/Object;Lrx/internal/operators/NotificationLite;)V</methodDescription><lineNumber>284</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.subjects.BehaviorSubjectTest.testThatObserverReceivesDefaultValueAndSubsequentEvents(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$SubjectObserver</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>(Ljava/util/List;Ljava/lang/Object;Lrx/internal/operators/NotificationLite;)V</methodDescription><lineNumber>285</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$SubjectObserver</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>(Ljava/util/List;Ljava/lang/Object;Lrx/internal/operators/NotificationLite;)V</methodDescription><lineNumber>289</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>40</index><killingTest>rx.subjects.BehaviorSubjectTest.testThatObserverReceivesDefaultValueAndSubsequentEvents(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$SubjectObserver</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>(Ljava/util/List;Ljava/lang/Object;Lrx/internal/operators/NotificationLite;)V</methodDescription><lineNumber>296</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>71</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$SubjectObserver</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>(Ljava/util/List;Ljava/lang/Object;Lrx/internal/operators/NotificationLite;)V</methodDescription><lineNumber>304</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>110</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$SubjectObserver</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>(Ljava/util/List;Ljava/lang/Object;Lrx/internal/operators/NotificationLite;)V</methodDescription><lineNumber>304</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>145</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$SubjectObserver</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>(Ljava/util/List;Ljava/lang/Object;Lrx/internal/operators/NotificationLite;)V</methodDescription><lineNumber>286</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$SubjectObserver</mutatedClass><mutatedMethod>emitLoop</mutatedMethod><methodDescription>(Ljava/util/List;Ljava/lang/Object;Lrx/internal/operators/NotificationLite;)V</methodDescription><lineNumber>291</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>50</index><killingTest>rx.subjects.BehaviorSubjectTest.testThatObserverReceivesDefaultValueAndSubsequentEvents(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$SubjectObserver</mutatedClass><mutatedMethod>emitNext</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/internal/operators/NotificationLite;)V</methodDescription><lineNumber>240</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$SubjectObserver</mutatedClass><mutatedMethod>emitNext</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/internal/operators/NotificationLite;)V</methodDescription><lineNumber>243</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest>rx.subjects.BehaviorSubjectTest.testThatObserverReceivesDefaultValueAndSubsequentEvents(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$SubjectObserver</mutatedClass><mutatedMethod>emitNext</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/internal/operators/NotificationLite;)V</methodDescription><lineNumber>244</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$SubjectObserver</mutatedClass><mutatedMethod>getActual</mutatedMethod><methodDescription>()Lrx/Observer;</methodDescription><lineNumber>324</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$SubjectObserver</mutatedClass><mutatedMethod>index</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>332</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.subjects.ReplaySubjectTest.testSubscriptionLeak(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$SubjectObserver</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.subjects.AsyncSubjectTest.testEmptySubjectCompleted(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$SubjectObserver</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>227</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.subjects.AsyncSubjectTest.testOnErrorThrowsDoesntPreventDelivery(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$SubjectObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>223</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.observers.TestObserverTest.testAssertTerminalEventNotReceived(rx.observers.TestObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$UnboundedReplayBuffer</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>793</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorReplayTest.testColdReplayNoBackpressure(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$UnboundedReplayBuffer</mutatedClass><mutatedMethod>error</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>787</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorReplayTest.testValuesAndThenError(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$UnboundedReplayBuffer</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>781</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$UnboundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>818</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>99</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$UnboundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>835</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>173</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$UnboundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>836</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>178</index><killingTest>rx.internal.operators.OperatorReplayTest.testAsync(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$UnboundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>837</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>184</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressure(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$UnboundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>799</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$UnboundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>806</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>48</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$UnboundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>812</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>67</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$UnboundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>818</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>96</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$UnboundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>818</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>99</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$UnboundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>821</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>114</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressure(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$UnboundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>827</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>140</index><killingTest>rx.internal.operators.OperatorReplayTest.unsafeChildThrows(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$UnboundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>827</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>145</index><killingTest>rx.internal.operators.OperatorReplayTest.unsafeChildThrows(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$UnboundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>832</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>166</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressure(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$UnboundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>839</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>195</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$UnboundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>841</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>207</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressure(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$UnboundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>847</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>225</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$UnboundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>825</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>129</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$UnboundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>826</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>133</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$UnboundedReplayBuffer</mutatedClass><mutatedMethod>replay</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorReplay$InnerProducer;)V</methodDescription><lineNumber>828</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>156</index><killingTest>rx.internal.operators.OperatorReplayTest.unsafeChildThrows(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriber.java</sourceFile><mutatedClass>rx.Subscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Subscriber;Z)V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.observers.SafeObserverTest.onCompleteSuccessWithUnsubscribeFailure(rx.observers.SafeObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriber.java</sourceFile><mutatedClass>rx.Subscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Subscriber;Z)V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest>rx.observers.SafeObserverTest.onCompleteSuccessWithUnsubscribeFailure(rx.observers.SafeObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriber.java</sourceFile><mutatedClass>rx.Subscriber</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.observers.SafeObserverTest.onCompleteSuccessWithUnsubscribeFailure(rx.observers.SafeObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriber.java</sourceFile><mutatedClass>rx.Subscriber</mutatedClass><mutatedMethod>addToRequested</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>166</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>28</index><killingTest>rx.internal.operators.OperatorSwitchTest.testSecondaryRequestsAdditivelyAreMoreThanLongMaxValueInducesMaxValueRequestFromUpstream(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriber.java</sourceFile><mutatedClass>rx.Subscriber</mutatedClass><mutatedMethod>addToRequested</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>21</index><killingTest>rx.SubscriberTest.testOnStartRequestsAreAdditive(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriber.java</sourceFile><mutatedClass>rx.Subscriber</mutatedClass><mutatedMethod>addToRequested</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.SubscriberTest.testRequestFromChainedOperator(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriber.java</sourceFile><mutatedClass>rx.Subscriber</mutatedClass><mutatedMethod>addToRequested</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>166</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest>rx.internal.operators.BlockingOperatorToIteratorTest.testIteratorExertBackpressure(rx.internal.operators.BlockingOperatorToIteratorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriber.java</sourceFile><mutatedClass>rx.Subscriber</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.SubscriberTest.testOnStartRequestsAreAdditive(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriber.java</sourceFile><mutatedClass>rx.Subscriber</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testEmptyRangeSendsOnCompleteEagerlyWithRequestZero(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriber.java</sourceFile><mutatedClass>rx.Subscriber</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.SubscriberTest.testRequestFromDecoupledOperator(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriber.java</sourceFile><mutatedClass>rx.Subscriber</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><killingTest>rx.SubscriberTest.testRequestFromDecoupledOperator(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriber.java</sourceFile><mutatedClass>rx.Subscriber</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>48</index><killingTest>rx.SubscriberTest.testRequestFromChainedOperator(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriber.java</sourceFile><mutatedClass>rx.Subscriber</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>157</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>75</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testBackpressureViaRequest(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriber.java</sourceFile><mutatedClass>rx.Subscriber</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>195</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.SubscriberTest.testRequestFromDecoupledOperator(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriber.java</sourceFile><mutatedClass>rx.Subscriber</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest>rx.SubscriberTest.testRequestFromChainedOperator(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriber.java</sourceFile><mutatedClass>rx.Subscriber</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>204</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>56</index><killingTest>rx.SubscriberTest.testRequestFromDecoupledOperator(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriber.java</sourceFile><mutatedClass>rx.Subscriber</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>72</index><killingTest>rx.SubscriberTest.testRequestFromDecoupledOperator(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriber.java</sourceFile><mutatedClass>rx.Subscriber</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>205</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>63</index><killingTest>rx.SubscriberTest.testRequestFromChainedOperator(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriber.java</sourceFile><mutatedClass>rx.Subscriber</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>78</index><killingTest>rx.SubscriberTest.testRequestFromDecoupledOperator(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriber.java</sourceFile><mutatedClass>rx.Subscriber</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>86</index><killingTest>rx.SubscriberTest.testRequestFromChainedOperator(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriber.java</sourceFile><mutatedClass>rx.Subscriber</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.observers.SafeSubscriberTest.testOnCompletedThrows2(rx.observers.SafeSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject</mutatedClass><mutatedMethod>_onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>26</index><killingTest>rx.subjects.TestSubjectTest.testObserverPropagateCompletedInFutureTimeAfterTriggeringActions(rx.subjects.TestSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject</mutatedClass><mutatedMethod>_onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>37</index><killingTest>rx.subjects.TestSubjectTest.testObserverPropagateCompletedInFutureTimeAfterTriggeringActions(rx.subjects.TestSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject</mutatedClass><mutatedMethod>_onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.subjects.TestSubjectTest.testObserverPropagateCompletedInFutureTimeAfterTriggeringActions(rx.subjects.TestSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject</mutatedClass><mutatedMethod>_onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest>rx.subjects.TestSubjectTest.testObserverPropagateCompletedInFutureTimeAfterTriggeringActions(rx.subjects.TestSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject</mutatedClass><mutatedMethod>_onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest>rx.subjects.TestSubjectTest.testObserverPropagateCompletedInFutureTimeAfterTriggeringActions(rx.subjects.TestSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject</mutatedClass><mutatedMethod>_onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>27</index><killingTest>rx.subjects.TestSubjectTest.testObserverPropagateErrorInFutureTimeAfterTriggeringActions(rx.subjects.TestSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject</mutatedClass><mutatedMethod>_onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>39</index><killingTest>rx.subjects.TestSubjectTest.testObserverPropagateErrorInFutureTimeAfterTriggeringActions(rx.subjects.TestSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject</mutatedClass><mutatedMethod>_onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.subjects.TestSubjectTest.testObserverPropagateErrorInFutureTimeAfterTriggeringActions(rx.subjects.TestSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject</mutatedClass><mutatedMethod>_onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest>rx.subjects.TestSubjectTest.testObserverPropagateErrorInFutureTimeAfterTriggeringActions(rx.subjects.TestSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject</mutatedClass><mutatedMethod>_onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>36</index><killingTest>rx.subjects.TestSubjectTest.testObserverPropagateErrorInFutureTimeAfterTriggeringActions(rx.subjects.TestSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject</mutatedClass><mutatedMethod>_onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>18</index><killingTest>rx.subjects.TestSubjectTest.testObserverPropagateValueInFutureTimeAfterTriggeringActions(rx.subjects.TestSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject</mutatedClass><mutatedMethod>_onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>30</index><killingTest>rx.subjects.TestSubjectTest.testObserverPropagateValueInFutureTimeAfterTriggeringActions(rx.subjects.TestSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject</mutatedClass><mutatedMethod>_onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><killingTest>rx.subjects.TestSubjectTest.testObserverPropagateValueInFutureTimeAfterTriggeringActions(rx.subjects.TestSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject</mutatedClass><mutatedMethod>_onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest>rx.subjects.TestSubjectTest.testObserverPropagateValueInFutureTimeAfterTriggeringActions(rx.subjects.TestSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/schedulers/TestScheduler;)Lrx/subjects/TestSubject;</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>29</index><killingTest>rx.subjects.TestSubjectTest.testObserverPropagateValueInFutureTimeAfterTriggeringActions(rx.subjects.TestSubjectTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject</mutatedClass><mutatedMethod>hasObservers</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject</mutatedClass><mutatedMethod>hasObservers</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject</mutatedClass><mutatedMethod>hasObservers</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.subjects.TestSubjectTest.testObserverPropagateCompletedInFutureTimeAfterTriggeringActions(rx.subjects.TestSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.subjects.TestSubjectTest.testObserverPropagateErrorInFutureTimeAfterTriggeringActions(rx.subjects.TestSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.subjects.TestSubjectTest.testObserverPropagateValueInFutureTimeAfterTriggeringActions(rx.subjects.TestSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne$ParentSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorTakeLastOneTest.testLastWithBackpressure(rx.internal.operators.OperatorTakeLastOneTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne$ParentSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest>rx.internal.operators.OperatorTakeLastOneTest.testLastWithBackpressure(rx.internal.operators.OperatorTakeLastOneTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne$ParentSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>57</index><killingTest>rx.internal.operators.OperatorTakeLastOneTest.testUnsubscribesFromUpstream(rx.internal.operators.OperatorTakeLastOneTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne$ParentSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>35</index><killingTest>rx.internal.operators.OperatorTakeLastOneTest.testLastWithBackpressure(rx.internal.operators.OperatorTakeLastOneTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne$ParentSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>48</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne$ParentSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>62</index><killingTest>rx.internal.operators.OperatorTakeLastOneTest.testUnsubscribesFromUpstream(rx.internal.operators.OperatorTakeLastOneTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne$ParentSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorTakeLastOneTest.testLastWithBackpressure(rx.internal.operators.OperatorTakeLastOneTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne$ParentSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.internal.operators.OperatorTakeLastOneTest.testLastWithBackpressure(rx.internal.operators.OperatorTakeLastOneTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne$ParentSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne$ParentSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><killingTest>rx.internal.operators.OperatorTakeLastOneTest.testUnsubscribesFromUpstream(rx.internal.operators.OperatorTakeLastOneTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne$ParentSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>50</index><killingTest>rx.internal.operators.OperatorTakeLastOneTest.testUnsubscribesFromUpstream(rx.internal.operators.OperatorTakeLastOneTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne$ParentSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorTakeLastOneTest.testLastOfEmptyReturnsEmpty(rx.internal.operators.OperatorTakeLastOneTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne$ParentSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>54</index><killingTest>rx.internal.operators.OperatorTakeLastOneTest.testUnsubscribesFromUpstream(rx.internal.operators.OperatorTakeLastOneTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne$ParentSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne$ParentSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorTakeLastOneTest.testLastWithBackpressure(rx.internal.operators.OperatorTakeLastOneTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne$ParentSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorTakeLastOneTest.testLastWithBackpressure(rx.internal.operators.OperatorTakeLastOneTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne$ParentSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne$ParentSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne$ParentSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest>rx.internal.operators.OperatorTakeLastOneTest.testLastWithBackpressure(rx.internal.operators.OperatorTakeLastOneTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne$ParentSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><killingTest>rx.internal.operators.OperatorTakeLastOneTest.testLastWithBackpressure(rx.internal.operators.OperatorTakeLastOneTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne$ParentSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>46</index><killingTest>rx.internal.operators.OperatorTakeLastOneTest.testLastWithBackpressure(rx.internal.operators.OperatorTakeLastOneTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb</mutatedClass><mutatedMethod>amb</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)Lrx/Observable$OnSubscribe;</methodDescription><lineNumber>265</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testProducerRequestThroughAmb(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb</mutatedClass><mutatedMethod>amb</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;)Lrx/Observable$OnSubscribe;</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testProducerRequestThroughAmb(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb</mutatedClass><mutatedMethod>amb</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable$OnSubscribe;</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>29</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testAmb3(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb</mutatedClass><mutatedMethod>amb</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable$OnSubscribe;</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>35</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb</mutatedClass><mutatedMethod>amb</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable$OnSubscribe;</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>41</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb</mutatedClass><mutatedMethod>amb</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable$OnSubscribe;</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>47</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb</mutatedClass><mutatedMethod>amb</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable$OnSubscribe;</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>53</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb</mutatedClass><mutatedMethod>amb</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable$OnSubscribe;</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>59</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb</mutatedClass><mutatedMethod>amb</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;Lrx/Observable;)Lrx/Observable$OnSubscribe;</methodDescription><lineNumber>253</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>65</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>386</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testProducerRequestThroughAmb(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>387</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testProducerRequestThroughAmb(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>396</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>72</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testProducerRequestThroughAmb(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>404</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>96</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testProducerRequestThroughAmb(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>367</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>398</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>77</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>405</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>101</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>408</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>112</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testProducerRequestThroughAmb(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb</mutatedClass><mutatedMethod>unsubscribeAmbSubscribers</mutatedMethod><methodDescription>(Ljava/util/Collection;)V</methodDescription><lineNumber>438</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb</mutatedClass><mutatedMethod>unsubscribeAmbSubscribers</mutatedMethod><methodDescription>(Ljava/util/Collection;)V</methodDescription><lineNumber>439</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb</mutatedClass><mutatedMethod>unsubscribeAmbSubscribers</mutatedMethod><methodDescription>(Ljava/util/Collection;)V</methodDescription><lineNumber>440</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb</mutatedClass><mutatedMethod>unsubscribeAmbSubscribers</mutatedMethod><methodDescription>(Ljava/util/Collection;)V</methodDescription><lineNumber>442</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize$ParentSubscriber</mutatedClass><mutatedMethod>decrementRequested</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>28</index><killingTest>rx.internal.operators.OperatorMaterializeTest.testBackpressureNoError(rx.internal.operators.OperatorMaterializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize$ParentSubscriber</mutatedClass><mutatedMethod>decrementRequested</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorMaterializeTest.testBackpressureNoError(rx.internal.operators.OperatorMaterializeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize$ParentSubscriber</mutatedClass><mutatedMethod>decrementRequested</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize$ParentSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>66</index><killingTest>rx.internal.operators.OperatorMaterializeTest.testUnsubscribeJustBeforeCompletionNotificationShouldPreventThatNotificationArriving(rx.internal.operators.OperatorMaterializeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize$ParentSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize$ParentSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>50</index><killingTest>rx.internal.operators.OperatorMaterializeTest.testUnsubscribeJustBeforeCompletionNotificationShouldPreventThatNotificationArriving(rx.internal.operators.OperatorMaterializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize$ParentSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>59</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testRangeWithOverflow5(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize$ParentSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>66</index><killingTest>rx.internal.operators.OperatorMaterializeTest.testUnsubscribeJustBeforeCompletionNotificationShouldPreventThatNotificationArriving(rx.internal.operators.OperatorMaterializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize$ParentSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>83</index><killingTest>rx.internal.operators.OperatorMaterializeTest.testBackpressureOnEmptyStream(rx.internal.operators.OperatorMaterializeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize$ParentSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>104</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize$ParentSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>77</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize$ParentSubscriber</mutatedClass><mutatedMethod>drain</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>88</index><killingTest>rx.internal.operators.OperatorMaterializeTest.testBackpressureOnEmptyStream(rx.internal.operators.OperatorMaterializeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize$ParentSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize$ParentSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize$ParentSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize$ParentSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorDematerializeTest.testHonorsContractWhenCompleted(rx.internal.operators.OperatorDematerializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize$ParentSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorMaterializeTest.testBackpressureNoError(rx.internal.operators.OperatorMaterializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize$ParentSubscriber</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorMaterializeTest.testBackpressureNoError(rx.internal.operators.OperatorMaterializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize$ParentSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorDematerializeTest.testHonorsContractWhenCompleted(rx.internal.operators.OperatorDematerializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize$ParentSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorMaterializeTest.testBackpressureOnEmptyStream(rx.internal.operators.OperatorMaterializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorTimeoutTests.shouldUnsubscribeFromUnderlyingSubscriptionOnImmediatelyComplete(rx.internal.operators.OperatorTimeoutTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>44</index><killingTest>rx.internal.operators.OperatorTimeoutTests.shouldUnsubscribeFromUnderlyingSubscriptionOnImmediatelyComplete(rx.internal.operators.OperatorTimeoutTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>49</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>163</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>54</index><killingTest>rx.internal.operators.OperatorTimeoutTests.shouldUnsubscribeFromUnderlyingSubscriptionOnImmediatelyComplete(rx.internal.operators.OperatorTimeoutTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorTimeoutWithSelectorTest.testTimeoutSelectorFirstThrows(rx.internal.operators.OperatorTimeoutWithSelectorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>44</index><killingTest>rx.internal.operators.OperatorTimeoutWithSelectorTest.testTimeoutSelectorFirstThrows(rx.internal.operators.OperatorTimeoutWithSelectorTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>49</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>55</index><killingTest>rx.internal.operators.OperatorTimeoutWithSelectorTest.testTimeoutSelectorFirstThrows(rx.internal.operators.OperatorTimeoutWithSelectorTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorTimeoutTests.shouldNotTimeoutIfSecondOnNextWithinTimeout(rx.internal.operators.OperatorTimeoutTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>56</index><killingTest>rx.internal.operators.OperatorTimeoutTests.shouldNotTimeoutIfSecondOnNextWithinTimeout(rx.internal.operators.OperatorTimeoutTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>62</index><killingTest>rx.internal.operators.OperatorTimeoutTests.shouldNotTimeoutIfSecondOnNextWithinTimeout(rx.internal.operators.OperatorTimeoutTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>77</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber</mutatedClass><mutatedMethod>onTimeout</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorTimeoutTests.shouldTimeoutIfOnNextNotWithinTimeout(rx.internal.operators.OperatorTimeoutTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber</mutatedClass><mutatedMethod>onTimeout</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest>rx.internal.operators.OperatorTimeoutTests.shouldTimeoutIfOnNextNotWithinTimeout(rx.internal.operators.OperatorTimeoutTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber</mutatedClass><mutatedMethod>onTimeout</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>53</index><killingTest>rx.internal.operators.OperatorTimeoutTests.shouldTimeoutIfOnNextNotWithinTimeout(rx.internal.operators.OperatorTimeoutTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber</mutatedClass><mutatedMethod>onTimeout</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>58</index><killingTest>rx.internal.operators.OperatorTimeoutTests.shouldTimeoutIfOnNextNotWithinTimeout(rx.internal.operators.OperatorTimeoutTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber</mutatedClass><mutatedMethod>onTimeout</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>66</index><killingTest>rx.internal.operators.OperatorTimeoutTests.shouldTimeoutIfOnNextNotWithinTimeout(rx.internal.operators.OperatorTimeoutTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber</mutatedClass><mutatedMethod>onTimeout</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>202</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>88</index><killingTest>rx.internal.operators.OperatorTimeoutTests.shouldSwitchToOtherAndCanBeUnsubscribedIfOnNextNotWithinTimeout(rx.internal.operators.OperatorTimeoutTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.plugins.RxJavaPluginsTest.testOnNextValueCallsPlugin(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>LinkedArrayList.java</sourceFile><mutatedClass>rx.internal.util.LinkedArrayList</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>12</index><killingTest>rx.internal.util.LinkedArrayListTest.testAdd(rx.internal.util.LinkedArrayListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>LinkedArrayList.java</sourceFile><mutatedClass>rx.internal.util.LinkedArrayList</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>52</index><killingTest>rx.internal.util.LinkedArrayListTest.testAdd(rx.internal.util.LinkedArrayListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>LinkedArrayList.java</sourceFile><mutatedClass>rx.internal.util.LinkedArrayList</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>85</index><killingTest>rx.internal.util.LinkedArrayListTest.testAdd(rx.internal.util.LinkedArrayListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>LinkedArrayList.java</sourceFile><mutatedClass>rx.internal.util.LinkedArrayList</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>105</index><killingTest>rx.internal.util.LinkedArrayListTest.testAdd(rx.internal.util.LinkedArrayListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>LinkedArrayList.java</sourceFile><mutatedClass>rx.internal.util.LinkedArrayList</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>113</index><killingTest>rx.internal.util.LinkedArrayListTest.testAdd(rx.internal.util.LinkedArrayListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>LinkedArrayList.java</sourceFile><mutatedClass>rx.internal.util.LinkedArrayList</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.util.LinkedArrayListTest.testAdd(rx.internal.util.LinkedArrayListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>LinkedArrayList.java</sourceFile><mutatedClass>rx.internal.util.LinkedArrayList</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>46</index><killingTest>rx.internal.util.LinkedArrayListTest.testAdd(rx.internal.util.LinkedArrayListTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>LinkedArrayList.java</sourceFile><mutatedClass>rx.internal.util.LinkedArrayList</mutatedClass><mutatedMethod>capacityHint</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>LinkedArrayList.java</sourceFile><mutatedClass>rx.internal.util.LinkedArrayList</mutatedClass><mutatedMethod>head</mutatedMethod><methodDescription>()[Ljava/lang/Object;</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.util.LinkedArrayListTest.testAdd(rx.internal.util.LinkedArrayListTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>LinkedArrayList.java</sourceFile><mutatedClass>rx.internal.util.LinkedArrayList</mutatedClass><mutatedMethod>indexInTail</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>LinkedArrayList.java</sourceFile><mutatedClass>rx.internal.util.LinkedArrayList</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.util.LinkedArrayListTest.testAdd(rx.internal.util.LinkedArrayListTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>LinkedArrayList.java</sourceFile><mutatedClass>rx.internal.util.LinkedArrayList</mutatedClass><mutatedMethod>tail</mutatedMethod><methodDescription>()[Ljava/lang/Object;</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>LinkedArrayList.java</sourceFile><mutatedClass>rx.internal.util.LinkedArrayList</mutatedClass><mutatedMethod>toList</mutatedMethod><methodDescription>()Ljava/util/List;</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>38</index><killingTest>rx.internal.util.LinkedArrayListTest.testAdd(rx.internal.util.LinkedArrayListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>LinkedArrayList.java</sourceFile><mutatedClass>rx.internal.util.LinkedArrayList</mutatedClass><mutatedMethod>toList</mutatedMethod><methodDescription>()Ljava/util/List;</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>49</index><killingTest>rx.internal.util.LinkedArrayListTest.testAdd(rx.internal.util.LinkedArrayListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>LinkedArrayList.java</sourceFile><mutatedClass>rx.internal.util.LinkedArrayList</mutatedClass><mutatedMethod>toList</mutatedMethod><methodDescription>()Ljava/util/List;</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>52</index><killingTest>rx.internal.util.LinkedArrayListTest.testAdd(rx.internal.util.LinkedArrayListTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>LinkedArrayList.java</sourceFile><mutatedClass>rx.internal.util.LinkedArrayList</mutatedClass><mutatedMethod>toList</mutatedMethod><methodDescription>()Ljava/util/List;</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>LinkedArrayList.java</sourceFile><mutatedClass>rx.internal.util.LinkedArrayList</mutatedClass><mutatedMethod>toList</mutatedMethod><methodDescription>()Ljava/util/List;</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><killingTest>rx.internal.util.LinkedArrayListTest.testAdd(rx.internal.util.LinkedArrayListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>LinkedArrayList.java</sourceFile><mutatedClass>rx.internal.util.LinkedArrayList</mutatedClass><mutatedMethod>toList</mutatedMethod><methodDescription>()Ljava/util/List;</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>55</index><killingTest>rx.internal.util.LinkedArrayListTest.testAdd(rx.internal.util.LinkedArrayListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>LinkedArrayList.java</sourceFile><mutatedClass>rx.internal.util.LinkedArrayList</mutatedClass><mutatedMethod>toList</mutatedMethod><methodDescription>()Ljava/util/List;</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>73</index><killingTest>rx.internal.util.LinkedArrayListTest.testAdd(rx.internal.util.LinkedArrayListTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>LinkedArrayList.java</sourceFile><mutatedClass>rx.internal.util.LinkedArrayList</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OnSubscribeGroupJoinTest.normal1(rx.internal.operators.OnSubscribeGroupJoinTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.operators.OnSubscribeGroupJoinTest.behaveAsJoin(rx.internal.operators.OnSubscribeGroupJoinTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.internal.operators.OnSubscribeGroupJoinTest.behaveAsJoin(rx.internal.operators.OnSubscribeGroupJoinTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest>rx.internal.operators.OnSubscribeGroupJoinTest.normal1(rx.internal.operators.OnSubscribeGroupJoinTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager</mutatedClass><mutatedMethod>complete</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>36</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager</mutatedClass><mutatedMethod>errorAll</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><killingTest>rx.internal.operators.OnSubscribeGroupJoinTest.rightDurationSelectorThrows(rx.internal.operators.OnSubscribeGroupJoinTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager</mutatedClass><mutatedMethod>errorAll</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager</mutatedClass><mutatedMethod>errorAll</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager</mutatedClass><mutatedMethod>errorAll</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>60</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager</mutatedClass><mutatedMethod>errorAll</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>70</index><killingTest>rx.internal.operators.OnSubscribeGroupJoinTest.rightDurationSelectorThrows(rx.internal.operators.OnSubscribeGroupJoinTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager</mutatedClass><mutatedMethod>errorAll</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>75</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager</mutatedClass><mutatedMethod>errorMain</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager</mutatedClass><mutatedMethod>errorMain</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager</mutatedClass><mutatedMethod>errorMain</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest>rx.internal.operators.OnSubscribeGroupJoinTest.rightDurationThrows(rx.internal.operators.OnSubscribeGroupJoinTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager</mutatedClass><mutatedMethod>errorMain</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>43</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager</mutatedClass><mutatedMethod>init</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager</mutatedClass><mutatedMethod>init</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber</mutatedClass><mutatedMethod>init</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber</mutatedClass><mutatedMethod>init</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testBackpressureOuter(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>36</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>42</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testSkipAndCountGaplessWindows(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testSkipAndCountGaplessWindows(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testSkipAndCountGaplessWindows(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>64</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testSkipAndCountGaplessWindows(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testSkipAndCountGaplessWindows(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>48</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>68</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testBackpressureOuter(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ConcurrentCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentCircularArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>15</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='RUN_ERROR'><sourceFile>ConcurrentCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentCircularArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ConcurrentCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentCircularArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>25</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpmcArrayQueueIterator(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='RUN_ERROR'><sourceFile>ConcurrentCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentCircularArrayQueue</mutatedClass><mutatedMethod>calcElementOffset</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ConcurrentCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentCircularArrayQueue</mutatedClass><mutatedMethod>calcElementOffset</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>6</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ConcurrentCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentCircularArrayQueue</mutatedClass><mutatedMethod>calcElementOffset</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>8</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ConcurrentCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentCircularArrayQueue</mutatedClass><mutatedMethod>calcElementOffset</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>9</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ConcurrentCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentCircularArrayQueue</mutatedClass><mutatedMethod>calcElementOffset</mutatedMethod><methodDescription>(JJ)J</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testOrdering(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ConcurrentCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentCircularArrayQueue</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ConcurrentCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentCircularArrayQueue</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ConcurrentCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentCircularArrayQueue</mutatedClass><mutatedMethod>lpElement</mutatedMethod><methodDescription>(J)Ljava/lang/Object;</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ConcurrentCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentCircularArrayQueue</mutatedClass><mutatedMethod>lpElement</mutatedMethod><methodDescription>([Ljava/lang/Object;J)Ljava/lang/Object;</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ConcurrentCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentCircularArrayQueue</mutatedClass><mutatedMethod>lvElement</mutatedMethod><methodDescription>(J)Ljava/lang/Object;</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ConcurrentCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentCircularArrayQueue</mutatedClass><mutatedMethod>lvElement</mutatedMethod><methodDescription>([Ljava/lang/Object;J)Ljava/lang/Object;</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ConcurrentCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentCircularArrayQueue</mutatedClass><mutatedMethod>soElement</mutatedMethod><methodDescription>(JLjava/lang/Object;)V</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ConcurrentCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentCircularArrayQueue</mutatedClass><mutatedMethod>soElement</mutatedMethod><methodDescription>([Ljava/lang/Object;JLjava/lang/Object;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ConcurrentCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentCircularArrayQueue</mutatedClass><mutatedMethod>spElement</mutatedMethod><methodDescription>(JLjava/lang/Object;)V</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ConcurrentCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentCircularArrayQueue</mutatedClass><mutatedMethod>spElement</mutatedMethod><methodDescription>([Ljava/lang/Object;JLjava/lang/Object;)V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpmcOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Scheduler.java</sourceFile><mutatedClass>rx.Scheduler$Worker$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Scheduler.java</sourceFile><mutatedClass>rx.Scheduler$Worker$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>38</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Scheduler.java</sourceFile><mutatedClass>rx.Scheduler$Worker$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Scheduler.java</sourceFile><mutatedClass>rx.Scheduler$Worker$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Scheduler.java</sourceFile><mutatedClass>rx.Scheduler$Worker$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>36</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Scheduler.java</sourceFile><mutatedClass>rx.Scheduler$Worker$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>45</index><killingTest>rx.SchedulerWorkerTest.testCurrentTimeDriftBackwards(rx.SchedulerWorkerTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Scheduler.java</sourceFile><mutatedClass>rx.Scheduler$Worker$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>57</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Scheduler.java</sourceFile><mutatedClass>rx.Scheduler$Worker$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>60</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Scheduler.java</sourceFile><mutatedClass>rx.Scheduler$Worker$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>61</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Scheduler.java</sourceFile><mutatedClass>rx.Scheduler$Worker$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>73</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Scheduler.java</sourceFile><mutatedClass>rx.Scheduler$Worker$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>78</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Scheduler.java</sourceFile><mutatedClass>rx.Scheduler$Worker$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>79</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Scheduler.java</sourceFile><mutatedClass>rx.Scheduler$Worker$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>91</index><killingTest>rx.schedulers.TestSchedulerTest.testPeriodicScheduling(rx.schedulers.TestSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Scheduler.java</sourceFile><mutatedClass>rx.Scheduler$Worker$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.schedulers.TestSchedulerTest.testPeriodicScheduling(rx.schedulers.TestSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Scheduler.java</sourceFile><mutatedClass>rx.Scheduler$Worker$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest>rx.SchedulerWorkerTest.testCurrentTimeDriftBackwards(rx.SchedulerWorkerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Scheduler.java</sourceFile><mutatedClass>rx.Scheduler$Worker$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testRefCountAsync(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Scheduler.java</sourceFile><mutatedClass>rx.Scheduler$Worker$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.schedulers.TestSchedulerTest.testPeriodicScheduling(rx.schedulers.TestSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Scheduler.java</sourceFile><mutatedClass>rx.Scheduler$Worker$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>103</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testNoPeriodicTimedTaskPartRetention(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpscLinkedQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedQueueNull(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpscLinkedQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>34</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpscLinkedQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpscLinkedQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpscLinkedQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>MpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpscLinkedQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpscLinkedQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>MpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpscLinkedQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>41</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpscLinkedQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>46</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpscLinkedQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpscLinkedQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>MpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpscLinkedQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpscLinkedQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>28</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>MpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpscLinkedQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>59</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpscLinkedQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>64</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpscLinkedQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpscLinkedQueue</mutatedClass><mutatedMethod>xchgProducerNode</mutatedMethod><methodDescription>(Lrx/internal/util/atomic/LinkedQueueNode;)Lrx/internal/util/atomic/LinkedQueueNode;</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpscLinkedQueue</mutatedClass><mutatedMethod>xchgProducerNode</mutatedMethod><methodDescription>(Lrx/internal/util/atomic/LinkedQueueNode;)Lrx/internal/util/atomic/LinkedQueueNode;</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedQueueIterator(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleDelayedProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleDelayedProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Lrx/Subscriber;Ljava/lang/Object;)V</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.producers.ProducersTest.testSingleDelayedNoBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleDelayedProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleDelayedProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Lrx/Subscriber;Ljava/lang/Object;)V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><killingTest>rx.internal.producers.ProducersTest.testSingleDelayedNoBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleDelayedProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleDelayedProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Lrx/Subscriber;Ljava/lang/Object;)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.internal.producers.ProducersTest.testSingleDelayedNoBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleDelayedProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleDelayedProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Lrx/Subscriber;Ljava/lang/Object;)V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest>rx.internal.util.ScalarSynchronousSingleTest.syncObserverNextThrows(rx.internal.util.ScalarSynchronousSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleDelayedProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleDelayedProducer</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Lrx/Subscriber;Ljava/lang/Object;)V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>44</index><killingTest>rx.internal.producers.ProducersTest.testSingleDelayedNoBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleDelayedProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleDelayedProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest>rx.internal.producers.ProducersTest.testSingleDelayedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleDelayedProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleDelayedProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.producers.ProducersTest.testSingleDelayedNoBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleDelayedProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleDelayedProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.internal.producers.ProducersTest.testSingleDelayedNoBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleDelayedProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleDelayedProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><killingTest>rx.internal.producers.ProducersTest.testSingleDelayedNoBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleDelayedProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleDelayedProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>40</index><killingTest>rx.internal.operators.OperatorToObservableListTest.testAsyncRequested(rx.internal.operators.OperatorToObservableListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleDelayedProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleDelayedProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>49</index><killingTest>rx.internal.producers.ProducersTest.testSingleDelayedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleDelayedProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleDelayedProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>56</index><killingTest>rx.internal.producers.ProducersTest.testSingleDelayedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleDelayedProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleDelayedProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>63</index><killingTest>rx.internal.producers.ProducersTest.testSingleDelayedWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SingleDelayedProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleDelayedProducer</mutatedClass><mutatedMethod>setValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SingleDelayedProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleDelayedProducer</mutatedClass><mutatedMethod>setValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleDelayedProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleDelayedProducer</mutatedClass><mutatedMethod>setValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest>rx.internal.producers.ProducersTest.testSingleDelayedNoBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleDelayedProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleDelayedProducer</mutatedClass><mutatedMethod>setValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><killingTest>rx.internal.producers.ProducersTest.testSingleDelayedNoBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleDelayedProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleDelayedProducer</mutatedClass><mutatedMethod>setValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>44</index><killingTest>rx.internal.producers.ProducersTest.testSingleDelayedNoBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>884</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>112</index><killingTest>rx.CompletableTest.usingErrorLazy(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>857</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>858</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>868</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>48</index><killingTest>rx.CompletableTest.usingFactoryAndDisposerThrow(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>870</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>59</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>871</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>63</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>873</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>68</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>874</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>86</index><killingTest>rx.CompletableTest.usingFactoryAndDisposerThrow(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>877</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>94</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>879</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>99</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>880</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>104</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>886</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>118</index><killingTest>rx.CompletableTest.usingFactoryReturnsNullAndDisposerThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>888</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>129</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>890</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>134</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>891</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>155</index><killingTest>rx.CompletableTest.usingFactoryReturnsNullAndDisposerThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>894</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>164</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>895</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>172</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>901</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>193</index><killingTest>rx.CompletableTest.usingErrorLazy(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.MpscLinkedAtomicQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>39</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.MpscLinkedAtomicQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueueNull(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.MpscLinkedAtomicQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>34</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.MpscLinkedAtomicQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.MpscLinkedAtomicQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.MpscLinkedAtomicQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>MpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.MpscLinkedAtomicQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.MpscLinkedAtomicQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>MpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.MpscLinkedAtomicQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>41</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.MpscLinkedAtomicQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>46</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.MpscLinkedAtomicQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.MpscLinkedAtomicQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.MpscLinkedAtomicQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueuePipelined(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.MpscLinkedAtomicQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>28</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.MpscLinkedAtomicQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>59</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueuePipelined(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.MpscLinkedAtomicQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>64</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.MpscLinkedAtomicQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.MpscLinkedAtomicQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>55</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueuePipelined(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.ObservableTests.testTakeFirstOfNone(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest>rx.ObservableTests.testTakeFirstOfNone(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.SingleTest.takeUntilSourceErrorUnsubscribes_withCompletable(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest>rx.SingleTest.takeUntilSourceErrorUnsubscribes_withCompletable(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorTakeTest.testReentrantTake(rx.internal.operators.OperatorTakeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorTakeTest.testUnsubscribeFromSynchronousInfiniteObservable(rx.internal.operators.OperatorTakeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorTakeTest.testUnsubscribeFromSynchronousInfiniteObservable(rx.internal.operators.OperatorTakeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorTakeTest.testUnsubscribeFromSynchronousInfiniteObservable(rx.internal.operators.OperatorTakeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest>rx.internal.operators.OperatorTakeTest.testUnsubscribeFromSynchronousInfiniteObservable(rx.internal.operators.OperatorTakeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><killingTest>rx.internal.operators.OperatorTakeTest.testUnsubscribeFromSynchronousInfiniteObservable(rx.internal.operators.OperatorTakeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><killingTest>rx.internal.operators.OperatorTakeTest.testUnsubscribeFromSynchronousInfiniteObservable(rx.internal.operators.OperatorTakeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest>rx.internal.operators.OperatorTakeTest.testUnsubscribeFromSynchronousInfiniteObservable(rx.internal.operators.OperatorTakeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>55</index><killingTest>rx.internal.operators.OperatorTakeTest.testMultiTake(rx.internal.operators.OperatorTakeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>59</index><killingTest>rx.internal.operators.OperatorTakeUntilTest.testDownstreamUnsubscribes(rx.internal.operators.OperatorTakeUntilTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>69</index><killingTest>rx.internal.operators.OperatorSwitchTest.testSecondaryRequestsAdditivelyAreMoreThanLongMaxValueInducesMaxValueRequestFromUpstream(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.SubscriberTest.testRequestThroughTakeThatReducesRequest(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.BlockingOperatorNextTest.testNoBufferingOrBlockingOfSequence(rx.internal.operators.BlockingOperatorNextTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.internal.operators.BlockingOperatorNextTest.testNoBufferingOrBlockingOfSequence(rx.internal.operators.BlockingOperatorNextTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest>rx.internal.operators.BlockingOperatorNextTest.testNoBufferingOrBlockingOfSequence(rx.internal.operators.BlockingOperatorNextTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><killingTest>rx.internal.operators.BlockingOperatorNextTest.testNextWithEmpty(rx.internal.operators.BlockingOperatorNextTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>31</index><killingTest>rx.internal.operators.BlockingOperatorNextTest.testNoBufferingOrBlockingOfSequence(rx.internal.operators.BlockingOperatorNextTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>37</index><killingTest>rx.internal.operators.BlockingOperatorNextTest.testNoBufferingOrBlockingOfSequence(rx.internal.operators.BlockingOperatorNextTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextIterator</mutatedClass><mutatedMethod>moveToNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextIterator</mutatedClass><mutatedMethod>moveToNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><killingTest>rx.internal.operators.BlockingOperatorNextTest.testNoBufferingOrBlockingOfSequence(rx.internal.operators.BlockingOperatorNextTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextIterator</mutatedClass><mutatedMethod>moveToNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>64</index><killingTest>rx.internal.operators.BlockingOperatorNextTest.testNoBufferingOrBlockingOfSequence(rx.internal.operators.BlockingOperatorNextTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextIterator</mutatedClass><mutatedMethod>moveToNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>75</index><killingTest>rx.internal.operators.BlockingOperatorNextTest.testOnError(rx.internal.operators.BlockingOperatorNextTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextIterator</mutatedClass><mutatedMethod>moveToNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>53</index><killingTest>rx.internal.operators.BlockingOperatorNextTest.testNoBufferingOrBlockingOfSequence(rx.internal.operators.BlockingOperatorNextTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextIterator</mutatedClass><mutatedMethod>moveToNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>69</index><killingTest>rx.internal.operators.BlockingOperatorNextTest.testNoBufferingOrBlockingOfSequence(rx.internal.operators.BlockingOperatorNextTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextIterator</mutatedClass><mutatedMethod>moveToNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextIterator</mutatedClass><mutatedMethod>moveToNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>104</index><killingTest>rx.observables.BlockingObservableTest.testUnsubscribeFromNextWhenInterrupted(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextIterator</mutatedClass><mutatedMethod>moveToNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>108</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextIterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.BlockingOperatorNextTest.testNoBufferingOrBlockingOfSequence(rx.internal.operators.BlockingOperatorNextTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextIterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.internal.operators.BlockingOperatorNextTest.testNoBufferingOrBlockingOfSequence(rx.internal.operators.BlockingOperatorNextTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextIterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>27</index><killingTest>rx.internal.operators.BlockingOperatorNextTest.testNoBufferingOrBlockingOfSequence(rx.internal.operators.BlockingOperatorNextTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13$1</mutatedClass><mutatedMethod>dispose</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>905</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.CompletableTest.usingErrorLazy(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13$1</mutatedClass><mutatedMethod>dispose</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>904</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13$1</mutatedClass><mutatedMethod>dispose</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>907</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest>rx.CompletableTest.usingErrorLazy(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13$1</mutatedClass><mutatedMethod>dispose</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>909</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>916</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.CompletableTest.usingNormalEager(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>917</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.CompletableTest.usingNormalEager(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>929</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>50</index><killingTest>rx.CompletableTest.usingNormalLazy(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>919</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.CompletableTest.usingNormalEager(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>921</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>35</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>927</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>44</index><killingTest>rx.CompletableTest.usingNormalEager(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>930</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>54</index><killingTest>rx.CompletableTest.usingNormalLazy(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>936</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.CompletableTest.usingErrorLazy(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>937</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.CompletableTest.usingErrorEager(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>948</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>59</index><killingTest>rx.CompletableTest.usingErrorLazy(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>939</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.CompletableTest.usingErrorEager(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>946</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>53</index><killingTest>rx.CompletableTest.usingErrorEager(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>949</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>63</index><killingTest>rx.CompletableTest.usingErrorLazy(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13$1</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>956</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorLatest.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.BlockingOperatorLatestTest.testEmpty(rx.internal.operators.BlockingOperatorLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorLatest.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.internal.operators.BlockingOperatorLatestTest.testEmpty(rx.internal.operators.BlockingOperatorLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorLatest.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest>rx.internal.operators.BlockingOperatorLatestTest.testEmpty(rx.internal.operators.BlockingOperatorLatestTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BlockingOperatorLatest.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorLatest.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest>rx.internal.operators.BlockingOperatorLatestTest.testEmpty(rx.internal.operators.BlockingOperatorLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorLatest.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>83</index><killingTest>rx.internal.operators.BlockingOperatorLatestTest.testEmpty(rx.internal.operators.BlockingOperatorLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorLatest.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>97</index><killingTest>rx.internal.operators.BlockingOperatorLatestTest.testEmpty(rx.internal.operators.BlockingOperatorLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorLatest.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>105</index><killingTest>rx.internal.operators.BlockingOperatorLatestTest.testEmpty(rx.internal.operators.BlockingOperatorLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorLatest.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>37</index><killingTest>rx.observables.BlockingObservableTest.testUnsubscribeFromLatestWhenInterrupted(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorLatest.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>48</index><killingTest>rx.observables.BlockingObservableTest.testUnsubscribeFromLatestWhenInterrupted(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BlockingOperatorLatest.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>52</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorLatest.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.BlockingOperatorLatestTest.testFasterSource(rx.internal.operators.BlockingOperatorLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorLatest.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.BlockingOperatorLatestTest.testFasterSource(rx.internal.operators.BlockingOperatorLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorLatest.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>26</index><killingTest>rx.internal.operators.BlockingOperatorLatestTest.testFasterSource(rx.internal.operators.BlockingOperatorLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorLatest.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Notification;)V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.internal.operators.BlockingOperatorLatestTest.testEmpty(rx.internal.operators.BlockingOperatorLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorLatest.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Notification;)V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest>rx.internal.operators.BlockingOperatorLatestTest.testEmpty(rx.internal.operators.BlockingOperatorLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorLatest.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorLatest$LatestObserverIterator</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Notification;)V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.internal.operators.BlockingOperatorLatestTest.testEmpty(rx.internal.operators.BlockingOperatorLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$AmbSubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(JLrx/Subscriber;Lrx/internal/operators/OnSubscribeAmb$Selection;)V</methodDescription><lineNumber>278</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testBackpressure(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$AmbSubscriber</mutatedClass><mutatedMethod>isSelected</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>310</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testAmb2(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$AmbSubscriber</mutatedClass><mutatedMethod>isSelected</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>313</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testAmb2(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$AmbSubscriber</mutatedClass><mutatedMethod>isSelected</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>318</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testAmb3(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$AmbSubscriber</mutatedClass><mutatedMethod>isSelected</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>311</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testAmb2(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$AmbSubscriber</mutatedClass><mutatedMethod>isSelected</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>316</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$AmbSubscriber</mutatedClass><mutatedMethod>isSelected</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>52</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testAmb3(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$AmbSubscriber</mutatedClass><mutatedMethod>isSelected</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>325</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>62</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$AmbSubscriber</mutatedClass><mutatedMethod>isSelected</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>319</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>43</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$AmbSubscriber</mutatedClass><mutatedMethod>isSelected</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>324</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>58</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$AmbSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>295</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testAmb3(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$AmbSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>298</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testAmb3(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$AmbSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>303</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testAmb2(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$AmbSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>306</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testAmb2(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$AmbSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>287</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.ObservableTests.testAmbWith(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$AmbSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest>rx.ObservableTests.testAmbWith(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$AmbSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>282</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testProducerRequestThroughAmb(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>255</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>255</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>261</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>44</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>270</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>59</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>270</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>65</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>287</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>86</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>259</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>36</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>286</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>82</index><killingTest>rx.ObservableTests.testReplay(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/Observable;I)Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorReplayTest.testSubscribersComeAndGoAtRequestBoundaries2(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/Observable;I)Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/Observable;I)Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressureBounded(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/Observable;JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorReplayTest.testWindowedReplay(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/Observable;JLjava/util/concurrent/TimeUnit;Lrx/Scheduler;I)Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorReplayTest.testBufferedWindowReplay(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/functions/Func0;)Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>235</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>24</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay</mutatedClass><mutatedMethod>multicastSelector</mutatedMethod><methodDescription>(Lrx/functions/Func0;Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorReplayTest.testSynchronousDisconnect(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay</mutatedClass><mutatedMethod>observeOn</mutatedMethod><methodDescription>(Lrx/observables/ConnectableObservable;Lrx/Scheduler;)Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorBufferTest.testSkipAndCountBuffersWithGaps(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>221</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>227</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>49</index><killingTest>rx.internal.operators.OperatorBufferTest.testSkipAndCountBuffersWithGaps(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>227</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>54</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>227</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>65</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorBufferTest.testSkipAndCountOverlappingBuffers(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorBufferTest.testSkipAndCountOverlappingBuffers(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><killingTest>rx.internal.operators.OperatorBufferTest.testSkipAndCountOverlappingBuffers(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>202</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>59</index><killingTest>rx.internal.operators.OperatorBufferTest.testSkipAndCountOverlappingBuffers(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>203</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>63</index><killingTest>rx.internal.operators.OperatorBufferTest.testSkipAndCountOverlappingBuffers(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>204</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>69</index><killingTest>rx.internal.operators.OperatorBufferTest.testSkipAndCountOverlappingBuffers(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$2</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestThroughBufferWithSize4(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>()Lrx/internal/operators/BufferUntilSubscriber;</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest>rx.observables.AsyncOnSubscribeTest.testSerializesConcurrentObservables(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>58</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>69</index><killingTest>rx.observables.AsyncOnSubscribeTest.testSerializesConcurrentObservables(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber</mutatedClass><mutatedMethod>hasObservers</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber</mutatedClass><mutatedMethod>hasObservers</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest>rx.observables.AsyncOnSubscribeTest.testSerializesConcurrentObservables(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.observables.AsyncOnSubscribeTest.testSerializesConcurrentObservables(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$ExactSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>294</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithTimeTake1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$ExactSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>301</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>51</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithTimeTake1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$ExactSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>303</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>63</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>268</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorBufferTest.testTimed(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>265</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>275</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>59</index><killingTest>rx.internal.operators.OperatorBufferTest.testTimed(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>277</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>72</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>280</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>81</index><killingTest>rx.internal.operators.OperatorBufferTest.testTimed(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>281</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>85</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithTimeThrows(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>258</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>49</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithTimeThrows(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>259</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>53</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>235</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithTimeTake1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithTimeTake1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>244</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>70</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithTimeTake1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$ExactSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>245</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>76</index><killingTest>rx.internal.operators.OperatorBufferTest.testTimedAndCount(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AtomicReferenceArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.AtomicReferenceArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>29</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>15</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AtomicReferenceArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.AtomicReferenceArrayQueue</mutatedClass><mutatedMethod>calcElementOffset</mutatedMethod><methodDescription>(J)I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AtomicReferenceArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.AtomicReferenceArrayQueue</mutatedClass><mutatedMethod>calcElementOffset</mutatedMethod><methodDescription>(J)I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AtomicReferenceArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.AtomicReferenceArrayQueue</mutatedClass><mutatedMethod>calcElementOffset</mutatedMethod><methodDescription>(JI)I</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>6</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AtomicReferenceArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.AtomicReferenceArrayQueue</mutatedClass><mutatedMethod>calcElementOffset</mutatedMethod><methodDescription>(JI)I</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AtomicReferenceArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.AtomicReferenceArrayQueue</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>39</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AtomicReferenceArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.AtomicReferenceArrayQueue</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>39</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AtomicReferenceArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.AtomicReferenceArrayQueue</mutatedClass><mutatedMethod>lpElement</mutatedMethod><methodDescription>(I)Ljava/lang/Object;</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AtomicReferenceArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.AtomicReferenceArrayQueue</mutatedClass><mutatedMethod>lpElement</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AtomicReferenceArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.AtomicReferenceArrayQueue</mutatedClass><mutatedMethod>lvElement</mutatedMethod><methodDescription>(I)Ljava/lang/Object;</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AtomicReferenceArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.AtomicReferenceArrayQueue</mutatedClass><mutatedMethod>lvElement</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AtomicReferenceArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.AtomicReferenceArrayQueue</mutatedClass><mutatedMethod>soElement</mutatedMethod><methodDescription>(ILjava/lang/Object;)V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AtomicReferenceArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.AtomicReferenceArrayQueue</mutatedClass><mutatedMethod>soElement</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscExactAtomicArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AtomicReferenceArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.AtomicReferenceArrayQueue</mutatedClass><mutatedMethod>spElement</mutatedMethod><methodDescription>(ILjava/lang/Object;)V</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AtomicReferenceArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.AtomicReferenceArrayQueue</mutatedClass><mutatedMethod>spElement</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AtomicReferenceArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.AtomicReferenceArrayQueue</mutatedClass><mutatedMethod>svElement</mutatedMethod><methodDescription>(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BlockingOperatorToFuture.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToFuture$2</mutatedClass><mutatedMethod>cancel</mutatedMethod><methodDescription>(Z)Z</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToFuture.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToFuture$2</mutatedClass><mutatedMethod>cancel</mutatedMethod><methodDescription>(Z)Z</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.BlockingOperatorToFutureTest.testGetAfterCancel(rx.internal.operators.BlockingOperatorToFutureTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToFuture.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToFuture$2</mutatedClass><mutatedMethod>cancel</mutatedMethod><methodDescription>(Z)Z</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>27</index><killingTest>rx.internal.operators.BlockingOperatorToFutureTest.testGetAfterCancel(rx.internal.operators.BlockingOperatorToFutureTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>BlockingOperatorToFuture.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToFuture$2</mutatedClass><mutatedMethod>cancel</mutatedMethod><methodDescription>(Z)Z</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BlockingOperatorToFuture.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToFuture$2</mutatedClass><mutatedMethod>cancel</mutatedMethod><methodDescription>(Z)Z</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BlockingOperatorToFuture.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToFuture$2</mutatedClass><mutatedMethod>cancel</mutatedMethod><methodDescription>(Z)Z</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToFuture.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToFuture$2</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.BlockingOperatorToFutureTest.testToFuture(rx.internal.operators.BlockingOperatorToFutureTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToFuture.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToFuture$2</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorMaterializeTest.testMultipleSubscribes(rx.internal.operators.OperatorMaterializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToFuture.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToFuture$2</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.BlockingOperatorToFutureTest.testGetWithTimeoutAfterCancel(rx.internal.operators.BlockingOperatorToFutureTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BlockingOperatorToFuture.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToFuture$2</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToFuture.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToFuture$2</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.BlockingOperatorToFutureTest.testGetAfterCancel(rx.internal.operators.BlockingOperatorToFutureTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToFuture.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToFuture$2</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.internal.operators.BlockingOperatorToFutureTest.testGetAfterCancel(rx.internal.operators.BlockingOperatorToFutureTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToFuture.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToFuture$2</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>39</index><killingTest>rx.internal.operators.BlockingOperatorToFutureTest.testToFuture(rx.internal.operators.BlockingOperatorToFutureTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>BlockingOperatorToFuture.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToFuture$2</mutatedClass><mutatedMethod>isCancelled</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>BlockingOperatorToFuture.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToFuture$2</mutatedClass><mutatedMethod>isDone</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>BlockingOperatorToFuture.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToFuture$2</mutatedClass><mutatedMethod>isDone</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastTimed$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorTakeLastTimedTest.takeLastTimedDelayCompletion(rx.internal.operators.OperatorTakeLastTimedTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTakeLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastTimed$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastTimed$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest>rx.internal.operators.OperatorTakeLastTimedTest.takeLastTimedWithZeroCapacity(rx.internal.operators.OperatorTakeLastTimedTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTakeLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastTimed$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTakeLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastTimed$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastTimed$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorTakeLastTimedTest.takeLastTimedThrowingSource(rx.internal.operators.OperatorTakeLastTimedTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTakeLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastTimed$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTakeLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastTimed$1</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastTimed$1</mutatedClass><mutatedMethod>runEvictionPolicy</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorTakeLastTimedTest.takeLastTimedWithZeroCapacity(rx.internal.operators.OperatorTakeLastTimedTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorTakeLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastTimed$1</mutatedClass><mutatedMethod>runEvictionPolicy</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastTimed$1</mutatedClass><mutatedMethod>runEvictionPolicy</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>52</index><killingTest>rx.internal.operators.OperatorTakeLastTimedTest.takeLastTimed(rx.internal.operators.OperatorTakeLastTimedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastTimed$1</mutatedClass><mutatedMethod>runEvictionPolicy</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>50</index><killingTest>rx.internal.operators.OperatorTakeLastTimedTest.takeLastTimedWithCapacity(rx.internal.operators.OperatorTakeLastTimedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastTimed$1</mutatedClass><mutatedMethod>runEvictionPolicy</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorTakeLastTimedTest.takeLastTimedWithZeroCapacity(rx.internal.operators.OperatorTakeLastTimedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastTimed$1</mutatedClass><mutatedMethod>runEvictionPolicy</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorTakeLastTimedTest.takeLastTimedWithZeroCapacity(rx.internal.operators.OperatorTakeLastTimedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastTimed$1</mutatedClass><mutatedMethod>runEvictionPolicy</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest>rx.internal.operators.OperatorTakeLastTimedTest.takeLastTimedWithZeroCapacity(rx.internal.operators.OperatorTakeLastTimedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastTimed$1</mutatedClass><mutatedMethod>runEvictionPolicy</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>52</index><killingTest>rx.internal.operators.OperatorTakeLastTimedTest.takeLastTimedWithCapacity(rx.internal.operators.OperatorTakeLastTimedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BaseLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.BaseLinkedAtomicQueue</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BaseLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.BaseLinkedAtomicQueue</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BaseLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.BaseLinkedAtomicQueue</mutatedClass><mutatedMethod>lpConsumerNode</mutatedMethod><methodDescription>()Lrx/internal/util/atomic/LinkedQueueNode;</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BaseLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.BaseLinkedAtomicQueue</mutatedClass><mutatedMethod>lpProducerNode</mutatedMethod><methodDescription>()Lrx/internal/util/atomic/LinkedQueueNode;</methodDescription><lineNumber>34</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BaseLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.BaseLinkedAtomicQueue</mutatedClass><mutatedMethod>lvConsumerNode</mutatedMethod><methodDescription>()Lrx/internal/util/atomic/LinkedQueueNode;</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BaseLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.BaseLinkedAtomicQueue</mutatedClass><mutatedMethod>lvProducerNode</mutatedMethod><methodDescription>()Lrx/internal/util/atomic/LinkedQueueNode;</methodDescription><lineNumber>31</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BaseLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.BaseLinkedAtomicQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BaseLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.BaseLinkedAtomicQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>41</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BaseLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.BaseLinkedAtomicQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BaseLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.BaseLinkedAtomicQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BaseLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.BaseLinkedAtomicQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BaseLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.BaseLinkedAtomicQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>49</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BaseLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.BaseLinkedAtomicQueue</mutatedClass><mutatedMethod>spConsumerNode</mutatedMethod><methodDescription>(Lrx/internal/util/atomic/LinkedQueueNode;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BaseLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.BaseLinkedAtomicQueue</mutatedClass><mutatedMethod>spProducerNode</mutatedMethod><methodDescription>(Lrx/internal/util/atomic/LinkedQueueNode;)V</methodDescription><lineNumber>37</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BaseLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.BaseLinkedAtomicQueue</mutatedClass><mutatedMethod>xchgProducerNode</mutatedMethod><methodDescription>(Lrx/internal/util/atomic/LinkedQueueNode;)Lrx/internal/util/atomic/LinkedQueueNode;</methodDescription><lineNumber>40</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueueNull(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>45</index><killingTest>rx.CompletableTest.mergeMultipleSources(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>111</index><killingTest>rx.CompletableTest.mergeMultipleSources(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMergeArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>36</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><killingTest>rx.CompletableTest.mergeMultipleSources(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>54</index><killingTest>rx.CompletableTest.mergeMultipleSources(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>62</index><killingTest>rx.CompletableTest.mergeMultipleSources(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMergeArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>80</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>118</index><killingTest>rx.CompletableTest.mergeMultipleSources(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>125</index><killingTest>rx.CompletableTest.mergeMultipleSources(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMergeArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>39</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMergeArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>66</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>85</index><killingTest>rx.CompletableTest.mergeMultipleOneIsNull(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMergeArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>95</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>108</index><killingTest>rx.CompletableTest.mergeMultipleSources(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>129</index><killingTest>rx.CompletableTest.mergeMultipleSources(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ScheduledAction.java</sourceFile><mutatedClass>rx.internal.schedulers.ScheduledAction</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Ljava/util/concurrent/Future;)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScheduledAction.java</sourceFile><mutatedClass>rx.internal.schedulers.ScheduledAction</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.schedulers.NewThreadSchedulerTest.testNoSelfInterrupt(rx.schedulers.NewThreadSchedulerTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ScheduledAction.java</sourceFile><mutatedClass>rx.internal.schedulers.ScheduledAction</mutatedClass><mutatedMethod>addParent</mutatedMethod><methodDescription>(Lrx/internal/util/SubscriptionList;)V</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ScheduledAction.java</sourceFile><mutatedClass>rx.internal.schedulers.ScheduledAction</mutatedClass><mutatedMethod>addParent</mutatedMethod><methodDescription>(Lrx/subscriptions/CompositeSubscription;)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScheduledAction.java</sourceFile><mutatedClass>rx.internal.schedulers.ScheduledAction</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testCancelledTasksDontRun(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ScheduledAction.java</sourceFile><mutatedClass>rx.internal.schedulers.ScheduledAction</mutatedClass><mutatedMethod>run</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScheduledAction.java</sourceFile><mutatedClass>rx.internal.schedulers.ScheduledAction</mutatedClass><mutatedMethod>run</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.schedulers.NewThreadSchedulerTest.testNoSelfInterrupt(rx.schedulers.NewThreadSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ScheduledAction.java</sourceFile><mutatedClass>rx.internal.schedulers.ScheduledAction</mutatedClass><mutatedMethod>run</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScheduledAction.java</sourceFile><mutatedClass>rx.internal.schedulers.ScheduledAction</mutatedClass><mutatedMethod>run</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.schedulers.NewThreadSchedulerTest.testNoSelfInterrupt(rx.schedulers.NewThreadSchedulerTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ScheduledAction.java</sourceFile><mutatedClass>rx.internal.schedulers.ScheduledAction</mutatedClass><mutatedMethod>run</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>55</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScheduledAction.java</sourceFile><mutatedClass>rx.internal.schedulers.ScheduledAction</mutatedClass><mutatedMethod>run</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>66</index><killingTest>rx.schedulers.ComputationSchedulerTests.testUnhandledErrorIsDeliveredToThreadHandler(rx.schedulers.ComputationSchedulerTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScheduledAction.java</sourceFile><mutatedClass>rx.internal.schedulers.ScheduledAction</mutatedClass><mutatedMethod>run</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>70</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testSequenceOfDelayedActions(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ScheduledAction.java</sourceFile><mutatedClass>rx.internal.schedulers.ScheduledAction</mutatedClass><mutatedMethod>run</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>80</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScheduledAction.java</sourceFile><mutatedClass>rx.internal.schedulers.ScheduledAction</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testCancelledTasksDontRun(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScheduledAction.java</sourceFile><mutatedClass>rx.internal.schedulers.ScheduledAction</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testCancelledTasksDontRun(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime$DebounceState</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime$DebounceState</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(ILrx/Subscriber;Lrx/Subscriber;)V</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorDebounceTest.testDebounceWithCompleted(rx.internal.operators.OperatorDebounceTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime$DebounceState</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(ILrx/Subscriber;Lrx/Subscriber;)V</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorDebounceTest.testDebounceWithCompleted(rx.internal.operators.OperatorDebounceTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime$DebounceState</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(ILrx/Subscriber;Lrx/Subscriber;)V</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><killingTest>rx.internal.operators.OperatorDebounceTest.testDebounceWithCompleted(rx.internal.operators.OperatorDebounceTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime$DebounceState</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(ILrx/Subscriber;Lrx/Subscriber;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>94</index><killingTest>rx.internal.operators.OperatorDebounceTest.testDebounceWithError(rx.internal.operators.OperatorDebounceTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime$DebounceState</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(ILrx/Subscriber;Lrx/Subscriber;)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>66</index><killingTest>rx.internal.operators.OperatorDebounceTest.testDebounceWithCompleted(rx.internal.operators.OperatorDebounceTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime$DebounceState</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(ILrx/Subscriber;Lrx/Subscriber;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>79</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime$DebounceState</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(ILrx/Subscriber;Lrx/Subscriber;)V</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>125</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime$DebounceState</mutatedClass><mutatedMethod>emitAndComplete</mutatedMethod><methodDescription>(Lrx/Subscriber;Lrx/Subscriber;)V</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorDebounceTest.testDebounceWithCompleted(rx.internal.operators.OperatorDebounceTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime$DebounceState</mutatedClass><mutatedMethod>emitAndComplete</mutatedMethod><methodDescription>(Lrx/Subscriber;Lrx/Subscriber;)V</methodDescription><lineNumber>166</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>67</index><killingTest>rx.internal.operators.OperatorDebounceTest.debounceSelectorLastIsNotLost(rx.internal.operators.OperatorDebounceTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime$DebounceState</mutatedClass><mutatedMethod>emitAndComplete</mutatedMethod><methodDescription>(Lrx/Subscriber;Lrx/Subscriber;)V</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>72</index><killingTest>rx.internal.operators.OperatorDebounceTest.debounceSelectorLastIsNotLost(rx.internal.operators.OperatorDebounceTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime$DebounceState</mutatedClass><mutatedMethod>emitAndComplete</mutatedMethod><methodDescription>(Lrx/Subscriber;Lrx/Subscriber;)V</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>85</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime$DebounceState</mutatedClass><mutatedMethod>emitAndComplete</mutatedMethod><methodDescription>(Lrx/Subscriber;Lrx/Subscriber;)V</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>93</index><killingTest>rx.internal.operators.OperatorDebounceTest.testDebounceNeverEmits(rx.internal.operators.OperatorDebounceTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime$DebounceState</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime$DebounceState</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest>rx.internal.operators.OperatorDebounceTest.testDebounceWithCompleted(rx.internal.operators.OperatorDebounceTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToIterator.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>25</index><killingTest>rx.internal.operators.BlockingOperatorToIteratorTest.testIteratorExertBackpressure(rx.internal.operators.BlockingOperatorToIteratorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToIterator.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>18</index><killingTest>rx.internal.operators.BlockingOperatorToIteratorTest.testIteratorExertBackpressure(rx.internal.operators.BlockingOperatorToIteratorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToIterator.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testRangeWithOverflow5(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToIterator.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.internal.operators.BlockingOperatorToIteratorTest.testIteratorExertBackpressure(rx.internal.operators.BlockingOperatorToIteratorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToIterator.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>44</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testRangeWithOverflow5(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToIterator.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>58</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testRangeWithOverflow5(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToIterator.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>66</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testRangeWithOverflow5(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToIterator.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest>rx.internal.operators.BlockingOperatorToIteratorTest.testIteratorExertBackpressure(rx.internal.operators.BlockingOperatorToIteratorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToIterator.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.BlockingOperatorToIteratorTest.testToIteratorWithException(rx.internal.operators.BlockingOperatorToIteratorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToIterator.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest>rx.internal.operators.BlockingOperatorToIteratorTest.testToIteratorWithException(rx.internal.operators.BlockingOperatorToIteratorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToIterator.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.BlockingOperatorToIteratorTest.testIteratorExertBackpressure(rx.internal.operators.BlockingOperatorToIteratorTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BlockingOperatorToIterator.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator</mutatedClass><mutatedMethod>take</mutatedMethod><methodDescription>()Lrx/Notification;</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToIterator.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator</mutatedClass><mutatedMethod>take</mutatedMethod><methodDescription>()Lrx/Notification;</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testRangeWithOverflow5(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToIterator.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator</mutatedClass><mutatedMethod>take</mutatedMethod><methodDescription>()Lrx/Notification;</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><killingTest>rx.internal.operators.OperatorMergeMaxConcurrentTest.testWhenMaxConcurrentIsOne(rx.internal.operators.OperatorMergeMaxConcurrentTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToIterator.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToIterator$SubscriberIterator</mutatedClass><mutatedMethod>take</mutatedMethod><methodDescription>()Lrx/Notification;</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest>rx.observables.BlockingObservableTest.testUnsubscribeFromGetIteratorWhenInterrupted(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>TrampolineScheduler.java</sourceFile><mutatedClass>rx.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler</mutatedClass><mutatedMethod>enqueue</mutatedMethod><methodDescription>(Lrx/functions/Action0;J)Lrx/Subscription;</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>60</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>TrampolineScheduler.java</sourceFile><mutatedClass>rx.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler</mutatedClass><mutatedMethod>enqueue</mutatedMethod><methodDescription>(Lrx/functions/Action0;J)Lrx/Subscription;</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>TrampolineScheduler.java</sourceFile><mutatedClass>rx.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler</mutatedClass><mutatedMethod>enqueue</mutatedMethod><methodDescription>(Lrx/functions/Action0;J)Lrx/Subscription;</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>TrampolineScheduler.java</sourceFile><mutatedClass>rx.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler</mutatedClass><mutatedMethod>enqueue</mutatedMethod><methodDescription>(Lrx/functions/Action0;J)Lrx/Subscription;</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>48</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>TrampolineScheduler.java</sourceFile><mutatedClass>rx.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler</mutatedClass><mutatedMethod>enqueue</mutatedMethod><methodDescription>(Lrx/functions/Action0;J)Lrx/Subscription;</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>60</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>TrampolineScheduler.java</sourceFile><mutatedClass>rx.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler</mutatedClass><mutatedMethod>enqueue</mutatedMethod><methodDescription>(Lrx/functions/Action0;J)Lrx/Subscription;</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>TrampolineScheduler.java</sourceFile><mutatedClass>rx.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler</mutatedClass><mutatedMethod>enqueue</mutatedMethod><methodDescription>(Lrx/functions/Action0;J)Lrx/Subscription;</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>64</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>TrampolineScheduler.java</sourceFile><mutatedClass>rx.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler</mutatedClass><mutatedMethod>enqueue</mutatedMethod><methodDescription>(Lrx/functions/Action0;J)Lrx/Subscription;</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>74</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>TrampolineScheduler.java</sourceFile><mutatedClass>rx.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler</mutatedClass><mutatedMethod>enqueue</mutatedMethod><methodDescription>(Lrx/functions/Action0;J)Lrx/Subscription;</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>53</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TrampolineScheduler.java</sourceFile><mutatedClass>rx.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorRetryWithPredicateTest.testRetryOnSpecificException(rx.internal.operators.OperatorRetryWithPredicateTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>TrampolineScheduler.java</sourceFile><mutatedClass>rx.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TrampolineScheduler.java</sourceFile><mutatedClass>rx.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>8</index><killingTest>rx.schedulers.TrampolineSchedulerTest.testSequenceOfDelayedActions(rx.schedulers.TrampolineSchedulerTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>TrampolineScheduler.java</sourceFile><mutatedClass>rx.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>TrampolineScheduler.java</sourceFile><mutatedClass>rx.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RefCountSubscription.java</sourceFile><mutatedClass>rx.subscriptions.RefCountSubscription</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.subscriptions.RefCountSubscriptionTest.testImmediateUnsubscribe(rx.subscriptions.RefCountSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RefCountSubscription.java</sourceFile><mutatedClass>rx.subscriptions.RefCountSubscription</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>()Lrx/Subscription;</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.subscriptions.RefCountSubscriptionTest.testMultipleClientsMainUnsubscribeFirst(rx.subscriptions.RefCountSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>RefCountSubscription.java</sourceFile><mutatedClass>rx.subscriptions.RefCountSubscription</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>()Lrx/Subscription;</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>RefCountSubscription.java</sourceFile><mutatedClass>rx.subscriptions.RefCountSubscription</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>()Lrx/Subscription;</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RefCountSubscription.java</sourceFile><mutatedClass>rx.subscriptions.RefCountSubscription</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>()Lrx/Subscription;</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>41</index><killingTest>rx.subscriptions.RefCountSubscriptionTest.testMultipleClientsMainUnsubscribeFirst(rx.subscriptions.RefCountSubscriptionTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>RefCountSubscription.java</sourceFile><mutatedClass>rx.subscriptions.RefCountSubscription</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RefCountSubscription.java</sourceFile><mutatedClass>rx.subscriptions.RefCountSubscription</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.subscriptions.RefCountSubscriptionTest.testImmediateUnsubscribe(rx.subscriptions.RefCountSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RefCountSubscription.java</sourceFile><mutatedClass>rx.subscriptions.RefCountSubscription</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><killingTest>rx.subscriptions.RefCountSubscriptionTest.testImmediateUnsubscribe(rx.subscriptions.RefCountSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RefCountSubscription.java</sourceFile><mutatedClass>rx.subscriptions.RefCountSubscription</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest>rx.subscriptions.RefCountSubscriptionTest.testImmediateUnsubscribe(rx.subscriptions.RefCountSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>RefCountSubscription.java</sourceFile><mutatedClass>rx.subscriptions.RefCountSubscription</mutatedClass><mutatedMethod>unsubscribeAChild</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RefCountSubscription.java</sourceFile><mutatedClass>rx.subscriptions.RefCountSubscription</mutatedClass><mutatedMethod>unsubscribeAChild</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.subscriptions.RefCountSubscriptionTest.testMultipleClientsMainUnsubscribeFirst(rx.subscriptions.RefCountSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RefCountSubscription.java</sourceFile><mutatedClass>rx.subscriptions.RefCountSubscription</mutatedClass><mutatedMethod>unsubscribeActualIfApplicable</mutatedMethod><methodDescription>(Lrx/subscriptions/RefCountSubscription$State;)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.subscriptions.RefCountSubscriptionTest.testImmediateUnsubscribe(rx.subscriptions.RefCountSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RefCountSubscription.java</sourceFile><mutatedClass>rx.subscriptions.RefCountSubscription</mutatedClass><mutatedMethod>unsubscribeActualIfApplicable</mutatedMethod><methodDescription>(Lrx/subscriptions/RefCountSubscription$State;)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.subscriptions.RefCountSubscriptionTest.testImmediateUnsubscribe(rx.subscriptions.RefCountSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RefCountSubscription.java</sourceFile><mutatedClass>rx.subscriptions.RefCountSubscription</mutatedClass><mutatedMethod>unsubscribeActualIfApplicable</mutatedMethod><methodDescription>(Lrx/subscriptions/RefCountSubscription$State;)V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.subscriptions.RefCountSubscriptionTest.testImmediateUnsubscribe(rx.subscriptions.RefCountSubscriptionTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$2$1</mutatedClass><mutatedMethod>decrementConsumerCapacity</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>261</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$2$1</mutatedClass><mutatedMethod>decrementConsumerCapacity</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$2$1</mutatedClass><mutatedMethod>decrementConsumerCapacity</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>261</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$2$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.CompletableTest.retryNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$2$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>232</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$2$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest>rx.CompletableTest.retryNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$2$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.CompletableTest.repeatError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$2$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>241</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$2$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>242</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.CompletableTest.repeatError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$2$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorRetryTest.testUnsubscribeFromRetry(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$2$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>249</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorRetryTest.testUnsubscribeFromRetry(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$2$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$2$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>251</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorRetryTest.testRetryWithBackpressure(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$2$1</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeSingleTest.testRepeatObservableThrowsError(rx.internal.operators.OnSubscribeSingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions</mutatedClass><mutatedMethod>fromAction</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/functions/FuncN;</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions</mutatedClass><mutatedMethod>fromAction</mutatedMethod><methodDescription>(Lrx/functions/Action1;)Lrx/functions/FuncN;</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions</mutatedClass><mutatedMethod>fromAction</mutatedMethod><methodDescription>(Lrx/functions/Action2;)Lrx/functions/FuncN;</methodDescription><lineNumber>295</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions</mutatedClass><mutatedMethod>fromAction</mutatedMethod><methodDescription>(Lrx/functions/Action3;)Lrx/functions/FuncN;</methodDescription><lineNumber>318</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions</mutatedClass><mutatedMethod>fromFunc</mutatedMethod><methodDescription>(Lrx/functions/Func0;)Lrx/functions/FuncN;</methodDescription><lineNumber>31</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions</mutatedClass><mutatedMethod>fromFunc</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/functions/FuncN;</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions</mutatedClass><mutatedMethod>fromFunc</mutatedMethod><methodDescription>(Lrx/functions/Func2;)Lrx/functions/FuncN;</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions</mutatedClass><mutatedMethod>fromFunc</mutatedMethod><methodDescription>(Lrx/functions/Func3;)Lrx/functions/FuncN;</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test3SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions</mutatedClass><mutatedMethod>fromFunc</mutatedMethod><methodDescription>(Lrx/functions/Func4;)Lrx/functions/FuncN;</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test4SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions</mutatedClass><mutatedMethod>fromFunc</mutatedMethod><methodDescription>(Lrx/functions/Func5;)Lrx/functions/FuncN;</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test5SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions</mutatedClass><mutatedMethod>fromFunc</mutatedMethod><methodDescription>(Lrx/functions/Func6;)Lrx/functions/FuncN;</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test6SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions</mutatedClass><mutatedMethod>fromFunc</mutatedMethod><methodDescription>(Lrx/functions/Func7;)Lrx/functions/FuncN;</methodDescription><lineNumber>184</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test7SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions</mutatedClass><mutatedMethod>fromFunc</mutatedMethod><methodDescription>(Lrx/functions/Func8;)Lrx/functions/FuncN;</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test8SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions</mutatedClass><mutatedMethod>fromFunc</mutatedMethod><methodDescription>(Lrx/functions/Func9;)Lrx/functions/FuncN;</methodDescription><lineNumber>228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test9SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSingleObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithBONormal1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithSingleObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>76</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSingleObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>54</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithBONormal1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithSingleObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>65</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithSingleObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>187</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>109</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSingleObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithBOEmptyLastViaBoundary(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSingleObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>54</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithBOEmptyLastViaBoundary(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithSingleObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>67</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSingleObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>76</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithBOEmptyLastViaBoundary(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithSingleObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>80</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSingleObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithBOSourceThrows(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSingleObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>49</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithBOSourceThrows(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithSingleObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>53</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSingleObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithBONormal1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CompletableOnSubscribeConcatIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CompletableOnSubscribeConcatIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CompletableOnSubscribeConcatIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcatIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>61</index><killingTest>rx.CompletableTest.concatIterableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcatIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>97</index><killingTest>rx.CompletableTest.concatIterableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcatIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>120</index><killingTest>rx.CompletableTest.concatIterableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CompletableOnSubscribeConcatIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>53</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcatIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>66</index><killingTest>rx.CompletableTest.concatIterableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CompletableOnSubscribeConcatIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>89</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcatIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>106</index><killingTest>rx.CompletableTest.concatIterableWithNull(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcatIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>115</index><killingTest>rx.CompletableTest.concatIterableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcatIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest>rx.CompletableTest.concatIterableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcatIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.CompletableTest.concatIterableManyOneThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeConcatIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorOnErrorResumeNextViaFunctionTest.testOnErrorResumeReceivesErrorFromPreviousNonProtectedOperator(rx.internal.operators.OperatorOnErrorResumeNextViaFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>52</index><killingTest>rx.internal.operators.OperatorOnErrorResumeNextViaFunctionTest.testOnErrorResumeReceivesErrorFromPreviousNonProtectedOperator(rx.internal.operators.OperatorOnErrorResumeNextViaFunctionTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>41</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>58</index><killingTest>rx.internal.operators.OperatorOnErrorResumeNextViaFunctionTest.normalBackpressure(rx.internal.operators.OperatorOnErrorResumeNextViaFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>87</index><killingTest>rx.internal.operators.OperatorOnErrorReturnTest.testFunctionThrowsError(rx.internal.operators.OperatorOnErrorReturnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorOnErrorReturnTest.testFunctionThrowsError(rx.internal.operators.OperatorOnErrorReturnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorOnErrorReturnTest.testFunctionThrowsError(rx.internal.operators.OperatorOnErrorReturnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorOnErrorReturnTest.testFunctionThrowsError(rx.internal.operators.OperatorOnErrorReturnTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorDoOnEach.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnEach$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoOnEach.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnEach$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest>rx.ObservableDoOnTest.testDoOnCompleted(rx.ObservableDoOnTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorDoOnEach.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnEach$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorDoOnEach.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnEach$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>41</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoOnEach.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnEach$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorDoOnEachTest.testOnErrorThrows(rx.internal.operators.OperatorDoOnEachTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorDoOnEach.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnEach$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoOnEach.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnEach$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>25</index><killingTest>rx.internal.operators.OperatorDoOnEachTest.testOnErrorThrows(rx.internal.operators.OperatorDoOnEachTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorDoOnEach.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnEach$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>36</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoOnEach.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnEach$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>55</index><killingTest>rx.internal.operators.OperatorDoOnEachTest.testOnErrorThrows(rx.internal.operators.OperatorDoOnEachTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorDoOnEach.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnEach$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>65</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoOnEach.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnEach$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorIgnoreElementsTest.testDoesNotHangAndProcessesAllUsingBackpressure(rx.internal.operators.OperatorIgnoreElementsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoOnEach.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnEach$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorIgnoreElementsTest.testDoesNotHangAndProcessesAllUsingBackpressure(rx.internal.operators.OperatorIgnoreElementsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoOnEach.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnEach$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.exceptions.ExceptionsTest.testOnErrorExceptionIsThrownFromOnNext(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoOnEach.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnEach$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>39</index><killingTest>rx.ObservableDoOnTest.testDoOnEach(rx.ObservableDoOnTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>GenericScheduledExecutorService.java</sourceFile><mutatedClass>rx.internal.schedulers.GenericScheduledExecutorService</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>GenericScheduledExecutorService.java</sourceFile><mutatedClass>rx.internal.schedulers.GenericScheduledExecutorService</mutatedClass><mutatedMethod>getInstance</mutatedMethod><methodDescription>()Ljava/util/concurrent/ScheduledExecutorService;</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testNoTimedTaskPartRetention(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>GenericScheduledExecutorService.java</sourceFile><mutatedClass>rx.internal.schedulers.GenericScheduledExecutorService</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>GenericScheduledExecutorService.java</sourceFile><mutatedClass>rx.internal.schedulers.GenericScheduledExecutorService</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>GenericScheduledExecutorService.java</sourceFile><mutatedClass>rx.internal.schedulers.GenericScheduledExecutorService</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>GenericScheduledExecutorService.java</sourceFile><mutatedClass>rx.internal.schedulers.GenericScheduledExecutorService</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>GenericScheduledExecutorService.java</sourceFile><mutatedClass>rx.internal.schedulers.GenericScheduledExecutorService</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>22</index><killingTest>rx.ObservableTests.testErrorThrownIssue1685(rx.ObservableTests)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>GenericScheduledExecutorService.java</sourceFile><mutatedClass>rx.internal.schedulers.GenericScheduledExecutorService</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>GenericScheduledExecutorService.java</sourceFile><mutatedClass>rx.internal.schedulers.GenericScheduledExecutorService</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testStartIdempotence(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>GenericScheduledExecutorService.java</sourceFile><mutatedClass>rx.internal.schedulers.GenericScheduledExecutorService</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testStartIdempotence(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>GenericScheduledExecutorService.java</sourceFile><mutatedClass>rx.internal.schedulers.GenericScheduledExecutorService</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>41</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>GenericScheduledExecutorService.java</sourceFile><mutatedClass>rx.internal.schedulers.GenericScheduledExecutorService</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>46</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>GenericScheduledExecutorService.java</sourceFile><mutatedClass>rx.internal.schedulers.GenericScheduledExecutorService</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>GenericScheduledExecutorService.java</sourceFile><mutatedClass>rx.internal.schedulers.GenericScheduledExecutorService</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>56</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedAtomicQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>39</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedAtomicQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>40</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedAtomicQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>25</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedAtomicQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedAtomicQueueNull(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedAtomicQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>34</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedAtomicQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>25</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedAtomicQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedAtomicQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedAtomicQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedAtomicQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedAtomicQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedAtomicQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>24</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedAtomicQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>29</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedAtomicQueue.java</sourceFile><mutatedClass>rx.internal.util.atomic.SpscLinkedAtomicQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorElementAt.java</sourceFile><mutatedClass>rx.internal.operators.OperatorElementAt$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorElementAt.java</sourceFile><mutatedClass>rx.internal.operators.OperatorElementAt$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorElementAt.java</sourceFile><mutatedClass>rx.internal.operators.OperatorElementAt$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorElementAtTest.testElementAtOrDefaultWithIndexOutOfBounds(rx.internal.operators.OperatorElementAtTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorElementAt.java</sourceFile><mutatedClass>rx.internal.operators.OperatorElementAt$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.internal.operators.OperatorElementAtTest.testElementAtOrDefaultWithIndexOutOfBounds(rx.internal.operators.OperatorElementAtTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorElementAt.java</sourceFile><mutatedClass>rx.internal.operators.OperatorElementAt$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorElementAt.java</sourceFile><mutatedClass>rx.internal.operators.OperatorElementAt$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>47</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorElementAt.java</sourceFile><mutatedClass>rx.internal.operators.OperatorElementAt$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorElementAt.java</sourceFile><mutatedClass>rx.internal.operators.OperatorElementAt$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorElementAtTest.testElementAtOrDefault(rx.internal.operators.OperatorElementAtTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorElementAt.java</sourceFile><mutatedClass>rx.internal.operators.OperatorElementAt$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorElementAtTest.testElementAtOrDefault(rx.internal.operators.OperatorElementAtTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorElementAt.java</sourceFile><mutatedClass>rx.internal.operators.OperatorElementAt$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorElementAtTest.testElementAtOrDefault(rx.internal.operators.OperatorElementAtTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorElementAt.java</sourceFile><mutatedClass>rx.internal.operators.OperatorElementAt$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorElementAt.java</sourceFile><mutatedClass>rx.internal.operators.OperatorElementAt$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorElementAt.java</sourceFile><mutatedClass>rx.internal.operators.OperatorElementAt$1</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.onlyFirstShouldSubscribeAndLastUnsubscribe(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.onlyFirstShouldSubscribeAndLastUnsubscribe(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>47</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testRepeat(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.onlyFirstShouldSubscribeAndLastUnsubscribe(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.onlyFirstShouldSubscribeAndLastUnsubscribe(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>52</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>68</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.onlyFirstShouldSubscribeAndLastUnsubscribe(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>73</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testUpstreamErrorAllowsRetry(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>84</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testRepeat(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount</mutatedClass><mutatedMethod>disconnect</mutatedMethod><methodDescription>(Lrx/subscriptions/CompositeSubscription;)Lrx/Subscription;</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.onlyFirstShouldSubscribeAndLastUnsubscribe(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount</mutatedClass><mutatedMethod>doSubscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;Lrx/subscriptions/CompositeSubscription;)V</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.onlyFirstShouldSubscribeAndLastUnsubscribe(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscriber;Ljava/util/concurrent/atomic/AtomicBoolean;)Lrx/functions/Action1;</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.onlyFirstShouldSubscribeAndLastUnsubscribe(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable</mutatedClass><mutatedMethod>addValueAsLastCause</mutatedMethod><methodDescription>(Ljava/lang/Throwable;Ljava/lang/Object;)Ljava/lang/Throwable;</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.exceptions.ExceptionsNullTest.testOnErrorThrowableAddValueAsLastCause(rx.exceptions.ExceptionsNullTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable</mutatedClass><mutatedMethod>addValueAsLastCause</mutatedMethod><methodDescription>(Ljava/lang/Throwable;Ljava/lang/Object;)Ljava/lang/Throwable;</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable</mutatedClass><mutatedMethod>addValueAsLastCause</mutatedMethod><methodDescription>(Ljava/lang/Throwable;Ljava/lang/Object;)Ljava/lang/Throwable;</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest>rx.exceptions.ExceptionsNullTest.testOnErrorThrowableAddValueAsLastCause(rx.exceptions.ExceptionsNullTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable</mutatedClass><mutatedMethod>addValueAsLastCause</mutatedMethod><methodDescription>(Ljava/lang/Throwable;Ljava/lang/Object;)Ljava/lang/Throwable;</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable</mutatedClass><mutatedMethod>addValueAsLastCause</mutatedMethod><methodDescription>(Ljava/lang/Throwable;Ljava/lang/Object;)Ljava/lang/Throwable;</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>34</index><killingTest>rx.internal.operators.OperatorRetryWithPredicateTest.testIssue2826(rx.internal.operators.OperatorRetryWithPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable</mutatedClass><mutatedMethod>addValueAsLastCause</mutatedMethod><methodDescription>(Ljava/lang/Throwable;Ljava/lang/Object;)Ljava/lang/Throwable;</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>47</index><killingTest>rx.exceptions.ExceptionsNullTest.testOnErrorThrowableAddValueAsLastCause(rx.exceptions.ExceptionsNullTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable</mutatedClass><mutatedMethod>addValueAsLastCause</mutatedMethod><methodDescription>(Ljava/lang/Throwable;Ljava/lang/Object;)Ljava/lang/Throwable;</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>43</index><killingTest>rx.exceptions.OnNextValueTest.addOnNextValueExceptionAdded(rx.exceptions.OnNextValueTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Lrx/exceptions/OnErrorThrowable;</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.exceptions.ExceptionsNullTest.testOnErrorThrowableFrom(rx.exceptions.ExceptionsNullTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Lrx/exceptions/OnErrorThrowable;</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest>rx.exceptions.ExceptionsNullTest.testOnErrorThrowableFrom(rx.exceptions.ExceptionsNullTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Lrx/exceptions/OnErrorThrowable;</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Lrx/exceptions/OnErrorThrowable;</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>39</index><killingTest>rx.exceptions.ExceptionsNullTest.testOnErrorThrowableFrom(rx.exceptions.ExceptionsNullTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable</mutatedClass><mutatedMethod>isValueNull</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>44</index><killingTest>rx.CompletableTest.ambWithArraySecondFiresError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>117</index><killingTest>rx.CompletableTest.ambWithArraySecondFiresError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>44</index><killingTest>rx.CompletableTest.ambMultipleOneIsNull(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>157</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>53</index><killingTest>rx.CompletableTest.ambMultipleOneIsNull(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>61</index><killingTest>rx.CompletableTest.ambWithArraySecondFiresError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>75</index><killingTest>rx.CompletableTest.ambMultipleOneIsNull(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>101</index><killingTest>rx.CompletableTest.ambWithArraySecondFiresError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>104</index><killingTest>rx.CompletableTest.ambWithArraySecondFiresError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>163</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>79</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>84</index><killingTest>rx.CompletableTest.ambMultipleOneIsNull(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>166</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>91</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>114</index><killingTest>rx.CompletableTest.ambWithArraySecondFiresError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIJ)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IIJ)V</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>35</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool</mutatedClass><mutatedMethod>borrowObject</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.internal.util.IndexedRingBufferTest.removeMiddle(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool</mutatedClass><mutatedMethod>borrowObject</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest>rx.internal.util.IndexedRingBufferTest.removeMiddle(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool</mutatedClass><mutatedMethod>initialize</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>34</index><killingTest>rx.internal.util.IndexedRingBufferTest.add(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool</mutatedClass><mutatedMethod>initialize</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>45</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool</mutatedClass><mutatedMethod>initialize</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool</mutatedClass><mutatedMethod>initialize</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool</mutatedClass><mutatedMethod>returnObject</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorSingle.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSingle$ParentSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSingle.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSingle$ParentSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.internal.operators.BlockingOperatorToFutureTest.testToFuture(rx.internal.operators.BlockingOperatorToFutureTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSingle.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSingle$ParentSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest>rx.internal.operators.OperatorSingleTest.testSingleOrDefaultWithEmpty(rx.internal.operators.OperatorSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSingle.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSingle$ParentSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.internal.operators.BlockingOperatorToFutureTest.testToFuture(rx.internal.operators.BlockingOperatorToFutureTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorSingle.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSingle$ParentSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSingle.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSingle$ParentSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest>rx.internal.operators.OperatorSingleTest.testSingleOrDefaultWithEmpty(rx.internal.operators.OperatorSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSingle.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSingle$ParentSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>43</index><killingTest>rx.internal.operators.OperatorSingleTest.testSingleOrDefaultWithEmpty(rx.internal.operators.OperatorSingleTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorSingle.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSingle$ParentSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>54</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorSingle.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSingle$ParentSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSingle.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSingle$ParentSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.BlockingOperatorToFutureTest.testToFuture(rx.internal.operators.BlockingOperatorToFutureTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorSingle.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSingle$ParentSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSingle.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSingle$ParentSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSingle.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSingle$ParentSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorSingleTest.testSingleDoesNotRequestMoreThanItNeedsIf1Then2Requested(rx.internal.operators.OperatorSingleTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ConcurrentSequencedCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentSequencedCircularArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ConcurrentSequencedCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentSequencedCircularArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>38</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>11</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpmcOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ConcurrentSequencedCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentSequencedCircularArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>40</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ConcurrentSequencedCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentSequencedCircularArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>40</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>21</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpmcArrayQueueIterator(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ConcurrentSequencedCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentSequencedCircularArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>49</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ConcurrentSequencedCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentSequencedCircularArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpmcOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ConcurrentSequencedCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentSequencedCircularArrayQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>44</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpmcOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ConcurrentSequencedCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentSequencedCircularArrayQueue</mutatedClass><mutatedMethod>calcSequenceOffset</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ConcurrentSequencedCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentSequencedCircularArrayQueue</mutatedClass><mutatedMethod>calcSequenceOffset</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='RUN_ERROR'><sourceFile>ConcurrentSequencedCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentSequencedCircularArrayQueue</mutatedClass><mutatedMethod>calcSequenceOffset</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ConcurrentSequencedCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentSequencedCircularArrayQueue</mutatedClass><mutatedMethod>calcSequenceOffset</mutatedMethod><methodDescription>(J)J</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ConcurrentSequencedCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentSequencedCircularArrayQueue</mutatedClass><mutatedMethod>lvSequence</mutatedMethod><methodDescription>([JJ)J</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ConcurrentSequencedCircularArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.ConcurrentSequencedCircularArrayQueue</mutatedClass><mutatedMethod>soSequence</mutatedMethod><methodDescription>([JJJ)V</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpmcOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.CompletableTest.mergeDelayErrorObservableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><killingTest>rx.CompletableTest.mergeDelayErrorObservableMaxConcurrent(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest>rx.CompletableTest.mergeDelayErrorObservableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>39</index><killingTest>rx.CompletableTest.mergeDelayErrorObservableMaxConcurrent(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.CompletableTest.mergeObservableSingleThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>47</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>41</index><killingTest>rx.CompletableTest.mergeDelayErrorObservableSingleThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>57</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber$1</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeUsing.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeUsing</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><killingTest>rx.internal.operators.OnSubscribeUsingTest.testUsingDoesNotDisposesEagerlyBeforeCompletion(rx.internal.operators.OnSubscribeUsingTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeUsing.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeUsing</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>79</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeUsing.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeUsing</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest>rx.internal.operators.OnSubscribeUsingTest.testUsingDoesNotDisposesEagerlyBeforeCompletion(rx.internal.operators.OnSubscribeUsingTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeUsing.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeUsing</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>71</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeUsing.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeUsing</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>75</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeUsing.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeUsing</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>97</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeUsing.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeUsing</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>104</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeUsing.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeUsing</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>117</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeUsing.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeUsing</mutatedClass><mutatedMethod>disposeEagerlyIfRequested</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Ljava/lang/Throwable;</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeUsing.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeUsing</mutatedClass><mutatedMethod>disposeEagerlyIfRequested</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Ljava/lang/Throwable;</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeUsing.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeUsing</mutatedClass><mutatedMethod>disposeEagerlyIfRequested</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Ljava/lang/Throwable;</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeUsing.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeUsing</mutatedClass><mutatedMethod>disposeEagerlyIfRequested</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Ljava/lang/Throwable;</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeUsing.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeUsing</mutatedClass><mutatedMethod>disposeEagerlyIfRequested</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Ljava/lang/Throwable;</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>56</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>73</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>44</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>83</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>63</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>56</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ObjectPool.java</sourceFile><mutatedClass>rx.internal.util.ObjectPool$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>73</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscribers.java</sourceFile><mutatedClass>rx.observers.Subscribers</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/functions/Action1;)Lrx/Subscriber;</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.observers.SubscribersTest.testCreate1Value(rx.observers.SubscribersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscribers.java</sourceFile><mutatedClass>rx.observers.Subscribers</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/functions/Action1;)Lrx/Subscriber;</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest>rx.observers.SubscribersTest.testCreate1Value(rx.observers.SubscribersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscribers.java</sourceFile><mutatedClass>rx.observers.Subscribers</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;)Lrx/Subscriber;</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.observers.SubscribersTest.testCreate2Null(rx.observers.SubscribersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscribers.java</sourceFile><mutatedClass>rx.observers.Subscribers</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;)Lrx/Subscriber;</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.observers.SubscribersTest.testCreate3Null(rx.observers.SubscribersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscribers.java</sourceFile><mutatedClass>rx.observers.Subscribers</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;)Lrx/Subscriber;</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>32</index><killingTest>rx.observers.SubscribersTest.testCreate2Value(rx.observers.SubscribersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscribers.java</sourceFile><mutatedClass>rx.observers.Subscribers</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)Lrx/Subscriber;</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.observers.SubscribersTest.testCreate3Value(rx.observers.SubscribersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscribers.java</sourceFile><mutatedClass>rx.observers.Subscribers</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)Lrx/Subscriber;</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.observers.SubscribersTest.testCreate5Null(rx.observers.SubscribersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscribers.java</sourceFile><mutatedClass>rx.observers.Subscribers</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)Lrx/Subscriber;</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest>rx.observers.SubscribersTest.testCreate3Value(rx.observers.SubscribersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscribers.java</sourceFile><mutatedClass>rx.observers.Subscribers</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)Lrx/Subscriber;</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>45</index><killingTest>rx.observers.SubscribersTest.testCreate3Value(rx.observers.SubscribersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscribers.java</sourceFile><mutatedClass>rx.observers.Subscribers</mutatedClass><mutatedMethod>empty</mutatedMethod><methodDescription>()Lrx/Subscriber;</methodDescription><lineNumber>38</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.observers.SubscribersTest.testEmptyOnErrorNotImplemented(rx.observers.SubscribersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscribers.java</sourceFile><mutatedClass>rx.observers.Subscribers</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>(Lrx/Observer;)Lrx/Subscriber;</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.observers.SubscribersTest.testEmptyOnErrorNotImplemented(rx.observers.SubscribersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscribers.java</sourceFile><mutatedClass>rx.observers.Subscribers</mutatedClass><mutatedMethod>wrap</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnSubscribe(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable$OnNextValue</mutatedClass><mutatedMethod>getValue</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable$OnNextValue</mutatedClass><mutatedMethod>renderValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/String;</methodDescription><lineNumber>181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.exceptions.OnNextValueTest.testRenderBoolean(rx.exceptions.OnNextValueTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable$OnNextValue</mutatedClass><mutatedMethod>renderValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/String;</methodDescription><lineNumber>184</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.exceptions.OnNextValueTest.testRenderBoolean(rx.exceptions.OnNextValueTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable$OnNextValue</mutatedClass><mutatedMethod>renderValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/String;</methodDescription><lineNumber>187</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest>rx.exceptions.OnNextValueTest.addOnNextValueExceptionAdded(rx.exceptions.OnNextValueTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable$OnNextValue</mutatedClass><mutatedMethod>renderValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/String;</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><killingTest>rx.exceptions.OnNextValueTest.addOnNextValueExceptionAdded(rx.exceptions.OnNextValueTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable$OnNextValue</mutatedClass><mutatedMethod>renderValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/String;</methodDescription><lineNumber>195</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>56</index><killingTest>rx.plugins.RxJavaPluginsTest.testOnNextValueCallsPlugin(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable$OnNextValue</mutatedClass><mutatedMethod>renderValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/String;</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.exceptions.OnNextValueTest.testRenderVoid(rx.exceptions.OnNextValueTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable$OnNextValue</mutatedClass><mutatedMethod>renderValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/String;</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><killingTest>rx.exceptions.OnNextValueTest.testRenderBoolean(rx.exceptions.OnNextValueTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable$OnNextValue</mutatedClass><mutatedMethod>renderValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/String;</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>32</index><killingTest>rx.internal.operators.OperatorTakeWhileTest.testErrorCauseIncludesLastValue(rx.internal.operators.OperatorTakeWhileTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable$OnNextValue</mutatedClass><mutatedMethod>renderValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/String;</methodDescription><lineNumber>191</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>44</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable$OnNextValue</mutatedClass><mutatedMethod>renderValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/String;</methodDescription><lineNumber>196</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>60</index><killingTest>rx.plugins.RxJavaPluginsTest.testOnNextValueCallsPlugin(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable$OnNextValue</mutatedClass><mutatedMethod>renderValue</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/String;</methodDescription><lineNumber>199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>74</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler$FixedSchedulerPool</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>24</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testStartIdempotence(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler$FixedSchedulerPool</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>37</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testStartIdempotence(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler$FixedSchedulerPool</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testStartIdempotence(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler$FixedSchedulerPool</mutatedClass><mutatedMethod>getEventLoop</mutatedMethod><methodDescription>()Lrx/internal/schedulers/EventLoopsScheduler$PoolWorker;</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>24</index><killingTest>rx.CompletableTest.observeOnError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler$FixedSchedulerPool</mutatedClass><mutatedMethod>getEventLoop</mutatedMethod><methodDescription>()Lrx/internal/schedulers/EventLoopsScheduler$PoolWorker;</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>28</index><killingTest>rx.schedulers.ComputationSchedulerTests.testRecursiveExecution(rx.schedulers.ComputationSchedulerTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler$FixedSchedulerPool</mutatedClass><mutatedMethod>getEventLoop</mutatedMethod><methodDescription>()Lrx/internal/schedulers/EventLoopsScheduler$PoolWorker;</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><killingTest>rx.schedulers.ComputationSchedulerTests.testRecursiveExecution(rx.schedulers.ComputationSchedulerTests)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler$FixedSchedulerPool</mutatedClass><mutatedMethod>getEventLoop</mutatedMethod><methodDescription>()Lrx/internal/schedulers/EventLoopsScheduler$PoolWorker;</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler$FixedSchedulerPool</mutatedClass><mutatedMethod>getEventLoop</mutatedMethod><methodDescription>()Lrx/internal/schedulers/EventLoopsScheduler$PoolWorker;</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>31</index><killingTest>rx.schedulers.ComputationSchedulerTests.testRecursiveExecution(rx.schedulers.ComputationSchedulerTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler$FixedSchedulerPool</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>17</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testStartIdempotence(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler$FixedSchedulerPool</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>28</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testStartIdempotence(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler$FixedSchedulerPool</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler$FixedSchedulerPool</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>25</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscLinkedQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedQueueIterator(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscLinkedQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedQueueIterator(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscLinkedQueue</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>44</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscLinkedQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedQueueNull(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscLinkedQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>34</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscLinkedQueue</mutatedClass><mutatedMethod>offer</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>25</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscLinkedQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscLinkedQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscLinkedQueue</mutatedClass><mutatedMethod>peek</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscLinkedQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscLinkedQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>24</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpscLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscLinkedQueue</mutatedClass><mutatedMethod>poll</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>29</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscLinkedQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>45</index><killingTest>rx.CompletableTest.mergeDelayErrorEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>96</index><killingTest>rx.CompletableTest.mergeDelayErrorMultipleSources(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>37</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>15</index><killingTest>rx.CompletableTest.mergeDelayErrorEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><killingTest>rx.CompletableTest.mergeDelayErrorEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>44</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>54</index><killingTest>rx.CompletableTest.mergeDelayErrorMultipleSources(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>62</index><killingTest>rx.CompletableTest.mergeDelayErrorMultipleSources(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>103</index><killingTest>rx.CompletableTest.mergeDelayErrorEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>108</index><killingTest>rx.CompletableTest.mergeDelayErrorSingleSourceThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMergeDelayErrorArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>92</index><killingTest>rx.CompletableTest.mergeDelayErrorMultipleSources(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>112</index><killingTest>rx.CompletableTest.mergeDelayErrorEmpty(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>120</index><killingTest>rx.CompletableTest.mergeDelayErrorSingleSourceThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$17$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1291</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.CompletableTest.doOnCompletedNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$17$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1293</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.CompletableTest.doOnCompletedThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$17$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1297</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest>rx.CompletableTest.doOnCompletedNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$17$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1300</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest>rx.CompletableTest.doAfterTerminateNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$17$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1302</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>46</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$17$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1309</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.CompletableTest.doOnErrorHasError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$17$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1314</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest>rx.CompletableTest.doAfterTerminateWithError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$17$1</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>1321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.CompletableTest.doOnSubscribeThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$17$1</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>1323</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$17$1</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>1324</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$17$1</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>1325</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest>rx.CompletableTest.doOnSubscribeThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$17$1</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>1329</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>45</index><killingTest>rx.CompletableTest.doOnDisposeChildCancels(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnsafeAccess.java</sourceFile><mutatedClass>rx.internal.util.unsafe.UnsafeAccess</mutatedClass><mutatedMethod>addressOf</mutatedMethod><methodDescription>(Ljava/lang/Class;Ljava/lang/String;)J</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.internal.util.JCToolsQueueTests.casBasedUnsafe(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnsafeAccess.java</sourceFile><mutatedClass>rx.internal.util.unsafe.UnsafeAccess</mutatedClass><mutatedMethod>compareAndSwapInt</mutatedMethod><methodDescription>(Ljava/lang/Object;JII)Z</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.util.JCToolsQueueTests.casBasedUnsafe(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnsafeAccess.java</sourceFile><mutatedClass>rx.internal.util.unsafe.UnsafeAccess</mutatedClass><mutatedMethod>getAndAddInt</mutatedMethod><methodDescription>(Ljava/lang/Object;JI)I</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>13</index><killingTest>rx.internal.util.JCToolsQueueTests.casBasedUnsafe(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>UnsafeAccess.java</sourceFile><mutatedClass>rx.internal.util.unsafe.UnsafeAccess</mutatedClass><mutatedMethod>getAndAddInt</mutatedMethod><methodDescription>(Ljava/lang/Object;JI)I</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnsafeAccess.java</sourceFile><mutatedClass>rx.internal.util.unsafe.UnsafeAccess</mutatedClass><mutatedMethod>getAndAddInt</mutatedMethod><methodDescription>(Ljava/lang/Object;JI)I</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>27</index><killingTest>rx.internal.util.JCToolsQueueTests.casBasedUnsafe(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnsafeAccess.java</sourceFile><mutatedClass>rx.internal.util.unsafe.UnsafeAccess</mutatedClass><mutatedMethod>getAndIncrementInt</mutatedMethod><methodDescription>(Ljava/lang/Object;J)I</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>13</index><killingTest>rx.internal.util.JCToolsQueueTests.casBasedUnsafe(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>UnsafeAccess.java</sourceFile><mutatedClass>rx.internal.util.unsafe.UnsafeAccess</mutatedClass><mutatedMethod>getAndIncrementInt</mutatedMethod><methodDescription>(Ljava/lang/Object;J)I</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnsafeAccess.java</sourceFile><mutatedClass>rx.internal.util.unsafe.UnsafeAccess</mutatedClass><mutatedMethod>getAndIncrementInt</mutatedMethod><methodDescription>(Ljava/lang/Object;J)I</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>27</index><killingTest>rx.internal.util.JCToolsQueueTests.casBasedUnsafe(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>UnsafeAccess.java</sourceFile><mutatedClass>rx.internal.util.unsafe.UnsafeAccess</mutatedClass><mutatedMethod>getAndSetInt</mutatedMethod><methodDescription>(Ljava/lang/Object;JI)I</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnsafeAccess.java</sourceFile><mutatedClass>rx.internal.util.unsafe.UnsafeAccess</mutatedClass><mutatedMethod>getAndSetInt</mutatedMethod><methodDescription>(Ljava/lang/Object;JI)I</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><killingTest>rx.internal.util.JCToolsQueueTests.casBasedUnsafe(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnsafeAccess.java</sourceFile><mutatedClass>rx.internal.util.unsafe.UnsafeAccess</mutatedClass><mutatedMethod>isUnsafeAvailable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedQueueIterator(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnsafeAccess.java</sourceFile><mutatedClass>rx.internal.util.unsafe.UnsafeAccess</mutatedClass><mutatedMethod>isUnsafeAvailable</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedQueueIterator(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler</mutatedClass><mutatedMethod>advanceTimeBy</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>9</index><killingTest>rx.schedulers.TestSchedulerTest.testPeriodicScheduling(rx.schedulers.TestSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler</mutatedClass><mutatedMethod>advanceTimeBy</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.schedulers.TestSchedulerTest.testPeriodicScheduling(rx.schedulers.TestSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler</mutatedClass><mutatedMethod>advanceTimeTo</mutatedMethod><methodDescription>(JLjava/util/concurrent/TimeUnit;)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.schedulers.TestSchedulerTest.testPeriodicScheduling(rx.schedulers.TestSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler</mutatedClass><mutatedMethod>createWorker</mutatedMethod><methodDescription>()Lrx/Scheduler$Worker;</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.schedulers.TestSchedulerTest.testImmediateUnsubscribes2(rx.schedulers.TestSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler</mutatedClass><mutatedMethod>now</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.schedulers.TestSchedulerTest.testPeriodicScheduling(rx.schedulers.TestSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler</mutatedClass><mutatedMethod>triggerActions</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.subjects.TestSubjectTest.testObserverPropagateValueInFutureTimeAfterTriggeringActions(rx.subjects.TestSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler</mutatedClass><mutatedMethod>triggerActions</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>21</index><killingTest>rx.schedulers.TestSchedulerTest.testPeriodicScheduling(rx.schedulers.TestSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler</mutatedClass><mutatedMethod>triggerActions</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.schedulers.TestSchedulerTest.testPeriodicScheduling(rx.schedulers.TestSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler</mutatedClass><mutatedMethod>triggerActions</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler</mutatedClass><mutatedMethod>triggerActions</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><killingTest>rx.schedulers.TestSchedulerTest.testPeriodicScheduling(rx.schedulers.TestSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler</mutatedClass><mutatedMethod>triggerActions</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>55</index><killingTest>rx.schedulers.TestSchedulerTest.testPeriodicScheduling(rx.schedulers.TestSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler</mutatedClass><mutatedMethod>triggerActions</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>60</index><killingTest>rx.schedulers.TestSchedulerTest.testPeriodicScheduling(rx.schedulers.TestSchedulerTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>UtilityFunctions.java</sourceFile><mutatedClass>rx.internal.util.UtilityFunctions$NullFunction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>UtilityFunctions.java</sourceFile><mutatedClass>rx.internal.util.UtilityFunctions$NullFunction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>UtilityFunctions.java</sourceFile><mutatedClass>rx.internal.util.UtilityFunctions$NullFunction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>UtilityFunctions.java</sourceFile><mutatedClass>rx.internal.util.UtilityFunctions$NullFunction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>UtilityFunctions.java</sourceFile><mutatedClass>rx.internal.util.UtilityFunctions$NullFunction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>UtilityFunctions.java</sourceFile><mutatedClass>rx.internal.util.UtilityFunctions$NullFunction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>UtilityFunctions.java</sourceFile><mutatedClass>rx.internal.util.UtilityFunctions$NullFunction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>UtilityFunctions.java</sourceFile><mutatedClass>rx.internal.util.UtilityFunctions$NullFunction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>UtilityFunctions.java</sourceFile><mutatedClass>rx.internal.util.UtilityFunctions$NullFunction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>UtilityFunctions.java</sourceFile><mutatedClass>rx.internal.util.UtilityFunctions$NullFunction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>157</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>UtilityFunctions.java</sourceFile><mutatedClass>rx.internal.util.UtilityFunctions$NullFunction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler$CompareActionsByTime</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Lrx/schedulers/TestScheduler$TimedAction;Lrx/schedulers/TestScheduler$TimedAction;)I</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler$CompareActionsByTime</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Lrx/schedulers/TestScheduler$TimedAction;Lrx/schedulers/TestScheduler$TimedAction;)I</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler$CompareActionsByTime</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Lrx/schedulers/TestScheduler$TimedAction;Lrx/schedulers/TestScheduler$TimedAction;)I</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>43</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler$CompareActionsByTime</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Lrx/schedulers/TestScheduler$TimedAction;Lrx/schedulers/TestScheduler$TimedAction;)I</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>53</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler$CompareActionsByTime</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Lrx/schedulers/TestScheduler$TimedAction;Lrx/schedulers/TestScheduler$TimedAction;)I</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.SingleTest.delayWithSchedulerShouldShortCutWithFailure(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler$CompareActionsByTime</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Lrx/schedulers/TestScheduler$TimedAction;Lrx/schedulers/TestScheduler$TimedAction;)I</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.SingleTest.delayWithSchedulerShouldDelayCompletion(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler$CompareActionsByTime</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Lrx/schedulers/TestScheduler$TimedAction;Lrx/schedulers/TestScheduler$TimedAction;)I</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest>rx.internal.operators.OperatorDelayTest.testDelayEmitsEverything(rx.internal.operators.OperatorDelayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler$CompareActionsByTime</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Lrx/schedulers/TestScheduler$TimedAction;Lrx/schedulers/TestScheduler$TimedAction;)I</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><killingTest>rx.internal.operators.OperatorThrottleFirstTest.testThrottlingWithCompleted(rx.internal.operators.OperatorThrottleFirstTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler$CompareActionsByTime</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Lrx/schedulers/TestScheduler$TimedAction;Lrx/schedulers/TestScheduler$TimedAction;)I</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>53</index><killingTest>rx.internal.operators.OperatorThrottleFirstTest.testThrottlingWithCompleted(rx.internal.operators.OperatorThrottleFirstTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler$CompareActionsByTime</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Lrx/schedulers/TestScheduler$TimedAction;Lrx/schedulers/TestScheduler$TimedAction;)I</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>34</index><killingTest>rx.internal.operators.OperatorDelayTest.testDelayEmitsEverything(rx.internal.operators.OperatorDelayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler$CompareActionsByTime</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Lrx/schedulers/TestScheduler$TimedAction;Lrx/schedulers/TestScheduler$TimedAction;)I</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>61</index><killingTest>rx.internal.operators.OperatorThrottleFirstTest.testThrottlingWithCompleted(rx.internal.operators.OperatorThrottleFirstTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcatArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>43</index><killingTest>rx.CompletableTest.concatWithError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcatArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.CompletableTest.concatWithError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcatArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.CompletableTest.concatWithError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcatArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest>rx.CompletableTest.concatWithError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcatArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><killingTest>rx.CompletableTest.concatWithError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcatArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>72</index><killingTest>rx.CompletableTest.concatWithError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcatArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>56</index><killingTest>rx.CompletableTest.startWithCompletableNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcatArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>67</index><killingTest>rx.CompletableTest.concatWithError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcatArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest>rx.CompletableTest.concatWithError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcatArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.CompletableTest.concatWithError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeConcatArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$InnerSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>836</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$InnerSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>831</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest>rx.internal.operators.OperatorMergeTest.testError1(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$InnerSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>825</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorMapTest.testShouldNotSwallowOnErrorNotImplementedException(rx.internal.operators.OperatorMapTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$InnerSubscriber</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>821</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$InnerSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>840</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$InnerSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>846</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>37</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$InnerSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>839</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$InnerSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>845</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>32</index><killingTest>rx.internal.operators.OperatorMergeTest.testBackpressureUpstream(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$InnerSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>840</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$InnerSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>846</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$InnerSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>847</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>43</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>37</index><killingTest>rx.internal.operators.OperatorMergeTest.mergingNullObservable(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest>rx.internal.operators.OperatorMergeTest.testUnSubscribeObservableOfObservables(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest>rx.internal.operators.OperatorMergeTest.mergingNullObservable(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>(Z)Lrx/internal/operators/OperatorMerge;</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorMergeTest.delayedErrorsShouldBeEmittedWhenCompleteAfterApplyingBackpressure_FastPath(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>(Z)Lrx/internal/operators/OperatorMerge;</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorMergeTest.shouldCompleteAfterApplyingBackpressure_FastPath(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>(Z)Lrx/internal/operators/OperatorMerge;</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorMergeTest.mergingNullObservable(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>(ZI)Lrx/internal/operators/OperatorMerge;</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorMergeTest.zeroMaxConcurrent(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>(ZI)Lrx/internal/operators/OperatorMerge;</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorMergeTest.zeroMaxConcurrent(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>(ZI)Lrx/internal/operators/OperatorMerge;</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest>rx.internal.operators.OperatorMergeTest.testBackpressureBothUpstreamAndDownstreamWithSynchronousScalarObservables(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>(ZI)Lrx/internal/operators/OperatorMerge;</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>29</index><killingTest>rx.internal.operators.OperatorMergeTest.testConcurrencyLimit(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>(ZI)Lrx/internal/operators/OperatorMerge;</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>38</index><killingTest>rx.internal.operators.OperatorMergeTest.testBackpressureBothUpstreamAndDownstreamWithSynchronousScalarObservables(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorPublishTest.testNonNullConnection(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorPublishTest.testConnectIsIdempotent(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>40</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>195</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>55</index><killingTest>rx.internal.operators.OperatorPublishTest.testConnectIsIdempotent(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>195</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>61</index><killingTest>rx.internal.operators.OperatorPublishTest.testConnectIsIdempotent(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>82</index><killingTest>rx.internal.operators.OperatorPublishTest.testConnectIsIdempotent(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>184</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>78</index><killingTest>rx.internal.operators.OperatorPublishTest.testNonNullConnection(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest>rx.internal.operators.OperatorPublishTest.testNonNullConnection(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorPublishTest.testTakeUntilWithPublishedStreamUsingSelector(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/functions/Func1;Z)Lrx/Observable;</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorPublishTest.testTakeUntilWithPublishedStreamUsingSelector(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftObserver</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest>rx.internal.operators.OnSubscribeGroupJoinTest.normal1(rx.internal.operators.OnSubscribeGroupJoinTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftObserver</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>40</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftObserver</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>46</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftObserver</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>203</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>68</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftObserver</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeGroupJoinTest.leftDurationSelectorThrows(rx.internal.operators.OnSubscribeGroupJoinTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>158</index><killingTest>rx.internal.operators.OnSubscribeGroupJoinTest.normal1(rx.internal.operators.OnSubscribeGroupJoinTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>92</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>148</index><killingTest>rx.internal.operators.OnSubscribeGroupJoinTest.rightThrows(rx.internal.operators.OnSubscribeGroupJoinTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>166</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>182</index><killingTest>rx.internal.operators.OnSubscribeGroupJoinTest.leftDurationSelectorThrows(rx.internal.operators.OnSubscribeGroupJoinTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount$2</mutatedClass><mutatedMethod>cleanup</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testUpstreamErrorAllowsRetry(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount$2</mutatedClass><mutatedMethod>cleanup</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnUnSubscribeWorksWithRefCount(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount$2</mutatedClass><mutatedMethod>cleanup</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount$2</mutatedClass><mutatedMethod>cleanup</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>35</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnUnSubscribeWorksWithRefCount(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount$2</mutatedClass><mutatedMethod>cleanup</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>42</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testUpstreamErrorAllowsRetry(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount$2</mutatedClass><mutatedMethod>cleanup</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>54</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testAlreadyUnsubscribedClient(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testUpstreamErrorAllowsRetry(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testUpstreamErrorAllowsRetry(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testRefCount(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTakeWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeWhile$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorTakeWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeWhile$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTakeWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeWhile$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorTakeWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeWhile$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTakeWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeWhile$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeWhile$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>49</index><killingTest>rx.internal.operators.OperatorTakeWhileTest.testNoUnsubscribeDownstream(rx.internal.operators.OperatorTakeWhileTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeWhile$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>37</index><killingTest>rx.internal.operators.OperatorTakeWhileTest.testErrorCauseIncludesLastValue(rx.internal.operators.OperatorTakeWhileTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTakeWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeWhile$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>41</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeWhile$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>55</index><killingTest>rx.internal.operators.OperatorTakeWhileTest.testNoUnsubscribeDownstream(rx.internal.operators.OperatorTakeWhileTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeWhile$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>67</index><killingTest>rx.internal.operators.OperatorTakeWhileTest.testTakeWhile1(rx.internal.operators.OperatorTakeWhileTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTakeWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeWhile$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>71</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>97</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>76</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>77</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.testZeroSources(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>60</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>70</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>116</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.testZeroSources(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>87</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>120</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.testZeroSources(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>143</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorAny.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAny$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorAnyTest.testAnyWithEmptyAndPredicate(rx.internal.operators.OperatorAnyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorAny.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAny$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorIgnoreElementsTest.testWithEmpty(rx.internal.operators.OperatorIgnoreElementsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorAny.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAny$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.internal.operators.OperatorAnyTest.testAnyWithPredicate2(rx.internal.operators.OperatorAnyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorAny.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAny$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest>rx.internal.operators.OperatorAnyTest.testAnyWithEmptyAndPredicate(rx.internal.operators.OperatorAnyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorAny.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAny$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorAnyTest.testPredicateThrowsExceptionAndValueInCauseMessage(rx.internal.operators.OperatorAnyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorAny.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAny$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><killingTest>rx.internal.operators.OperatorAnyTest.testAnyWithOneItem(rx.internal.operators.OperatorAnyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorAny.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAny$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><killingTest>rx.internal.operators.OperatorAnyTest.testAnyWithOneItem(rx.internal.operators.OperatorAnyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorAny.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAny$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>52</index><killingTest>rx.internal.operators.OperatorAnyTest.testAnyWithOneItem(rx.internal.operators.OperatorAnyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorAny.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAny$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest>rx.internal.operators.OperatorAnyTest.testPredicateThrowsExceptionAndValueInCauseMessage(rx.internal.operators.OperatorAnyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorAny.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAny$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>61</index><killingTest>rx.internal.operators.OperatorAnyTest.testAnyWithOneItem(rx.internal.operators.OperatorAnyTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorAny.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAny$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>65</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>187</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>46</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>192</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.internal.util.ScalarSynchronousObservableTest.asyncObserverNextThrows(rx.internal.util.ScalarSynchronousObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>37</index><killingTest>rx.internal.util.ScalarSynchronousObservableTest.asyncObserverNextThrows(rx.internal.util.ScalarSynchronousObservableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>54</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest>rx.internal.util.ScalarSynchronousObservableTest.testBackpressureObserveOn(rx.internal.util.ScalarSynchronousObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.observables.BlockingObservableTest.testRun(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>42</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>205</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeUntilPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber</mutatedClass><mutatedMethod>downstreamRequest</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorTakeUntilPredicateTest.backpressure(rx.internal.operators.OperatorTakeUntilPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeUntilPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorTakeUntilPredicateTest.takeEmpty(rx.internal.operators.OperatorTakeUntilPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeUntilPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorTakeUntilPredicateTest.takeEmpty(rx.internal.operators.OperatorTakeUntilPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeUntilPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorTakeUntilPredicateTest.sourceThrows(rx.internal.operators.OperatorTakeUntilPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeUntilPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorTakeUntilPredicateTest.sourceThrows(rx.internal.operators.OperatorTakeUntilPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeUntilPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><killingTest>rx.internal.operators.OperatorTakeUntilPredicateTest.takeFirst(rx.internal.operators.OperatorTakeUntilPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeUntilPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>40</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorTakeUntilPredicateTest.takeFirst(rx.internal.operators.OperatorTakeUntilPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeUntilPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>39</index><killingTest>rx.internal.operators.OperatorTakeUntilPredicateTest.functionThrows(rx.internal.operators.OperatorTakeUntilPredicateTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTakeUntilPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>43</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeUntilPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>61</index><killingTest>rx.internal.operators.OperatorTakeUntilPredicateTest.takeFirst(rx.internal.operators.OperatorTakeUntilPredicateTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTakeUntilPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntilPredicate$ParentSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>65</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeSingle.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeSingle$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OnSubscribeSingleTest.testEmptyObservable(rx.internal.operators.OnSubscribeSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeSingle.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeSingle$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OnSubscribeSingleTest.testEmptyObservable(rx.internal.operators.OnSubscribeSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeSingle.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeSingle$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.internal.operators.OnSubscribeSingleTest.testShouldUseUnsafeSubscribeInternallyNotSubscribe(rx.internal.operators.OnSubscribeSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeSingle.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeSingle$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest>rx.internal.operators.OnSubscribeSingleTest.testEmptyObservable(rx.internal.operators.OnSubscribeSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeSingle.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeSingle$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeSingleTest.testErrorObservable(rx.internal.operators.OnSubscribeSingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeSingle.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeSingle$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeSingle.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeSingle$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OnSubscribeSingleTest.testShouldUseUnsafeSubscribeInternallyNotSubscribe(rx.internal.operators.OnSubscribeSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeSingle.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeSingle$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.internal.operators.OnSubscribeSingleTest.testJustTwoEmissionsObservableThrowsError(rx.internal.operators.OnSubscribeSingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeSingle.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeSingle$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeSingle.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeSingle$1</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$EventLoopWorker</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>199</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$EventLoopWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>204</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$EventLoopWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$EventLoopWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$EventLoopWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>36</index><killingTest>rx.schedulers.CachedThreadSchedulerTest.testCancelledTaskRetention(rx.schedulers.CachedThreadSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$EventLoopWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$EventLoopWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$EventLoopWorker</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$EventLoopWorker</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>192</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$EventLoopWorker</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest>rx.schedulers.CachedThreadSchedulerTest.testUnsubscribeRecursiveScheduleFromInside(rx.schedulers.CachedThreadSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observers.java</sourceFile><mutatedClass>rx.observers.Observers</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/functions/Action1;)Lrx/Observer;</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.observers.ObserversTest.testCreate1Null(rx.observers.ObserversTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observers.java</sourceFile><mutatedClass>rx.observers.Observers</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/functions/Action1;)Lrx/Observer;</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest>rx.observers.ObserversTest.testCreate1Value(rx.observers.ObserversTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observers.java</sourceFile><mutatedClass>rx.observers.Observers</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;)Lrx/Observer;</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.observers.ObserversTest.testCreate2Null(rx.observers.ObserversTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observers.java</sourceFile><mutatedClass>rx.observers.Observers</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;)Lrx/Observer;</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.observers.ObserversTest.testCreate3Null(rx.observers.ObserversTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observers.java</sourceFile><mutatedClass>rx.observers.Observers</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;)Lrx/Observer;</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>32</index><killingTest>rx.observers.ObserversTest.testEmptyCompleted(rx.observers.ObserversTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observers.java</sourceFile><mutatedClass>rx.observers.Observers</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)Lrx/Observer;</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.observers.ObserversTest.testCreate4Null(rx.observers.ObserversTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observers.java</sourceFile><mutatedClass>rx.observers.Observers</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)Lrx/Observer;</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.observers.ObserversTest.testCreate5Null(rx.observers.ObserversTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observers.java</sourceFile><mutatedClass>rx.observers.Observers</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)Lrx/Observer;</methodDescription><lineNumber>167</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest>rx.observers.ObserversTest.testCreate6Null(rx.observers.ObserversTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observers.java</sourceFile><mutatedClass>rx.observers.Observers</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action1;Lrx/functions/Action0;)Lrx/Observer;</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>45</index><killingTest>rx.observers.ObserversTest.testCreate3Value(rx.observers.ObserversTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observers.java</sourceFile><mutatedClass>rx.observers.Observers</mutatedClass><mutatedMethod>empty</mutatedMethod><methodDescription>()Lrx/Observer;</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.observers.ObserversTest.testEmptyOnErrorNotImplemented(rx.observers.ObserversTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ConnectableObservable.java</sourceFile><mutatedClass>rx.observables.ConnectableObservable</mutatedClass><mutatedMethod>autoConnect</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.observables.ConnectableObservableTest.testAutoConnect(rx.observables.ConnectableObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ConnectableObservable.java</sourceFile><mutatedClass>rx.observables.ConnectableObservable</mutatedClass><mutatedMethod>autoConnect</mutatedMethod><methodDescription>(I)Lrx/Observable;</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.observables.ConnectableObservableTest.testAutoConnect0(rx.observables.ConnectableObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ConnectableObservable.java</sourceFile><mutatedClass>rx.observables.ConnectableObservable</mutatedClass><mutatedMethod>autoConnect</mutatedMethod><methodDescription>(ILrx/functions/Action1;)Lrx/Observable;</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><killingTest>rx.observables.ConnectableObservableTest.testAutoConnect0(rx.observables.ConnectableObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ConnectableObservable.java</sourceFile><mutatedClass>rx.observables.ConnectableObservable</mutatedClass><mutatedMethod>autoConnect</mutatedMethod><methodDescription>(ILrx/functions/Action1;)Lrx/Observable;</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.observables.ConnectableObservableTest.testAutoConnect0(rx.observables.ConnectableObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ConnectableObservable.java</sourceFile><mutatedClass>rx.observables.ConnectableObservable</mutatedClass><mutatedMethod>autoConnect</mutatedMethod><methodDescription>(ILrx/functions/Action1;)Lrx/Observable;</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.observables.ConnectableObservableTest.testAutoConnect0(rx.observables.ConnectableObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ConnectableObservable.java</sourceFile><mutatedClass>rx.observables.ConnectableObservable</mutatedClass><mutatedMethod>autoConnect</mutatedMethod><methodDescription>(ILrx/functions/Action1;)Lrx/Observable;</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>24</index><killingTest>rx.observables.ConnectableObservableTest.testAutoConnectUnsubscribe(rx.observables.ConnectableObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ConnectableObservable.java</sourceFile><mutatedClass>rx.observables.ConnectableObservable</mutatedClass><mutatedMethod>autoConnect</mutatedMethod><methodDescription>(ILrx/functions/Action1;)Lrx/Observable;</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest>rx.observables.ConnectableObservableTest.testAutoConnect0(rx.observables.ConnectableObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ConnectableObservable.java</sourceFile><mutatedClass>rx.observables.ConnectableObservable</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>()Lrx/Subscription;</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest>rx.internal.operators.OperatorPublishTest.testNonNullConnection(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ConnectableObservable.java</sourceFile><mutatedClass>rx.observables.ConnectableObservable</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>()Lrx/Subscription;</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorPublishTest.testNonNullConnection(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ConnectableObservable.java</sourceFile><mutatedClass>rx.observables.ConnectableObservable</mutatedClass><mutatedMethod>refCount</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnUnSubscribeWorksWithRefCount(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>308</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>344</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>60</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>345</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>65</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>346</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>70</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe</mutatedClass><mutatedMethod>createSingleState</mutatedMethod><methodDescription>(Lrx/functions/Func0;Lrx/functions/Action3;)Lrx/observables/AsyncOnSubscribe;</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe</mutatedClass><mutatedMethod>createSingleState</mutatedMethod><methodDescription>(Lrx/functions/Func0;Lrx/functions/Action3;Lrx/functions/Action1;)Lrx/observables/AsyncOnSubscribe;</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe</mutatedClass><mutatedMethod>createStateful</mutatedMethod><methodDescription>(Lrx/functions/Func0;Lrx/functions/Func3;)Lrx/observables/AsyncOnSubscribe;</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteFollowedByOnErrorOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe</mutatedClass><mutatedMethod>createStateful</mutatedMethod><methodDescription>(Lrx/functions/Func0;Lrx/functions/Func3;Lrx/functions/Action1;)Lrx/observables/AsyncOnSubscribe;</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnUnsubscribeHasCorrectState(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe</mutatedClass><mutatedMethod>createStateless</mutatedMethod><methodDescription>(Lrx/functions/Action2;)Lrx/observables/AsyncOnSubscribe;</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe</mutatedClass><mutatedMethod>createStateless</mutatedMethod><methodDescription>(Lrx/functions/Action2;Lrx/functions/Action0;)Lrx/observables/AsyncOnSubscribe;</methodDescription><lineNumber>248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorRetryWithPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorRetryWithPredicateTest.testRetryOnSpecificException(rx.internal.operators.OperatorRetryWithPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorRetryWithPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorRetryWithPredicateTest.testRetryOnSpecificException(rx.internal.operators.OperatorRetryWithPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorRetryWithPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.CompletableTest.retryBiPredicate5Times(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorRetryWithPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest>rx.internal.operators.OperatorRetryWithPredicateTest.testRetryOnSpecificException(rx.internal.operators.OperatorRetryWithPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorRetryWithPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><killingTest>rx.internal.operators.OperatorRetryWithPredicateTest.testRetryOnSpecificException(rx.internal.operators.OperatorRetryWithPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorRetryWithPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>53</index><killingTest>rx.CompletableTest.retryBiPredicate5Times(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorRetryWithPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorRetryWithPredicateTest.testUnsubscribeFromRetry(rx.internal.operators.OperatorRetryWithPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorRetryWithPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorRetryWithPredicateTest.testUnsubscribeFromRetry(rx.internal.operators.OperatorRetryWithPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorRetryWithPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorRetryWithPredicateTest.testBackpressure(rx.internal.operators.OperatorRetryWithPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorRetryWithPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1$1</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorRetryWithPredicateTest.testWithNothingToRetry(rx.internal.operators.OperatorRetryWithPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$RightObserver</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>247</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest>rx.internal.operators.OnSubscribeGroupJoinTest.normal1(rx.internal.operators.OnSubscribeGroupJoinTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$RightObserver</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>249</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>40</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$RightObserver</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>46</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$RightObserver</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>253</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>68</index><killingTest>rx.internal.operators.OnSubscribeGroupJoinTest.normal1(rx.internal.operators.OnSubscribeGroupJoinTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$RightObserver</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>258</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeGroupJoinTest.rightDurationSelectorThrows(rx.internal.operators.OnSubscribeGroupJoinTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$RightObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$RightObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>234</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>119</index><killingTest>rx.internal.operators.OnSubscribeGroupJoinTest.normal1(rx.internal.operators.OnSubscribeGroupJoinTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$RightObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>227</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>70</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$RightObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>235</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>128</index><killingTest>rx.internal.operators.OnSubscribeGroupJoinTest.normal1(rx.internal.operators.OnSubscribeGroupJoinTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$RightObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>238</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>144</index><killingTest>rx.internal.operators.OnSubscribeGroupJoinTest.rightDurationSelectorThrows(rx.internal.operators.OnSubscribeGroupJoinTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerialSubscription.java</sourceFile><mutatedClass>rx.subscriptions.SerialSubscription</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>()Lrx/Subscription;</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.subscriptions.SerialSubscriptionTests.getSubscriptionShouldReturnset(rx.subscriptions.SerialSubscriptionTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SerialSubscription.java</sourceFile><mutatedClass>rx.subscriptions.SerialSubscription</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerialSubscription.java</sourceFile><mutatedClass>rx.subscriptions.SerialSubscription</mutatedClass><mutatedMethod>set</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.subscriptions.SerialSubscriptionTests.getSubscriptionShouldReturnset(rx.subscriptions.SerialSubscriptionTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerialSubscription.java</sourceFile><mutatedClass>rx.subscriptions.SerialSubscription</mutatedClass><mutatedMethod>set</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest>rx.subscriptions.SerialSubscriptionTests.getSubscriptionShouldReturnset(rx.subscriptions.SerialSubscriptionTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SerialSubscription.java</sourceFile><mutatedClass>rx.subscriptions.SerialSubscription</mutatedClass><mutatedMethod>set</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>50</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerialSubscription.java</sourceFile><mutatedClass>rx.subscriptions.SerialSubscription</mutatedClass><mutatedMethod>set</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest>rx.subscriptions.SerialSubscriptionTests.settingUnderlyingWhenUnsubscribedCausesImmediateUnsubscription(rx.subscriptions.SerialSubscriptionTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerialSubscription.java</sourceFile><mutatedClass>rx.subscriptions.SerialSubscription</mutatedClass><mutatedMethod>set</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>55</index><killingTest>rx.subscriptions.SerialSubscriptionTests.replacingFirstUnderlyingCausesUnsubscription(rx.subscriptions.SerialSubscriptionTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerialSubscription.java</sourceFile><mutatedClass>rx.subscriptions.SerialSubscription</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.subscriptions.SerialSubscriptionTests.settingUnderlyingWhenUnsubscribedCausesImmediateUnsubscription(rx.subscriptions.SerialSubscriptionTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerialSubscription.java</sourceFile><mutatedClass>rx.subscriptions.SerialSubscription</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><killingTest>rx.subscriptions.SerialSubscriptionTests.whenUnsubscribingSecondUnderlyingUnsubscribed(rx.subscriptions.SerialSubscriptionTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerialSubscription.java</sourceFile><mutatedClass>rx.subscriptions.SerialSubscription</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest>rx.subscriptions.SerialSubscriptionTests.whenUnsubscribingSecondUnderlyingUnsubscribed(rx.subscriptions.SerialSubscriptionTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest>rx.observables.SyncOnSubscribeTest.testStateThrows(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>39</index><killingTest>rx.observables.SyncOnSubscribeTest.testExtendingBase(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>44</index><killingTest>rx.observables.SyncOnSubscribeTest.testGenericsCreateStatelessWithUnsub(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe</mutatedClass><mutatedMethod>createSingleState</mutatedMethod><methodDescription>(Lrx/functions/Func0;Lrx/functions/Action2;)Lrx/observables/SyncOnSubscribe;</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.observables.SyncOnSubscribeTest.testStateThrows(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe</mutatedClass><mutatedMethod>createSingleState</mutatedMethod><methodDescription>(Lrx/functions/Func0;Lrx/functions/Action2;Lrx/functions/Action1;)Lrx/observables/SyncOnSubscribe;</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><killingTest>rx.observables.SyncOnSubscribeTest.testGenericsCreateSingleStateWithUnsub(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe</mutatedClass><mutatedMethod>createStateful</mutatedMethod><methodDescription>(Lrx/functions/Func0;Lrx/functions/Func2;)Lrx/observables/SyncOnSubscribe;</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.observables.SyncOnSubscribeTest.testGenericsCreateStateful(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe</mutatedClass><mutatedMethod>createStateful</mutatedMethod><methodDescription>(Lrx/functions/Func0;Lrx/functions/Func2;Lrx/functions/Action1;)Lrx/observables/SyncOnSubscribe;</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.observables.SyncOnSubscribeTest.testGenericsCreateStatefulWithUnsub(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe</mutatedClass><mutatedMethod>createStateless</mutatedMethod><methodDescription>(Lrx/functions/Action1;)Lrx/observables/SyncOnSubscribe;</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.observables.SyncOnSubscribeTest.testGenericsCreateStateless(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe</mutatedClass><mutatedMethod>createStateless</mutatedMethod><methodDescription>(Lrx/functions/Action1;Lrx/functions/Action0;)Lrx/observables/SyncOnSubscribe;</methodDescription><lineNumber>266</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest>rx.observables.SyncOnSubscribeTest.testGenericsCreateStatelessWithUnsub(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$26</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1865</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.CompletableTest.subscribeActionNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$26</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1870</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.CompletableTest.subscribeActionReportsUnsubscribed(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$26</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1867</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$26</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1868</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest>rx.CompletableTest.subscribeOneActionThrowFromOnCompleted(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$26</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1870</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$26</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1870</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>42</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$26</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1876</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$26</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1877</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.CompletableTest.subscribeActionReportsUnsubscribedOnError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$26</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1878</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.CompletableTest.subscribeOneActionOnError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$26</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>1883</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$27</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1907</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.CompletableTest.subscribeTwoCallbacksNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$27</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1909</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest>rx.CompletableTest.subscribeTwoCallbacksCompleteThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$27</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1912</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest>rx.CompletableTest.subscribeAction2ReportsUnsubscribed(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$27</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1918</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.CompletableTest.subscribeTwoCallbacksCompleteThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$27</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1924</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.CompletableTest.subscribeAction2ReportsUnsubscribedOnErrorAfter(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$27</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1921</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>40</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$27</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1922</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>44</index><killingTest>rx.CompletableTest.subscribeTwoActionsThrowFromOnError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$27</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1924</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>49</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$27</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1924</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>60</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$27</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>1930</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SleepingAction.java</sourceFile><mutatedClass>rx.schedulers.SleepingAction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>37</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SleepingAction.java</sourceFile><mutatedClass>rx.schedulers.SleepingAction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>39</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SleepingAction.java</sourceFile><mutatedClass>rx.schedulers.SleepingAction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>38</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SleepingAction.java</sourceFile><mutatedClass>rx.schedulers.SleepingAction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>34</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SleepingAction.java</sourceFile><mutatedClass>rx.schedulers.SleepingAction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>37</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SleepingAction.java</sourceFile><mutatedClass>rx.schedulers.SleepingAction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>39</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SleepingAction.java</sourceFile><mutatedClass>rx.schedulers.SleepingAction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>63</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SleepingAction.java</sourceFile><mutatedClass>rx.schedulers.SleepingAction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SleepingAction.java</sourceFile><mutatedClass>rx.schedulers.SleepingAction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>49</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SleepingAction.java</sourceFile><mutatedClass>rx.schedulers.SleepingAction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>72</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDistinctUntilChanged.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDistinctUntilChanged$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorDistinctUntilChangedTest.testDistinctUntilChangedOfNoneWithKeySelector(rx.internal.operators.OperatorDistinctUntilChangedTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorDistinctUntilChanged.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDistinctUntilChanged$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDistinctUntilChanged.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDistinctUntilChanged$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>41</index><killingTest>rx.internal.operators.OperatorDistinctUntilChangedTest.testDistinctUntilChangedOfSourceWithNulls(rx.internal.operators.OperatorDistinctUntilChangedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDistinctUntilChanged.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDistinctUntilChanged$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>46</index><killingTest>rx.internal.operators.OperatorDistinctUntilChangedTest.testDistinctUntilChangedOfSourceWithNulls(rx.internal.operators.OperatorDistinctUntilChangedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDistinctUntilChanged.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDistinctUntilChanged$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>48</index><killingTest>rx.internal.operators.OperatorDistinctUntilChangedTest.testDistinctUntilChangedOfSourceWithNulls(rx.internal.operators.OperatorDistinctUntilChangedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDistinctUntilChanged.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDistinctUntilChanged$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>52</index><killingTest>rx.internal.operators.OperatorDistinctUntilChangedTest.testDistinctUntilChangedOfSourceWithNulls(rx.internal.operators.OperatorDistinctUntilChangedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDistinctUntilChanged.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDistinctUntilChanged$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest>rx.internal.operators.OperatorDistinctUntilChangedTest.testDistinctUntilChangedOfSourceWithExceptionsFromKeySelector(rx.internal.operators.OperatorDistinctUntilChangedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDistinctUntilChanged.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDistinctUntilChanged$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>59</index><killingTest>rx.internal.operators.OperatorDistinctUntilChangedTest.testDistinctUntilChangedOfSourceWithNulls(rx.internal.operators.OperatorDistinctUntilChangedTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorDistinctUntilChanged.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDistinctUntilChanged$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>66</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDistinctUntilChanged.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDistinctUntilChanged$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>79</index><killingTest>rx.internal.operators.OperatorDistinctUntilChangedTest.testDistinctUntilChangedOfSourceWithNulls(rx.internal.operators.OperatorDistinctUntilChangedTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$3$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>292</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$3$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$3$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Notification;)V</methodDescription><lineNumber>302</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.CompletableTest.retryNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$3$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Notification;)V</methodDescription><lineNumber>302</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.CompletableTest.retryNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$3$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Notification;)V</methodDescription><lineNumber>304</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest>rx.CompletableTest.repeat5Times(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$3$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Notification;)V</methodDescription><lineNumber>304</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest>rx.CompletableTest.repeatError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$3$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Notification;)V</methodDescription><lineNumber>303</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest>rx.CompletableTest.retryNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$3$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Notification;)V</methodDescription><lineNumber>305</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest>rx.CompletableTest.repeatError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$3$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Notification;)V</methodDescription><lineNumber>307</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>42</index><killingTest>rx.CompletableTest.repeat1Time(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$3$1</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>313</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZipIterable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZipIterable$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorZipIterableTest.testZipIterableEmptyFirstSize(rx.internal.operators.OperatorZipIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZipIterable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZipIterable$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorZipIterableTest.testZipIterableEmptyFirstSize(rx.internal.operators.OperatorZipIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZipIterable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZipIterable$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorZipIterableTest.testZipIterableFirstThrows(rx.internal.operators.OperatorZipIterableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorZipIterable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZipIterable$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZipIterable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZipIterable$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.internal.operators.OperatorZipIterableTest.testZipIterableFirstThrows(rx.internal.operators.OperatorZipIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZipIterable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZipIterable$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorZipIterableTest.testZipIterableSecondShorter(rx.internal.operators.OperatorZipIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZipIterable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZipIterable$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest>rx.internal.operators.OperatorZipIterableTest.testZipIterableSecondShorter(rx.internal.operators.OperatorZipIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZipIterable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZipIterable$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.internal.operators.OperatorZipIterableTest.testZipIterableSecondShorter(rx.internal.operators.OperatorZipIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZipIterable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZipIterable$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest>rx.internal.operators.OperatorZipIterableTest.testZipIterableSecondShorter(rx.internal.operators.OperatorZipIterableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorZipIterable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZipIterable$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>45</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribeCombineLatest$LatestCoordinator;I)V</methodDescription><lineNumber>374</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>398</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>402</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>387</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>388</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>391</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>393</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>379</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>382</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeCombineLatest.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeCombineLatest$CombinerSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>406</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorBufferTest.testBufferStopsWhenUnsubscribed1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>48</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithTimeTake1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>80</index><killingTest>rx.internal.operators.OperatorBufferTest.testBufferStopsWhenUnsubscribed1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>35</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>40</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>44</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithTimeTake1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>63</index><killingTest>rx.internal.operators.OperatorBufferTest.testBufferStopsWhenUnsubscribed1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>68</index><killingTest>rx.internal.operators.OperatorBufferTest.testBufferStopsWhenUnsubscribed1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>72</index><killingTest>rx.internal.operators.OperatorBufferTest.testBufferStopsWhenUnsubscribed1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>76</index><killingTest>rx.internal.operators.OperatorBufferTest.testBufferStopsWhenUnsubscribed1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipWhile$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorSkipWhileTest.testSkipEmpty(rx.internal.operators.OperatorSkipWhileTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorSkipWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipWhile$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSkipWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipWhile$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>25</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipWhile$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorSkipWhileTest.testPredicateFatalError(rx.internal.operators.OperatorSkipWhileTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipWhile$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>53</index><killingTest>rx.internal.operators.OperatorSkipWhileTest.testSkipEverything(rx.internal.operators.OperatorSkipWhileTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipWhile$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorSkipWhileTest.testSkipNothing(rx.internal.operators.OperatorSkipWhileTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipWhile$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>45</index><killingTest>rx.internal.operators.OperatorSkipWhileTest.testPredicateFatalError(rx.internal.operators.OperatorSkipWhileTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipWhile$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>64</index><killingTest>rx.internal.operators.OperatorSkipWhileTest.testSkipNothing(rx.internal.operators.OperatorSkipWhileTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSkipWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipWhile$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>71</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$WeakSingleProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>255</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>15</index><killingTest>rx.internal.util.ScalarSynchronousObservableTest.testBackpressure(rx.internal.util.ScalarSynchronousObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$WeakSingleProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>252</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.exceptions.ExceptionsTest.testThreadDeathIsThrown(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$WeakSingleProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>255</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.exceptions.ExceptionsTest.testThreadDeathIsThrown(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$WeakSingleProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>258</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><killingTest>rx.exceptions.ExceptionsTest.testThreadDeathIsThrown(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$WeakSingleProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>261</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><killingTest>rx.exceptions.ExceptionsTest.testThreadDeathIsThrown(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$WeakSingleProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>87</index><killingTest>rx.internal.operators.OnSubscribeCompletableTest.testJustSingleItemObservable(rx.internal.operators.OnSubscribeCompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$WeakSingleProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>266</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>65</index><killingTest>rx.exceptions.ExceptionsTest.testThreadDeathIsThrown(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$WeakSingleProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>268</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>78</index><killingTest>rx.exceptions.ExceptionsTest.testThreadDeathIsThrown(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$WeakSingleProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>275</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>95</index><killingTest>rx.internal.operators.OnSubscribeCompletableTest.testJustSingleItemObservable(rx.internal.operators.OnSubscribeCompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SingleOperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.SingleOperatorZip$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>26</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>44</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleOperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.SingleOperatorZip$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>26</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>101</index><killingTest>rx.SingleTest.zip2Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleOperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.SingleOperatorZip$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>26</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>44</index><killingTest>rx.SingleTest.zip2Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleOperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.SingleOperatorZip$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>27</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>49</index><killingTest>rx.SingleTest.zip2Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleOperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.SingleOperatorZip$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>27</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>52</index><killingTest>rx.SingleTest.zip2Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleOperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.SingleOperatorZip$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>82</index><killingTest>rx.SingleTest.zip2Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleOperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.SingleOperatorZip$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>85</index><killingTest>rx.SingleTest.zip2Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SingleOperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.SingleOperatorZip$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>24</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SingleOperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.SingleOperatorZip$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>77</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$TimeEvictionPolicy</mutatedClass><mutatedMethod>evict</mutatedMethod><methodDescription>(Lrx/subjects/ReplaySubject$NodeList;)V</methodDescription><lineNumber>902</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueTimeBounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$TimeEvictionPolicy</mutatedClass><mutatedMethod>evict</mutatedMethod><methodDescription>(Lrx/subjects/ReplaySubject$NodeList;)V</methodDescription><lineNumber>904</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueTimeBounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$TimeEvictionPolicy</mutatedClass><mutatedMethod>evictFinal</mutatedMethod><methodDescription>(Lrx/subjects/ReplaySubject$NodeList;)V</methodDescription><lineNumber>915</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$TimeEvictionPolicy</mutatedClass><mutatedMethod>evictFinal</mutatedMethod><methodDescription>(Lrx/subjects/ReplaySubject$NodeList;)V</methodDescription><lineNumber>915</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueTimeBounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$TimeEvictionPolicy</mutatedClass><mutatedMethod>evictFinal</mutatedMethod><methodDescription>(Lrx/subjects/ReplaySubject$NodeList;)V</methodDescription><lineNumber>917</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueTimeBounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$TimeEvictionPolicy</mutatedClass><mutatedMethod>test</mutatedMethod><methodDescription>(Ljava/lang/Object;J)Z</methodDescription><lineNumber>928</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>15</index><killingTest>rx.subjects.ReplaySubjectTest.testReplayTimestampedAfterTermination(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$TimeEvictionPolicy</mutatedClass><mutatedMethod>test</mutatedMethod><methodDescription>(Ljava/lang/Object;J)Z</methodDescription><lineNumber>928</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>13</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueTimeBounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$TimeEvictionPolicy</mutatedClass><mutatedMethod>test</mutatedMethod><methodDescription>(Ljava/lang/Object;J)Z</methodDescription><lineNumber>928</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueTimeBounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$TimeEvictionPolicy</mutatedClass><mutatedMethod>test</mutatedMethod><methodDescription>(Ljava/lang/Object;J)Z</methodDescription><lineNumber>928</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueTimeBounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSequenceEqual.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSequenceEqual$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Boolean;</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorSequenceEqualTest.testWithEqualityError(rx.internal.operators.OperatorSequenceEqualTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSequenceEqual.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSequenceEqual$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Boolean;</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><killingTest>rx.internal.operators.OperatorSequenceEqualTest.testWithEmpty1(rx.internal.operators.OperatorSequenceEqualTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSequenceEqual.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSequenceEqual$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Boolean;</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest>rx.internal.operators.OperatorSequenceEqualTest.test3(rx.internal.operators.OperatorSequenceEqualTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSequenceEqual.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSequenceEqual$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Boolean;</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest>rx.internal.operators.OperatorSequenceEqualTest.testWithEmpty1(rx.internal.operators.OperatorSequenceEqualTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSequenceEqual.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSequenceEqual$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Boolean;</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><killingTest>rx.internal.operators.OperatorSequenceEqualTest.testWithEqualityError(rx.internal.operators.OperatorSequenceEqualTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSequenceEqual.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSequenceEqual$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Boolean;</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>44</index><killingTest>rx.internal.operators.OperatorSequenceEqualTest.testWithEqualityError(rx.internal.operators.OperatorSequenceEqualTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSequenceEqual.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSequenceEqual$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Boolean;</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>37</index><killingTest>rx.internal.operators.OperatorSequenceEqualTest.testWithEmpty3(rx.internal.operators.OperatorSequenceEqualTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSequenceEqual.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSequenceEqual$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Boolean;</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>50</index><killingTest>rx.internal.operators.OperatorSequenceEqualTest.testWithEmpty1(rx.internal.operators.OperatorSequenceEqualTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSequenceEqual.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSequenceEqual$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Boolean;</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>60</index><killingTest>rx.internal.operators.OperatorSequenceEqualTest.test3(rx.internal.operators.OperatorSequenceEqualTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSkipLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipLastTimed$1</mutatedClass><mutatedMethod>emitItemsOutOfWindow</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>29</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipLastTimed$1</mutatedClass><mutatedMethod>emitItemsOutOfWindow</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorSkipLastTimedTest.testSkipLastTimedCompleteBeforeTime(rx.internal.operators.OperatorSkipLastTimedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipLastTimed$1</mutatedClass><mutatedMethod>emitItemsOutOfWindow</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorSkipLastTimedTest.testSkipLastTimedCompleteBeforeTime(rx.internal.operators.OperatorSkipLastTimedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipLastTimed$1</mutatedClass><mutatedMethod>emitItemsOutOfWindow</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest>rx.internal.operators.OperatorSkipLastTimedTest.testSkipLastTimedCompleteBeforeTime(rx.internal.operators.OperatorSkipLastTimedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipLastTimed$1</mutatedClass><mutatedMethod>emitItemsOutOfWindow</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>42</index><killingTest>rx.internal.operators.OperatorSkipLastTimedTest.testSkipLastTimedWhenAllElementsAreValid(rx.internal.operators.OperatorSkipLastTimedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipLastTimed$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorSkipLastTimedTest.testSkipLastTimedWhenAllElementsAreValid(rx.internal.operators.OperatorSkipLastTimedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipLastTimed$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorSkipLastTimedTest.testSkipLastTimedCompleteBeforeTime(rx.internal.operators.OperatorSkipLastTimedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipLastTimed$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSkipLastTimedTest.testSkipLastTimedErrorBeforeTime(rx.internal.operators.OperatorSkipLastTimedTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSkipLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipLastTimed$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitchIfEmpty.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorSwitchIfEmptyTest.testSwitchTriggerUnsubscribe(rx.internal.operators.OperatorSwitchIfEmptyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitchIfEmpty.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><killingTest>rx.internal.operators.OperatorSwitchIfEmptyTest.testSwitchShouldTriggerUnsubscribe(rx.internal.operators.OperatorSwitchIfEmptyTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorSwitchIfEmpty.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitchIfEmpty.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.internal.operators.OperatorSwitchIfEmptyTest.testSwitchShouldTriggerUnsubscribe(rx.internal.operators.OperatorSwitchIfEmptyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitchIfEmpty.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorDelayTest.testDelayWithObservableDelayThrows(rx.internal.operators.OperatorDelayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitchIfEmpty.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorSwitchIfEmptyTest.testSwitchWhenNotEmpty(rx.internal.operators.OperatorSwitchIfEmptyTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSwitchIfEmpty.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorSwitchIfEmpty.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitchIfEmpty.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitchIfEmpty$ParentSubscriber</mutatedClass><mutatedMethod>subscribeToAlternate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorSwitchIfEmptyTest.testSwitchShouldTriggerUnsubscribe(rx.internal.operators.OperatorSwitchIfEmptyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureDrop.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureDrop$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorOnBackpressureDropTest.testWithObserveOn(rx.internal.operators.OperatorOnBackpressureDropTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorOnBackpressureDrop.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureDrop$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureDrop.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureDrop$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorOnBackpressureDropTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureDropTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureDrop.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureDrop$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorOnBackpressureDropTest.testRequestOverflow(rx.internal.operators.OperatorOnBackpressureDropTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureDrop.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureDrop$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest>rx.internal.operators.OperatorOnBackpressureDropTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureDropTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureDrop.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureDrop$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorOnBackpressureDropTest.testRequestOverflow(rx.internal.operators.OperatorOnBackpressureDropTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureDrop.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureDrop$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>35</index><killingTest>rx.BackpressureTests.testOnBackpressureDropWithAction(rx.BackpressureTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnBackpressureDrop.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureDrop$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>49</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureDrop.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureDrop$2</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorOnBackpressureDropTest.testWithObserveOn(rx.internal.operators.OperatorOnBackpressureDropTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest>rx.internal.producers.ProducersTest.testSingleWithBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.producers.ProducersTest.testSingleNoBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.internal.producers.ProducersTest.testSingleNoBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest>rx.internal.producers.ProducersTest.testSingleNoBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>46</index><killingTest>rx.internal.producers.ProducersTest.testSingleNoBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>77</index><killingTest>rx.internal.producers.ProducersTest.testSingleNoBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>55</index><killingTest>rx.internal.producers.ProducersTest.testSingleNoBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SingleProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>68</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleProducer.java</sourceFile><mutatedClass>rx.internal.producers.SingleProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>85</index><killingTest>rx.internal.producers.ProducersTest.testSingleNoBackpressure(rx.internal.producers.ProducersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorBufferTest.testComplete(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest>rx.internal.operators.OperatorBufferTest.testSkipAndCountGaplessBuffers(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>41</index><killingTest>rx.internal.operators.OperatorBufferTest.testComplete(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithSizeThrows(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorBufferTest.testSkipAndCountGaplessBuffers(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest>rx.internal.operators.OperatorBufferTest.testSkipAndCountGaplessBuffers(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>48</index><killingTest>rx.internal.operators.OperatorBufferTest.testSkipAndCountGaplessBuffers(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$1</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestOverflowThroughBufferWithSize1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MultipleAssignmentSubscription.java</sourceFile><mutatedClass>rx.subscriptions.MultipleAssignmentSubscription</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>()Lrx/Subscription;</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.subscriptions.MultipleAssignmentSubscriptionTest.testSubscriptionRemainsAfterUnsubscribe(rx.subscriptions.MultipleAssignmentSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MultipleAssignmentSubscription.java</sourceFile><mutatedClass>rx.subscriptions.MultipleAssignmentSubscription</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.subscriptions.MultipleAssignmentSubscriptionTest.testUnsubscribeWhenParentUnsubscribes(rx.subscriptions.MultipleAssignmentSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MultipleAssignmentSubscription.java</sourceFile><mutatedClass>rx.subscriptions.MultipleAssignmentSubscription</mutatedClass><mutatedMethod>set</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.subscriptions.MultipleAssignmentSubscriptionTest.testSubscriptionRemainsAfterUnsubscribe(rx.subscriptions.MultipleAssignmentSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MultipleAssignmentSubscription.java</sourceFile><mutatedClass>rx.subscriptions.MultipleAssignmentSubscription</mutatedClass><mutatedMethod>set</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest>rx.subscriptions.MultipleAssignmentSubscriptionTest.testSubscriptionRemainsAfterUnsubscribe(rx.subscriptions.MultipleAssignmentSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MultipleAssignmentSubscription.java</sourceFile><mutatedClass>rx.subscriptions.MultipleAssignmentSubscription</mutatedClass><mutatedMethod>set</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>50</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MultipleAssignmentSubscription.java</sourceFile><mutatedClass>rx.subscriptions.MultipleAssignmentSubscription</mutatedClass><mutatedMethod>set</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest>rx.subscriptions.MultipleAssignmentSubscriptionTest.subscribingWhenUnsubscribedCausesImmediateUnsubscription(rx.subscriptions.MultipleAssignmentSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MultipleAssignmentSubscription.java</sourceFile><mutatedClass>rx.subscriptions.MultipleAssignmentSubscription</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.subscriptions.MultipleAssignmentSubscriptionTest.testUnsubscribeWhenParentUnsubscribes(rx.subscriptions.MultipleAssignmentSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MultipleAssignmentSubscription.java</sourceFile><mutatedClass>rx.subscriptions.MultipleAssignmentSubscription</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><killingTest>rx.subscriptions.MultipleAssignmentSubscriptionTest.testUnsubscribeWhenParentUnsubscribes(rx.subscriptions.MultipleAssignmentSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MultipleAssignmentSubscription.java</sourceFile><mutatedClass>rx.subscriptions.MultipleAssignmentSubscription</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest>rx.subscriptions.MultipleAssignmentSubscriptionTest.testUnsubscribeWhenParentUnsubscribes(rx.subscriptions.MultipleAssignmentSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSampleWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.ThrottleLastTests.testThrottle(rx.ThrottleLastTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSampleWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.ThrottleLastTests.testThrottle(rx.ThrottleLastTests)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorSampleWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSampleWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.ThrottleLastTests.testThrottle(rx.ThrottleLastTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSampleWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorSampleWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorSampleWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSampleWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.ThrottleLastTests.testThrottle(rx.ThrottleLastTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSampleWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithTime$SamplerSubscriber</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkip$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorSkipTest.testSkipEmptyStream(rx.internal.operators.OperatorSkipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkip$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSkipTest.testSkipError(rx.internal.operators.OperatorSkipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkip$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorSkipTest.testSkipOneElement(rx.internal.operators.OperatorSkipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkip$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorSkipTest.testSkipOneElement(rx.internal.operators.OperatorSkipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkip$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorSkipTest.testSkipOneElement(rx.internal.operators.OperatorSkipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkip$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorSkipTest.testSkipOneElement(rx.internal.operators.OperatorSkipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkip$1</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSkipTest.testSkipOneElement(rx.internal.operators.OperatorSkipTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorSkip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkip$1</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest>rx.BackpressureTests.testFirehoseFailsAsExpected(rx.BackpressureTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler</mutatedClass><mutatedMethod>createWorker</mutatedMethod><methodDescription>()Lrx/Scheduler$Worker;</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.schedulers.ComputationSchedulerTests.testRecursiveExecution(rx.schedulers.ComputationSchedulerTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler</mutatedClass><mutatedMethod>scheduleDirect</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><killingTest>rx.observables.BlockingObservableTest.testRun(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.BackpressureTests.testFirehoseFailsAsExpected(rx.BackpressureTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testStartIdempotence(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber$2</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber$2</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>177</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber$2</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber$2</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber$2</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber$2</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber$2</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber$2</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>45</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip$InnerSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>318</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip$InnerSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>319</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorZipTest.testStartpingDifferentLengthObservableSequences2(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip$InnerSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>325</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorZipTest.testFirstFails(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip$InnerSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorZipTest.testAggregate3Types(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip$InnerSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>333</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip$InnerSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>335</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.internal.operators.OperatorZipTest.testAggregate3Types(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip$InnerSubscriber</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>309</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorZipTest.testBackpressureSync(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$Zip$InnerSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>313</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BaseLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.BaseLinkedQueue</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BaseLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.BaseLinkedQueue</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BaseLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.BaseLinkedQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BaseLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.BaseLinkedQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>41</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BaseLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.BaseLinkedQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BaseLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.BaseLinkedQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BaseLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.BaseLinkedQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BaseLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.BaseLinkedQueue</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>49</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>27</index><killingTest>rx.internal.operators.OperatorTakeTest.testDoesntRequestMoreThanNeededFromUpstream(rx.internal.operators.OperatorTakeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>47</index><killingTest>rx.internal.operators.OperatorTakeTest.testDoesntRequestMoreThanNeededFromUpstream(rx.internal.operators.OperatorTakeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.SubscriberTest.testRequestThroughTakeThatReducesRequest(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.SubscriberTest.testRequestThroughTakeThatReducesRequest(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><killingTest>rx.SubscriberTest.testRequestThroughTakeThatReducesRequest(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>49</index><killingTest>rx.SubscriberTest.testRequestThroughTakeThatReducesRequest(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake$1$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>55</index><killingTest>rx.SubscriberTest.testRequestThroughTakeThatReducesRequest(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatInnerSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>227</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorConcatTest.testRequestOverflowDoesNotStallStream(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatInnerSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorRetryWithPredicateTest.testBackpressure(rx.internal.operators.OperatorRetryWithPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatInnerSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>232</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorConcatTest.testRequestOverflowDoesNotStallStream(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatInnerSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.CompletableTest.startWithFlowableError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatInnerSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>221</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.CompletableTest.startWithFlowableError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatInnerSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorConcatTest.testRequestOverflowDoesNotStallStream(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatInnerSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorConcatTest.testConcatObservableOfObservables(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatInnerSubscriber</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>238</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorConcatTest.testRequestOverflowDoesNotStallStream(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeArray$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.CompletableTest.mergeMultipleOneThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMergeArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeArray$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMergeArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeArray$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeArray$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.CompletableTest.mergeMultipleOneThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMergeArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeArray$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeArray$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.CompletableTest.mergeMultipleOneThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMergeArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeArray$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMergeArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeArray$1</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$NodeList</mutatedClass><mutatedMethod>addLast</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>1058</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>29</index><killingTest>rx.subjects.ReplaySubjectTest.testNodeListSimpleAddRemove(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$NodeList</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1073</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueTimeBounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$NodeList</mutatedClass><mutatedMethod>isEmpty</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1073</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueTimeBounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$NodeList</mutatedClass><mutatedMethod>removeFirst</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>1069</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>47</index><killingTest>rx.subjects.ReplaySubjectTest.testNodeListSimpleAddRemove(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$NodeList</mutatedClass><mutatedMethod>removeFirst</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>1061</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.subjects.ReplaySubjectTest.testNodeListSimpleAddRemove(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$NodeList</mutatedClass><mutatedMethod>removeFirst</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>1066</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><killingTest>rx.subjects.ReplaySubjectTest.testNodeListSimpleAddRemove(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$NodeList</mutatedClass><mutatedMethod>removeFirst</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>1070</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>53</index><killingTest>rx.subjects.ReplaySubjectTest.testNodeListSimpleAddRemove(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$NodeList</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1076</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.subjects.ReplaySubjectTest.testNodeListSimpleAddRemove(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Ljava/lang/Object;)Lrx/internal/util/ScalarSynchronousObservable;</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.util.ScalarSynchronousObservableTest.syncFlatMapJustObserverNextThrows(rx.internal.util.ScalarSynchronousObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable</mutatedClass><mutatedMethod>createProducer</mutatedMethod><methodDescription>(Lrx/Subscriber;Ljava/lang/Object;)Lrx/Producer;</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable</mutatedClass><mutatedMethod>createProducer</mutatedMethod><methodDescription>(Lrx/Subscriber;Ljava/lang/Object;)Lrx/Producer;</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable</mutatedClass><mutatedMethod>createProducer</mutatedMethod><methodDescription>(Lrx/Subscriber;Ljava/lang/Object;)Lrx/Producer;</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><killingTest>rx.internal.util.ScalarSynchronousObservableTest.syncFlatMapJustObserverNextThrows(rx.internal.util.ScalarSynchronousObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.ObservableTests.testMergeWith(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable</mutatedClass><mutatedMethod>scalarFlatMap</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Observable;</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.util.ScalarSynchronousObservableTest.syncFlatMapJustObserverNextThrows(rx.internal.util.ScalarSynchronousObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable</mutatedClass><mutatedMethod>scalarScheduleOn</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test1ToNSourcesScheduled(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable</mutatedClass><mutatedMethod>scalarScheduleOn</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/Observable;</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>41</index><killingTest>rx.internal.util.ScalarSynchronousObservableTest.asyncObserverNextThrows(rx.internal.util.ScalarSynchronousObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$3$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.CompletableTest.ambWithArrayOneFires(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$3$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$3$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest>rx.CompletableTest.ambWithArrayOneFires(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$3$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.CompletableTest.ambWithArraySecondFiresError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$3$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$3$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.CompletableTest.ambWithArraySecondFiresError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$3$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$3$1</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.CompletableTest.ambWithArraySecondFiresError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipTimed$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorSkipTimedTest.testSkipTimedFinishBeforeTime(rx.internal.operators.OperatorSkipTimedTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSkipTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipTimed$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSkipTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipTimed$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipTimed$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSkipTimedTest.testSkipTimedErrorBeforeTime(rx.internal.operators.OperatorSkipTimedTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSkipTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipTimed$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSkipTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipTimed$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipTimed$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSkipTimedTest.testSkipTimedFinishBeforeTime(rx.internal.operators.OperatorSkipTimedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipTimed$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorSkipTimedTest.testSkipTimedErrorAfterTime(rx.internal.operators.OperatorSkipTimedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Pow2.java</sourceFile><mutatedClass>rx.internal.util.unsafe.Pow2</mutatedClass><mutatedMethod>isPowerOfTwo</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>6</index><killingTest>rx.internal.util.JCToolsQueueTests.powerOfTwo(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Pow2.java</sourceFile><mutatedClass>rx.internal.util.unsafe.Pow2</mutatedClass><mutatedMethod>isPowerOfTwo</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><killingTest>rx.internal.util.JCToolsQueueTests.powerOfTwo(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Pow2.java</sourceFile><mutatedClass>rx.internal.util.unsafe.Pow2</mutatedClass><mutatedMethod>isPowerOfTwo</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.util.JCToolsQueueTests.powerOfTwo(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Pow2.java</sourceFile><mutatedClass>rx.internal.util.unsafe.Pow2</mutatedClass><mutatedMethod>isPowerOfTwo</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><killingTest>rx.internal.util.JCToolsQueueTests.powerOfTwo(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Pow2.java</sourceFile><mutatedClass>rx.internal.util.unsafe.Pow2</mutatedClass><mutatedMethod>roundToPowerOfTwo</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>32</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Pow2.java</sourceFile><mutatedClass>rx.internal.util.unsafe.Pow2</mutatedClass><mutatedMethod>roundToPowerOfTwo</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>32</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>9</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpmcArrayQueueIterator(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Pow2.java</sourceFile><mutatedClass>rx.internal.util.unsafe.Pow2</mutatedClass><mutatedMethod>roundToPowerOfTwo</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>32</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>10</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Pow2.java</sourceFile><mutatedClass>rx.internal.util.unsafe.Pow2</mutatedClass><mutatedMethod>roundToPowerOfTwo</mutatedMethod><methodDescription>(I)I</methodDescription><lineNumber>32</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpscOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BooleanSubscription.java</sourceFile><mutatedClass>rx.subscriptions.BooleanSubscription</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>()Lrx/subscriptions/BooleanSubscription;</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.subscriptions.SerialSubscriptionTests.unsubscribingWithoutUnderlyingDoesNothing(rx.subscriptions.SerialSubscriptionTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BooleanSubscription.java</sourceFile><mutatedClass>rx.subscriptions.BooleanSubscription</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/subscriptions/BooleanSubscription;</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.schedulers.TestSchedulerTest.testImmediateUnsubscribes2(rx.schedulers.TestSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BooleanSubscription.java</sourceFile><mutatedClass>rx.subscriptions.BooleanSubscription</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testRemoveUnsubscribes(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BooleanSubscription.java</sourceFile><mutatedClass>rx.subscriptions.BooleanSubscription</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testRemoveUnsubscribes(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BooleanSubscription.java</sourceFile><mutatedClass>rx.subscriptions.BooleanSubscription</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.subscriptions.CompositeSubscriptionTest.testRemoveUnsubscribes(rx.subscriptions.CompositeSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BooleanSubscription.java</sourceFile><mutatedClass>rx.subscriptions.BooleanSubscription</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest>rx.subscriptions.SerialSubscriptionTests.unsubscribingWithoutUnderlyingDoesNothing(rx.subscriptions.SerialSubscriptionTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BooleanSubscription.java</sourceFile><mutatedClass>rx.subscriptions.BooleanSubscription</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest>rx.subscriptions.SubscriptionsTest.testUnsubscribeOnlyOnce(rx.subscriptions.SubscriptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BooleanSubscription.java</sourceFile><mutatedClass>rx.subscriptions.BooleanSubscription</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest>rx.subscriptions.SubscriptionsTest.testUnsubscribeOnlyOnce(rx.subscriptions.SubscriptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDematerialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDematerialize$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorDematerializeTest.testCompletePassThru(rx.internal.operators.OperatorDematerializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDematerialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDematerialize$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorDematerializeTest.testCompletePassThru(rx.internal.operators.OperatorDematerializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDematerialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDematerialize$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorDematerializeTest.testErrorPassThru(rx.internal.operators.OperatorDematerializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDematerialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDematerialize$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorDematerializeTest.testErrorPassThru(rx.internal.operators.OperatorDematerializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDematerialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDematerialize$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Notification;)V</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorDematerializeTest.testHonorsContractWhenCompleted(rx.internal.operators.OperatorDematerializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDematerialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDematerialize$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Notification;)V</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorDematerializeTest.testHonorsContractWhenCompleted(rx.internal.operators.OperatorDematerializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDematerialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDematerialize$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Notification;)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.internal.operators.OperatorDematerializeTest.testHonorsContractWhenThrows(rx.internal.operators.OperatorDematerializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDematerialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDematerialize$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Notification;)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>37</index><killingTest>rx.CompletableTest.repeat1Time(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimed(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>36</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimedAndCount(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>63</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimed(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>51</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>55</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>59</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorAll.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAll$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorAllTest.testEmpty(rx.internal.operators.OperatorAllTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorAll.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAll$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorAllTest.testEmpty(rx.internal.operators.OperatorAllTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorAll.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAll$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorAllTest.testError(rx.internal.operators.OperatorAllTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorAll.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAll$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest>rx.internal.operators.OperatorAllTest.testAll(rx.internal.operators.OperatorAllTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorAll.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAll$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest>rx.internal.operators.OperatorAllTest.testNotAll(rx.internal.operators.OperatorAllTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorAll.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAll$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.internal.operators.OperatorAllTest.testPredicateThrowsExceptionAndValueInCauseMessage(rx.internal.operators.OperatorAllTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorAll.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAll$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>46</index><killingTest>rx.internal.operators.OperatorAllTest.testNotAll(rx.internal.operators.OperatorAllTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorAll.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAll$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>50</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeTimeout.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeTimeout$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.CompletableTest.timeoutTimerCancelled(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeTimeout.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeTimeout$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeTimeout.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeTimeout$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest>rx.CompletableTest.timeoutTimerCancelled(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeTimeout.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeTimeout$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeTimeout.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeTimeout$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeTimeout.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeTimeout$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeTimeout.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeTimeout$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeTimeout.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeTimeout$2</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Notification;)V</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Notification;)V</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Notification;)V</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest>rx.internal.operators.BlockingOperatorNextTest.testNoBufferingOrBlockingOfSequence(rx.internal.operators.BlockingOperatorNextTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Notification;)V</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Lrx/Notification;)V</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextObserver</mutatedClass><mutatedMethod>setWaiting</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>187</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextObserver</mutatedClass><mutatedMethod>takeNext</mutatedMethod><methodDescription>()Lrx/Notification;</methodDescription><lineNumber>184</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.internal.operators.BlockingOperatorNextTest.testNoBufferingOrBlockingOfSequence(rx.internal.operators.BlockingOperatorNextTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$NextObserver</mutatedClass><mutatedMethod>takeNext</mutatedMethod><methodDescription>()Lrx/Notification;</methodDescription><lineNumber>183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorThrottleFirst.java</sourceFile><mutatedClass>rx.internal.operators.OperatorThrottleFirst$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorThrottleFirstTest.testThrottlingWithCompleted(rx.internal.operators.OperatorThrottleFirstTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorThrottleFirst.java</sourceFile><mutatedClass>rx.internal.operators.OperatorThrottleFirst$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorThrottleFirstTest.testThrottlingWithError(rx.internal.operators.OperatorThrottleFirstTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorThrottleFirst.java</sourceFile><mutatedClass>rx.internal.operators.OperatorThrottleFirst$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorThrottleFirstTest.testThrottle(rx.internal.operators.OperatorThrottleFirstTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorThrottleFirst.java</sourceFile><mutatedClass>rx.internal.operators.OperatorThrottleFirst$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>18</index><killingTest>rx.internal.operators.OperatorThrottleFirstTest.testThrottlingWithCompleted(rx.internal.operators.OperatorThrottleFirstTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorThrottleFirst.java</sourceFile><mutatedClass>rx.internal.operators.OperatorThrottleFirst$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorThrottleFirstTest.testThrottlingWithCompleted(rx.internal.operators.OperatorThrottleFirstTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorThrottleFirst.java</sourceFile><mutatedClass>rx.internal.operators.OperatorThrottleFirst$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorThrottleFirstTest.testThrottlingWithCompleted(rx.internal.operators.OperatorThrottleFirstTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorThrottleFirst.java</sourceFile><mutatedClass>rx.internal.operators.OperatorThrottleFirst$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>35</index><killingTest>rx.internal.operators.OperatorThrottleFirstTest.testThrottlingWithCompleted(rx.internal.operators.OperatorThrottleFirstTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorThrottleFirst.java</sourceFile><mutatedClass>rx.internal.operators.OperatorThrottleFirst$1</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>44</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.CompletableTest.mergeIterableManyOneThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.CompletableTest.mergeIterableManyOneThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.CompletableTest.mergeIterableManyOneThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMergeIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeIterable$1</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMulticast</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorMulticastTest.testMulticastConnectTwice(rx.internal.operators.OperatorMulticastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMulticast</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>72</index><killingTest>rx.internal.operators.OperatorMulticastTest.testMulticastConnectTwice(rx.internal.operators.OperatorMulticastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMulticast</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>154</index><killingTest>rx.internal.operators.OperatorMulticastTest.testMulticastConnectTwice(rx.internal.operators.OperatorMulticastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMulticast</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest>rx.internal.operators.OperatorMulticastTest.testMulticastConnectTwice(rx.internal.operators.OperatorMulticastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMulticast</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>54</index><killingTest>rx.internal.operators.OperatorMulticastTest.testMulticastDisconnect(rx.internal.operators.OperatorMulticastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMulticast</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>96</index><killingTest>rx.internal.operators.OperatorMulticastTest.testMulticastDisconnect(rx.internal.operators.OperatorMulticastTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMulticast</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>102</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMulticast</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>123</index><killingTest>rx.internal.operators.OperatorMulticastTest.testMulticastConnectTwice(rx.internal.operators.OperatorMulticastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeProducer</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(I)J</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.InvertNegsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorMergeTest.shouldNotCompleteWhileThereAreStillScalarSynchronousEmissionsInTheQueue(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeProducer</mutatedClass><mutatedMethod>produced</mutatedMethod><methodDescription>(I)J</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorMergeMaxConcurrentTest.testBackpressureHonored(rx.internal.operators.OperatorMergeMaxConcurrentTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>36</index><killingTest>rx.internal.operators.OperatorMergeTest.shouldCompleteAfterApplyingBackpressure_FastPath(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.ObservableTests.testMergeWith(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.ObservableTests.testMergeWith(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><killingTest>rx.internal.operators.OperatorMergeTest.shouldCompleteAfterApplyingBackpressure_FastPath(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMerge.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMerge$MergeProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest>rx.internal.operators.OperatorMergeTest.shouldCompleteAfterApplyingBackpressure_FastPath(rx.internal.operators.OperatorMergeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorSampleTest.testSampleUnsubscribe(rx.internal.operators.OperatorSampleTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>EventLoopsScheduler.java</sourceFile><mutatedClass>rx.internal.schedulers.EventLoopsScheduler$EventLoopWorker</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber$2</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber$2</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber$2</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber$2</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>27</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testIssue1677(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber$2</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testBackpressureOuter(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber$2</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testIssue1677(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber$2</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testIssue1677(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber$2</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>45</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testBackpressureOuter(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorSubscribeOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSubscribeOn$1$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSubscribeOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSubscribeOn$1$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorReplayTest.testIssue2191_SchedulerUnsubscribe(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorSubscribeOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSubscribeOn$1$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSubscribeOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSubscribeOn$1$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorSubscribeOnTest.testOnError(rx.internal.operators.OperatorSubscribeOnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSubscribeOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSubscribeOn$1$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorReplayTest.testIssue2191_SchedulerUnsubscribeOnError(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSubscribeOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSubscribeOn$1$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>25</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorSubscribeOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSubscribeOn$1$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorSubscribeOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSubscribeOn$1$1</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>202</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.CompletableTest.ambIterableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>203</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>204</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest>rx.CompletableTest.ambIterableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.CompletableTest.ambIterableOneThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.CompletableTest.ambIterableOneThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$4$1</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest>rx.CompletableTest.mergeDelayErrorIterableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.CompletableTest.mergeDelayErrorIterableManyOneThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable$1</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable$1</mutatedClass><mutatedMethod>tryTerminate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable$1</mutatedClass><mutatedMethod>tryTerminate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable$1</mutatedClass><mutatedMethod>tryTerminate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMergeDelayErrorIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorIterable$1</mutatedClass><mutatedMethod>tryTerminate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast$PublishProducer</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>474</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast$PublishProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>463</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast$PublishProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>463</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast$PublishProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>466</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.directCompletesUnsafe(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast$PublishProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>468</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureExceptionDelayed(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast$PublishProducer</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>479</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.concatTakeFirstLastBackpressureCompletes(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast$PublishProducer</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>480</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.concatTakeFirstLastBackpressureCompletes(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>PlatformDependent.java</sourceFile><mutatedClass>rx.internal.util.PlatformDependent</mutatedClass><mutatedMethod>getAndroidApiVersion</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>PlatformDependent.java</sourceFile><mutatedClass>rx.internal.util.PlatformDependent</mutatedClass><mutatedMethod>getSystemClassLoader</mutatedMethod><methodDescription>()Ljava/lang/ClassLoader;</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>PlatformDependent.java</sourceFile><mutatedClass>rx.internal.util.PlatformDependent</mutatedClass><mutatedMethod>getSystemClassLoader</mutatedMethod><methodDescription>()Ljava/lang/ClassLoader;</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>PlatformDependent.java</sourceFile><mutatedClass>rx.internal.util.PlatformDependent</mutatedClass><mutatedMethod>getSystemClassLoader</mutatedMethod><methodDescription>()Ljava/lang/ClassLoader;</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>PlatformDependent.java</sourceFile><mutatedClass>rx.internal.util.PlatformDependent</mutatedClass><mutatedMethod>isAndroid</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>PlatformDependent.java</sourceFile><mutatedClass>rx.internal.util.PlatformDependent</mutatedClass><mutatedMethod>resolveAndroidApiVersion</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>PlatformDependent.java</sourceFile><mutatedClass>rx.internal.util.PlatformDependent</mutatedClass><mutatedMethod>resolveAndroidApiVersion</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer$IndexSection</mutatedClass><mutatedMethod>getAndSet</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>516</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.util.IndexedRingBufferTest.addRemoveAdd(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer$IndexSection</mutatedClass><mutatedMethod>getNext</mutatedMethod><methodDescription>()Lrx/internal/util/IndexedRingBuffer$IndexSection;</methodDescription><lineNumber>526</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer$IndexSection</mutatedClass><mutatedMethod>getNext</mutatedMethod><methodDescription>()Lrx/internal/util/IndexedRingBuffer$IndexSection;</methodDescription><lineNumber>530</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer$IndexSection</mutatedClass><mutatedMethod>getNext</mutatedMethod><methodDescription>()Lrx/internal/util/IndexedRingBuffer$IndexSection;</methodDescription><lineNumber>527</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer$IndexSection</mutatedClass><mutatedMethod>getNext</mutatedMethod><methodDescription>()Lrx/internal/util/IndexedRingBuffer$IndexSection;</methodDescription><lineNumber>532</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer$IndexSection</mutatedClass><mutatedMethod>getNext</mutatedMethod><methodDescription>()Lrx/internal/util/IndexedRingBuffer$IndexSection;</methodDescription><lineNumber>535</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>40</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer$IndexSection</mutatedClass><mutatedMethod>set</mutatedMethod><methodDescription>(II)V</methodDescription><lineNumber>520</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.util.IndexedRingBufferTest.addRemoveAdd(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeToObservableFuture.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.CompletableTest.fromFutureThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeToObservableFuture.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><killingTest>rx.CompletableTest.fromFutureThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeToObservableFuture.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>60</index><killingTest>rx.CompletableTest.fromFutureThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeToObservableFuture.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest>rx.internal.operators.OnSubscribeToObservableFutureTest.testSuccess(rx.internal.operators.OnSubscribeToObservableFutureTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeToObservableFuture.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>44</index><killingTest>rx.internal.operators.OnSubscribeToObservableFutureTest.testSuccess(rx.internal.operators.OnSubscribeToObservableFutureTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeToObservableFuture.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>48</index><killingTest>rx.internal.operators.OnSubscribeToObservableFutureTest.testSuccess(rx.internal.operators.OnSubscribeToObservableFutureTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeToObservableFuture.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeToObservableFuture$ToObservableFuture</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>69</index><killingTest>rx.CompletableTest.fromFutureThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$2</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>413</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testProducerRequestThroughAmb(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$2</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>418</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testProducerRequestThroughAmb(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$2</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>419</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testProducerRequestThroughAmb(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$2</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>422</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testProducerRequestThroughAmb(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$2</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>415</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$2</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>423</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>50</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$2</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>428</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>59</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testProducerRequestThroughAmb(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$21$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1997</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.SingleTest.takeUntilSourceUnsubscribes_withSingle(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$21$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1999</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.SingleTest.takeUntilSourceUnsubscribes_withSingle(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$21$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1999</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$21$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1989</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.SingleTest.takeUntilSingleFires(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$21$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1991</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.SingleTest.takeUntilSingleFires(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$21$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1991</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$21$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>1984</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.SingleTest.takeUntilSourceUnsubscribes_withSingle(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>604</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>604</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>602</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>605</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>598</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>593</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>594</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>65</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>80</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>107</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>151</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>167</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>41</index><killingTest>rx.internal.operators.OperatorOnErrorResumeNextViaFunctionTest.testOnErrorResumeReceivesErrorFromPreviousNonProtectedOperator(rx.internal.operators.OperatorOnErrorResumeNextViaFunctionTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>37</index><killingTest>rx.internal.operators.OperatorOnErrorResumeNextViaFunctionTest.testOnErrorResumeReceivesErrorFromPreviousNonProtectedOperator(rx.internal.operators.OperatorOnErrorResumeNextViaFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction</mutatedClass><mutatedMethod>withException</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorOnExceptionResumeNextViaObservableTest.testResumeNextWithRuntimeException(rx.internal.operators.OperatorOnExceptionResumeNextViaObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction</mutatedClass><mutatedMethod>withOther</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorOnErrorResumeNextViaObservableTest.testResumeNextWithFailedOnSubscribe(rx.internal.operators.OperatorOnErrorResumeNextViaObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction</mutatedClass><mutatedMethod>withSingle</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/internal/operators/OperatorOnErrorResumeNextViaFunction;</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorOnErrorReturnTest.testFunctionThrowsError(rx.internal.operators.OperatorOnErrorReturnTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$1$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$1$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestOverflowThroughBufferWithSize1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$1$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>45</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestThroughBufferWithSize1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$1$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestOverflowThroughBufferWithSize1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$1$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestOverflowThroughBufferWithSize1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$1$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestOverflowThroughBufferWithSize1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize$1$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>46</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestThroughBufferWithSize1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>44</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge</mutatedClass><mutatedMethod>collectErrors</mutatedMethod><methodDescription>(Ljava/util/Queue;)Ljava/lang/Throwable;</methodDescription><lineNumber>205</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.CompletableTest.mergeDelayErrorSingleSourceThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge</mutatedClass><mutatedMethod>collectErrors</mutatedMethod><methodDescription>(Ljava/util/Queue;)Ljava/lang/Throwable;</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest>rx.CompletableTest.mergeDelayErrorSingleSourceThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge</mutatedClass><mutatedMethod>collectErrors</mutatedMethod><methodDescription>(Ljava/util/Queue;)Ljava/lang/Throwable;</methodDescription><lineNumber>211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>40</index><killingTest>rx.CompletableTest.mergeDelayErrorSingleSourceThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge</mutatedClass><mutatedMethod>collectErrors</mutatedMethod><methodDescription>(Ljava/util/Queue;)Ljava/lang/Throwable;</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge</mutatedClass><mutatedMethod>collectErrors</mutatedMethod><methodDescription>(Ljava/util/Queue;)Ljava/lang/Throwable;</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>47</index><killingTest>rx.CompletableTest.mergeDelayErrorSingleSourceThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMerge.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMerge</mutatedClass><mutatedMethod>collectErrors</mutatedMethod><methodDescription>(Ljava/util/Queue;)Ljava/lang/Throwable;</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>55</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDebounceWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithSelector$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorDebounceTest.debounceSelectorLastIsNotLost(rx.internal.operators.OperatorDebounceTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDebounceWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithSelector$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorDebounceTest.debounceSelectorObservableThrows(rx.internal.operators.OperatorDebounceTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorDebounceWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithSelector$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorDebounceWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithSelector$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDebounceWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithSelector$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorDebounceTest.debounceSelectorFuncThrows(rx.internal.operators.OperatorDebounceTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorDebounceWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithSelector$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>46</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorDebounceWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithSelector$1</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToObservableSortedList.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToObservableSortedList$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorToObservableSortedListTest.testBackpressureHonored(rx.internal.operators.OperatorToObservableSortedListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToObservableSortedList.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToObservableSortedList$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest>rx.internal.operators.OperatorToObservableSortedListTest.testBackpressureHonored(rx.internal.operators.OperatorToObservableSortedListTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorToObservableSortedList.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToObservableSortedList$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>39</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToObservableSortedList.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToObservableSortedList$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>49</index><killingTest>rx.internal.operators.OperatorToObservableSortedListTest.testBackpressureHonored(rx.internal.operators.OperatorToObservableSortedListTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorToObservableSortedList.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToObservableSortedList$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToObservableSortedList.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToObservableSortedList$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorToObservableSortedListTest.testBackpressureHonored(rx.internal.operators.OperatorToObservableSortedListTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorToObservableSortedList.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToObservableSortedList$2</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWithLatestFrom.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWithLatestFrom$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorWithLatestFromTest.testEmptyOther(rx.internal.operators.OperatorWithLatestFromTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWithLatestFrom.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWithLatestFrom$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWithLatestFrom.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWithLatestFrom$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorWithLatestFromTest.testFunctionThrows(rx.internal.operators.OperatorWithLatestFromTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWithLatestFrom.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWithLatestFrom$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWithLatestFrom.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWithLatestFrom$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorWithLatestFromTest.testUnsubscription(rx.internal.operators.OperatorWithLatestFromTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWithLatestFrom.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWithLatestFrom$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest>rx.internal.operators.OperatorWithLatestFromTest.testUnsubscription(rx.internal.operators.OperatorWithLatestFromTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWithLatestFrom.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWithLatestFrom$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>42</index><killingTest>rx.internal.operators.OperatorWithLatestFromTest.testFunctionThrows(rx.internal.operators.OperatorWithLatestFromTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntil$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorTakeUntilTest.testTakeUntilOtherCompleted(rx.internal.operators.OperatorTakeUntilTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntil$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorTakeUntilTest.testUntilFires(rx.internal.operators.OperatorTakeUntilTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTakeUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntil$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntil$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorTakeUntilTest.testTakeUntilOtherError(rx.internal.operators.OperatorTakeUntilTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTakeUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntil$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTakeUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntil$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntil$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>44</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorTakeUntilTest.testTakeUntilOtherCompleted(rx.internal.operators.OperatorTakeUntilTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/internal/operators/CachedObservable;</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.CachedObservableTest.testUnsubscribeSource(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>(Lrx/Observable;I)Lrx/internal/operators/CachedObservable;</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>5</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>(Lrx/Observable;I)Lrx/internal/operators/CachedObservable;</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.CachedObservableTest.testUnsubscribeSource(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>(Lrx/Observable;I)Lrx/internal/operators/CachedObservable;</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>36</index><killingTest>rx.internal.operators.CachedObservableTest.testUnsubscribeSource(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable</mutatedClass><mutatedMethod>hasObservers</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable</mutatedClass><mutatedMethod>hasObservers</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable</mutatedClass><mutatedMethod>isConnected</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler</mutatedClass><mutatedMethod>createWorker</mutatedMethod><methodDescription>()Lrx/Scheduler$Worker;</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.schedulers.CachedThreadSchedulerTest.testRecursiveExecution(rx.schedulers.CachedThreadSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler</mutatedClass><mutatedMethod>shutdown</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>163</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testShutdown(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testStartIdempotence(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler</mutatedClass><mutatedMethod>start</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest>rx.schedulers.SchedulerLifecycleTest.testStartIdempotence(rx.schedulers.SchedulerLifecycleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>39</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorTakeTest.takeZero(rx.internal.operators.OperatorTakeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>39</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorTakeTest.takeNegative(rx.internal.operators.OperatorTakeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorTakeTest.testUnsubscribeFromSynchronousInfiniteObservable(rx.internal.operators.OperatorTakeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>31</index><killingTest>rx.internal.operators.OperatorTakeTest.testUnsubscribeFromSynchronousInfiniteObservable(rx.internal.operators.OperatorTakeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorTakeTest.takeZero(rx.internal.operators.OperatorTakeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTake.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTake</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest>rx.internal.operators.OperatorTakeTest.testMultiTake(rx.internal.operators.OperatorTakeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$PairEvictionPolicy</mutatedClass><mutatedMethod>evict</mutatedMethod><methodDescription>(Lrx/subjects/ReplaySubject$NodeList;)V</methodDescription><lineNumber>946</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$PairEvictionPolicy</mutatedClass><mutatedMethod>evict</mutatedMethod><methodDescription>(Lrx/subjects/ReplaySubject$NodeList;)V</methodDescription><lineNumber>947</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$PairEvictionPolicy</mutatedClass><mutatedMethod>evictFinal</mutatedMethod><methodDescription>(Lrx/subjects/ReplaySubject$NodeList;)V</methodDescription><lineNumber>952</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$PairEvictionPolicy</mutatedClass><mutatedMethod>evictFinal</mutatedMethod><methodDescription>(Lrx/subjects/ReplaySubject$NodeList;)V</methodDescription><lineNumber>953</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$PairEvictionPolicy</mutatedClass><mutatedMethod>test</mutatedMethod><methodDescription>(Ljava/lang/Object;J)Z</methodDescription><lineNumber>958</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$PairEvictionPolicy</mutatedClass><mutatedMethod>test</mutatedMethod><methodDescription>(Ljava/lang/Object;J)Z</methodDescription><lineNumber>958</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$PairEvictionPolicy</mutatedClass><mutatedMethod>test</mutatedMethod><methodDescription>(Ljava/lang/Object;J)Z</methodDescription><lineNumber>958</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$RedoFinite$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Notification;)Lrx/Notification;</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>31</index><killingTest>rx.CompletableTest.repeat5Times(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$RedoFinite$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Notification;)Lrx/Notification;</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>20</index><killingTest>rx.CompletableTest.repeat5Times(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$RedoFinite$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Notification;)Lrx/Notification;</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.CompletableTest.repeat5Times(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$RedoFinite$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Notification;)Lrx/Notification;</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest>rx.CompletableTest.repeat5Times(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$RedoFinite$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Notification;)Lrx/Notification;</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.CompletableTest.repeat1Time(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$RedoFinite$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Notification;)Lrx/Notification;</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>38</index><killingTest>rx.CompletableTest.repeat5Times(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$RedoFinite$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Notification;)Lrx/Notification;</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>43</index><killingTest>rx.CompletableTest.repeat5Times(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SingleOperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.SingleOperatorZip$1$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SingleOperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.SingleOperatorZip$1$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SingleOperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.SingleOperatorZip$1$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleOperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.SingleOperatorZip$1$1</mutatedClass><mutatedMethod>onSuccess</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>36</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.SingleTest.zip2Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SingleOperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.SingleOperatorZip$1$1</mutatedClass><mutatedMethod>onSuccess</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SingleOperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.SingleOperatorZip$1$1</mutatedClass><mutatedMethod>onSuccess</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>39</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleOperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.SingleOperatorZip$1$1</mutatedClass><mutatedMethod>onSuccess</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>49</index><killingTest>rx.SingleTest.zip2Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnUnSubscribeWorksWithRefCount(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnUnSubscribeWorksWithRefCount(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>59</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>68</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testRefCount(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>73</index><killingTest>rx.internal.operators.OperatorPublishTest.testNoSubscriberRetentionOnCompleted(rx.internal.operators.OperatorPublishTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$ZipSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorZipTest.testAggregate3Types(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$ZipSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$ZipSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$ZipSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>([Lrx/Observable;)V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorZipTest.testAggregate3Types(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$ZipSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>([Lrx/Observable;)V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$ZipSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>([Lrx/Observable;)V</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$ZipSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>([Lrx/Observable;)V</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$19$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1844</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.SingleTest.takeUntilSourceUnsubscribes_withCompletable(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$19$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1846</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.SingleTest.takeUntilSourceUnsubscribes_withCompletable(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$19$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1846</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$19$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1836</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.SingleTest.takeUntilSourceErrorUnsubscribes_withCompletable(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$19$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1838</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.SingleTest.takeUntilSourceErrorUnsubscribes_withCompletable(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$19$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1838</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$19$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>1831</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.SingleTest.takeUntilSourceUnsubscribes_withCompletable(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$20$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1920</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.SingleTest.takeUntilSourceUnsubscribes_withObservable(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$20$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1922</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.SingleTest.takeUntilSourceUnsubscribes_withObservable(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$20$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1922</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$20$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1912</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.SingleTest.takeUntilObservableFires(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$20$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1914</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.SingleTest.takeUntilObservableFires(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$20$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1914</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$20$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>1907</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.SingleTest.takeUntilSourceUnsubscribes_withObservable(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>()Lrx/internal/operators/UnicastSubject;</methodDescription><lineNumber>44</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(I)Lrx/internal/operators/UnicastSubject;</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testUnsubscribeClearsQueue(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject</mutatedClass><mutatedMethod>hasObservers</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject</mutatedClass><mutatedMethod>hasObservers</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testBackpressure(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testErrorCutsAhead(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnicastSubject.java</sourceFile><mutatedClass>rx.internal.operators.UnicastSubject</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.BufferUntilSubscriberTest.testBackpressure(rx.internal.operators.BufferUntilSubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipLast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipLast$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorSkipLastTest.testSkipLastEmpty(rx.internal.operators.OperatorSkipLastTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorSkipLast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipLast$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipLast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipLast$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSkipLastTest.testSkipLast2(rx.internal.operators.OperatorSkipLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipLast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipLast$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest>rx.internal.operators.OperatorSkipLastTest.testSkipLast2(rx.internal.operators.OperatorSkipLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipLast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipLast$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorSkipLastTest.testSkipLastWithZeroCount(rx.internal.operators.OperatorSkipLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipLast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipLast$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>36</index><killingTest>rx.internal.operators.OperatorSkipLastTest.testSkipLastWithNull(rx.internal.operators.OperatorSkipLastTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorSkipLast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipLast$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>43</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest>rx.CompletableTest.mergeDelayErrorMultipleSources(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeMergeDelayErrorArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.CompletableTest.mergeDelayErrorSingleSourceThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMergeDelayErrorArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray$1</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeMergeDelayErrorArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray$1</mutatedClass><mutatedMethod>tryTerminate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMergeDelayErrorArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray$1</mutatedClass><mutatedMethod>tryTerminate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMergeDelayErrorArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray$1</mutatedClass><mutatedMethod>tryTerminate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeMergeDelayErrorArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeMergeDelayErrorArray$1</mutatedClass><mutatedMethod>tryTerminate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoAfterTerminate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoAfterTerminate$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testThreadName(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoAfterTerminate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoAfterTerminate$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorDoAfterTerminateTest.testDoAfterTerminateCalledOnComplete(rx.internal.operators.OperatorDoAfterTerminateTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorDoAfterTerminate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoAfterTerminate$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoAfterTerminate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoAfterTerminate$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.SingleTest.doAfterTerminateActionShouldBeInvokedAfterOnError(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoAfterTerminate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoAfterTerminate$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorDoAfterTerminateTest.testDoAfterTerminateCalledOnError(rx.internal.operators.OperatorDoAfterTerminateTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorDoAfterTerminate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoAfterTerminate$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoAfterTerminate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoAfterTerminate$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.SingleTest.doAfterTerminateActionShouldBeInvokedAfterOnSuccess(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToMultimap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToMultimap$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorToMultimapTest.testToMultimap(rx.internal.operators.OperatorToMultimapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToMultimap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToMultimap$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorToMultimapTest.testToMultimap(rx.internal.operators.OperatorToMultimapTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorToMultimap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToMultimap$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToMultimap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToMultimap$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><killingTest>rx.internal.operators.OperatorToMultimapTest.testToMultimap(rx.internal.operators.OperatorToMultimapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToMultimap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToMultimap$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.internal.operators.OperatorToMultimapTest.testValueSelectorThrows(rx.internal.operators.OperatorToMultimapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToMultimap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToMultimap$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>67</index><killingTest>rx.internal.operators.OperatorToMultimapTest.testToMultimapWithThrowingCollectionFactory(rx.internal.operators.OperatorToMultimapTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorToMultimap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToMultimap$1</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(II)V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(II)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(II)V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.CovarianceTest.testComposeWithDeltaLogic(rx.CovarianceTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(II)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.CovarianceTest.testComposeWithDeltaLogic(rx.CovarianceTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestThroughBufferWithSize3(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestOverflowThroughBufferWithSize1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSize</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>26</index><killingTest>rx.internal.operators.OperatorBufferTest.testProducerRequestThroughBufferWithSize4(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>310</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.subjects.ReplaySubjectBoundedConcurrencyTest.testReplaySubjectEmissionSubscriptionRace(rx.subjects.ReplaySubjectBoundedConcurrencyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>310</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.subjects.ReplaySubjectBoundedConcurrencyTest.testReplaySubjectEmissionSubscriptionRace(rx.subjects.ReplaySubjectBoundedConcurrencyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>69</index><killingTest>rx.subjects.ReplaySubjectBoundedConcurrencyTest.testReplaySubjectEmissionSubscriptionRace(rx.subjects.ReplaySubjectBoundedConcurrencyTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>326</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>96</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>334</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>135</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>334</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>170</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>323</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>82</index><killingTest>rx.subjects.ReplaySubjectBoundedConcurrencyTest.testReplaySubjectConcurrentSubscriptions(rx.subjects.ReplaySubjectBoundedConcurrencyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.subjects.ReplaySubjectConcurrencyTest.testReplaySubjectEmissionSubscriptionRace(rx.subjects.ReplaySubjectConcurrencyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.subjects.ReplaySubjectConcurrencyTest.testReplaySubjectEmissionSubscriptionRace(rx.subjects.ReplaySubjectConcurrencyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>74</index><killingTest>rx.subjects.ReplaySubjectConcurrencyTest.testReplaySubjectEmissionSubscriptionRace(rx.subjects.ReplaySubjectConcurrencyTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>100</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>139</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>174</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>87</index><killingTest>rx.subjects.ReplaySubjectConcurrencyTest.testReplaySubjectConcurrentSubscriptions(rx.subjects.ReplaySubjectConcurrencyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcatIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><killingTest>rx.CompletableTest.concatIterableIteratorHasNextThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeConcatIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CompletableOnSubscribeConcatIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeConcatIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>36</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcatIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>44</index><killingTest>rx.CompletableTest.concatIterableIteratorNull(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeConcatIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>62</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CompletableOnSubscribeConcatIterable.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>66</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipUntil$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorSkipUntilTest.otherNeverFires(rx.internal.operators.OperatorSkipUntilTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSkipUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipUntil$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipUntil$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSkipUntilTest.sourceThrows(rx.internal.operators.OperatorSkipUntilTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSkipUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipUntil$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipUntil$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSkipUntilTest.otherNeverFires(rx.internal.operators.OperatorSkipUntilTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipUntil$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorSkipUntilTest.otherFiresAndCompletes(rx.internal.operators.OperatorSkipUntilTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSkipUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipUntil$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousSingle.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousSingle</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Ljava/lang/Object;)Lrx/internal/util/ScalarSynchronousSingle;</methodDescription><lineNumber>30</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.util.ScalarSynchronousSingleTest.getValue(rx.internal.util.ScalarSynchronousSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousSingle.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousSingle</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.util.ScalarSynchronousSingleTest.getValue(rx.internal.util.ScalarSynchronousSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousSingle.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousSingle</mutatedClass><mutatedMethod>scalarFlatMap</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/Single;</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.util.ScalarSynchronousSingleTest.scalarFlatMap(rx.internal.util.ScalarSynchronousSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousSingle.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousSingle</mutatedClass><mutatedMethod>scalarScheduleOn</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/Single;</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.util.ScalarSynchronousSingleTest.backPressureObserveOn2(rx.internal.util.ScalarSynchronousSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousSingle.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousSingle</mutatedClass><mutatedMethod>scalarScheduleOn</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/Single;</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest>rx.internal.util.ScalarSynchronousSingleTest.asyncObserverNextThrows(rx.internal.util.ScalarSynchronousSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousSingle.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousSingle</mutatedClass><mutatedMethod>scalarScheduleOn</mutatedMethod><methodDescription>(Lrx/Scheduler;)Lrx/Single;</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>31</index><killingTest>rx.internal.util.ScalarSynchronousSingleTest.backPressureObserveOn2(rx.internal.util.ScalarSynchronousSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$SizeEvictionPolicy</mutatedClass><mutatedMethod>evict</mutatedMethod><methodDescription>(Lrx/subjects/ReplaySubject$NodeList;)V</methodDescription><lineNumber>869</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>8</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBoundedIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$SizeEvictionPolicy</mutatedClass><mutatedMethod>evict</mutatedMethod><methodDescription>(Lrx/subjects/ReplaySubject$NodeList;)V</methodDescription><lineNumber>869</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBoundedIncomplete(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$SizeEvictionPolicy</mutatedClass><mutatedMethod>evictFinal</mutatedMethod><methodDescription>(Lrx/subjects/ReplaySubject$NodeList;)V</methodDescription><lineNumber>881</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>10</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$SizeEvictionPolicy</mutatedClass><mutatedMethod>evictFinal</mutatedMethod><methodDescription>(Lrx/subjects/ReplaySubject$NodeList;)V</methodDescription><lineNumber>881</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>9</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectValueRelayBounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$SizeEvictionPolicy</mutatedClass><mutatedMethod>evictFinal</mutatedMethod><methodDescription>(Lrx/subjects/ReplaySubject$NodeList;)V</methodDescription><lineNumber>881</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.subjects.ReplaySubjectTest.testReplaySubjectBoundedError(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$SizeEvictionPolicy</mutatedClass><mutatedMethod>test</mutatedMethod><methodDescription>(Ljava/lang/Object;J)Z</methodDescription><lineNumber>876</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorElementAt.java</sourceFile><mutatedClass>rx.internal.operators.OperatorElementAt$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorElementAt.java</sourceFile><mutatedClass>rx.internal.operators.OperatorElementAt$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorElementAt.java</sourceFile><mutatedClass>rx.internal.operators.OperatorElementAt$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorElementAtTest.testElementAtOrDefault(rx.internal.operators.OperatorElementAtTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorElementAt.java</sourceFile><mutatedClass>rx.internal.operators.OperatorElementAt$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorElementAt.java</sourceFile><mutatedClass>rx.internal.operators.OperatorElementAt$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorElementAt.java</sourceFile><mutatedClass>rx.internal.operators.OperatorElementAt$InnerProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler$InnerTestScheduler</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.CompletableTest.timerTestScheduler(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler$InnerTestScheduler</mutatedClass><mutatedMethod>now</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler$InnerTestScheduler</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>26</index><killingTest>rx.schedulers.TestSchedulerTest.testImmediateUnsubscribes2(rx.schedulers.TestSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler$InnerTestScheduler</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>12</index><killingTest>rx.CompletableTest.timerTestScheduler(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler$InnerTestScheduler</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>32</index><killingTest>rx.schedulers.TestSchedulerTest.testPeriodicScheduling(rx.schedulers.TestSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler$InnerTestScheduler</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.schedulers.TestSchedulerTest.testPeriodicScheduling(rx.schedulers.TestSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ImmediateScheduler.java</sourceFile><mutatedClass>rx.schedulers.ImmediateScheduler$InnerImmediateScheduler</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ImmediateScheduler.java</sourceFile><mutatedClass>rx.schedulers.ImmediateScheduler$InnerImmediateScheduler</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ImmediateScheduler.java</sourceFile><mutatedClass>rx.schedulers.ImmediateScheduler$InnerImmediateScheduler</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ImmediateScheduler.java</sourceFile><mutatedClass>rx.schedulers.ImmediateScheduler$InnerImmediateScheduler</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ImmediateScheduler.java</sourceFile><mutatedClass>rx.schedulers.ImmediateScheduler$InnerImmediateScheduler</mutatedClass><mutatedMethod>schedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;JLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ImmediateScheduler.java</sourceFile><mutatedClass>rx.schedulers.ImmediateScheduler$InnerImmediateScheduler</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>TrampolineScheduler.java</sourceFile><mutatedClass>rx.schedulers.TrampolineScheduler</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TrampolineScheduler.java</sourceFile><mutatedClass>rx.schedulers.TrampolineScheduler</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.schedulers.TrampolineSchedulerTest.testMixOfDelayedAndNonDelayedActions(rx.schedulers.TrampolineSchedulerTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>TrampolineScheduler.java</sourceFile><mutatedClass>rx.schedulers.TrampolineScheduler</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>TrampolineScheduler.java</sourceFile><mutatedClass>rx.schedulers.TrampolineScheduler</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(II)I</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TrampolineScheduler.java</sourceFile><mutatedClass>rx.schedulers.TrampolineScheduler</mutatedClass><mutatedMethod>createWorker</mutatedMethod><methodDescription>()Lrx/Scheduler$Worker;</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.schedulers.TrampolineSchedulerTest.testRecursiveExecution(rx.schedulers.TrampolineSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TrampolineScheduler.java</sourceFile><mutatedClass>rx.schedulers.TrampolineScheduler</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>()Lrx/schedulers/TrampolineScheduler;</methodDescription><lineNumber>36</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.schedulers.TrampolineSchedulerTest.testRecursiveExecution(rx.schedulers.TrampolineSchedulerTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$18$1$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1789</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$18$1$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1791</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$18$1$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1791</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>25</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$18$1$1</mutatedClass><mutatedMethod>onSuccess</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>1780</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$18$1$1</mutatedClass><mutatedMethod>onSuccess</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>1782</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$18$1$1</mutatedClass><mutatedMethod>onSuccess</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>1782</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>25</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$4$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>326</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorRetryTest.testOnCompletedFromNotificationHandler(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$4$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorRetryTest.testOnErrorFromNotificationHandler(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$4$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>340</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$4$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>336</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.CompletableTest.repeat5Times(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$4$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>340</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.CompletableTest.repeat5Times(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$4$1</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>352</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.SingleTest.testRetryWhen(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorMostRecent.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorMostRecent$MostRecentObserver$1</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.internal.operators.BlockingOperatorMostRecentTest.testMostRecentWithException(rx.internal.operators.BlockingOperatorMostRecentTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorMostRecent.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorMostRecent$MostRecentObserver$1</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>24</index><killingTest>rx.internal.operators.BlockingOperatorMostRecentTest.testMostRecentWithException(rx.internal.operators.BlockingOperatorMostRecentTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorMostRecent.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorMostRecent$MostRecentObserver$1</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.BlockingOperatorMostRecentTest.testMostRecentWithException(rx.internal.operators.BlockingOperatorMostRecentTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorMostRecent.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorMostRecent$MostRecentObserver$1</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest>rx.internal.operators.BlockingOperatorMostRecentTest.testMostRecentNull(rx.internal.operators.BlockingOperatorMostRecentTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorMostRecent.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorMostRecent$MostRecentObserver$1</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><killingTest>rx.internal.operators.BlockingOperatorMostRecentTest.testMostRecentNull(rx.internal.operators.BlockingOperatorMostRecentTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorMostRecent.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorMostRecent$MostRecentObserver$1</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>65</index><killingTest>rx.internal.operators.BlockingOperatorMostRecentTest.testMostRecentNull(rx.internal.operators.BlockingOperatorMostRecentTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorToObservableList.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToObservableList$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorToObservableList.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToObservableList$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorToObservableList.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToObservableList$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>45</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorToObservableList.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToObservableList$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToObservableList.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToObservableList$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.BlockingOperatorToFutureTest.testToFutureList(rx.internal.operators.BlockingOperatorToFutureTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorToObservableList.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToObservableList$1</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$7</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$7</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$7</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>204</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$7</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>223</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>64</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$7</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>226</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>70</index><killingTest>rx.internal.operators.OperatorReplayTest.testSubscribersComeAndGoAtRequestBoundaries2(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$7</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>75</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$2$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.takeCompletesUnsafe(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$2$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.directCompletesUnsafe(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$2$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$2$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$2$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.directCompletesUnsafe(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$2$1</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.directCompletesUnsafe(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeTimed$TakeSubscriber</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorTakeTimedTest.testTakeTimedErrorAfterTime(rx.internal.operators.OperatorTakeTimedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeTimed$TakeSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorTakeTimedTest.testTakeTimedErrorAfterTime(rx.internal.operators.OperatorTakeTimedTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTakeTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeTimed$TakeSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeTimed$TakeSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorTakeTimedTest.testTakeTimedErrorBeforeTime(rx.internal.operators.OperatorTakeTimedTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTakeTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeTimed$TakeSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeTimed$TakeSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorTakeTimedTest.testTakeTimedErrorAfterTime(rx.internal.operators.OperatorTakeTimedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWithLatestFrom.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWithLatestFrom$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorWithLatestFromTest.testSimple(rx.internal.operators.OperatorWithLatestFromTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWithLatestFrom.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWithLatestFrom$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWithLatestFrom.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWithLatestFrom$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWithLatestFrom.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWithLatestFrom$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorWithLatestFromTest.testOtherThrows(rx.internal.operators.OperatorWithLatestFromTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWithLatestFrom.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWithLatestFrom$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWithLatestFrom.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWithLatestFrom$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorWithLatestFromTest.testUnsubscription(rx.internal.operators.OperatorWithLatestFromTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerInnerSubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;I)V</methodDescription><lineNumber>285</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerInnerSubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorEagerConcatMap$EagerOuterSubscriber;I)V</methodDescription><lineNumber>292</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>47</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testPrefetchIsBounded(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerInnerSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>311</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerInnerSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>305</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerInnerSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>298</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerInnerSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>315</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnUnSubscribeWorksWithRefCount(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.onlyFirstShouldSubscribeAndLastUnsubscribe(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnUnSubscribeWorksWithRefCount(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.onlyFirstShouldSubscribeAndLastUnsubscribe(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>163</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>42</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testUpstreamErrorAllowsRetry(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>163</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>54</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.testRepeat(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.onlyFirstShouldSubscribeAndLastUnsubscribe(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest>rx.internal.operators.OnSubscribeRefCountTest.onlyFirstShouldSubscribeAndLastUnsubscribe(rx.internal.operators.OnSubscribeRefCountTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnUnSubscribeWorksWithRefCount(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>41</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeRefCount.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRefCount$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>47</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$31$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>2155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest>rx.CompletableTest.toSingleSupplierNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$31$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>2151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$31$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>2156</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>37</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$31$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>2158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>45</index><killingTest>rx.CompletableTest.toSingleSupplierNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$31$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>2164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.CompletableTest.toSingleSupplierError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$31$1</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>2169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$5</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>412</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest>rx.CompletableTest.defer(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$5</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>407</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$5</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>408</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.CompletableTest.deferFunctionThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$5</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>413</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>37</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$5</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>414</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>45</index><killingTest>rx.CompletableTest.deferReturnsNull(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$5</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>418</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>54</index><killingTest>rx.CompletableTest.defer(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>LinkedQueueNode.java</sourceFile><mutatedClass>rx.internal.util.atomic.LinkedQueueNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>29</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>LinkedQueueNode.java</sourceFile><mutatedClass>rx.internal.util.atomic.LinkedQueueNode</mutatedClass><mutatedMethod>getAndNullValue</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>39</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>LinkedQueueNode.java</sourceFile><mutatedClass>rx.internal.util.atomic.LinkedQueueNode</mutatedClass><mutatedMethod>getAndNullValue</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>38</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueuePipelined(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>LinkedQueueNode.java</sourceFile><mutatedClass>rx.internal.util.atomic.LinkedQueueNode</mutatedClass><mutatedMethod>lpValue</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedAtomicQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>LinkedQueueNode.java</sourceFile><mutatedClass>rx.internal.util.atomic.LinkedQueueNode</mutatedClass><mutatedMethod>lvNext</mutatedMethod><methodDescription>()Lrx/internal/util/atomic/LinkedQueueNode;</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>LinkedQueueNode.java</sourceFile><mutatedClass>rx.internal.util.atomic.LinkedQueueNode</mutatedClass><mutatedMethod>soNext</mutatedMethod><methodDescription>(Lrx/internal/util/atomic/LinkedQueueNode;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$8</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>489</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest>rx.CompletableTest.fromActionThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$8</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>494</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><killingTest>rx.CompletableTest.fromActionNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$8</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>485</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$8</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>487</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest>rx.CompletableTest.fromActionThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$8</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>490</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest>rx.CompletableTest.fromActionThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$8</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>495</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>47</index><killingTest>rx.CompletableTest.fromActionNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSampleWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithObservable$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorSampleTest.sampleWithSamplerTerminatingEarly(rx.internal.operators.OperatorSampleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSampleWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithObservable$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorSampleTest.dontUnsubscribeChild2(rx.internal.operators.OperatorSampleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSampleWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithObservable$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSampleTest.sampleWithSamplerThrows(rx.internal.operators.OperatorSampleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSampleWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithObservable$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSampleWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithObservable$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorSampleTest.sampleWithSamplerEmitAndTerminate(rx.internal.operators.OperatorSampleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSampleWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithObservable$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.internal.operators.OperatorSampleTest.sampleWithSamplerEmitAndTerminate(rx.internal.operators.OperatorSampleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CachedSubscribe</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>247</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CachedSubscribe</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>247</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CachedSubscribe</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>241</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CachedSubscribe</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>243</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest>rx.internal.operators.CachedObservableTest.testColdReplayBackpressure(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CachedSubscribe</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>244</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>25</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CachedSubscribe</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>40</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingSingle.java</sourceFile><mutatedClass>rx.singles.BlockingSingle</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>(Lrx/Single;)Lrx/singles/BlockingSingle;</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.singles.BlockingSingleTest.testSingleGet(rx.singles.BlockingSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingSingle.java</sourceFile><mutatedClass>rx.singles.BlockingSingle</mutatedClass><mutatedMethod>toFuture</mutatedMethod><methodDescription>()Ljava/util/concurrent/Future;</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.singles.BlockingSingleTest.testSingleToFuture(rx.singles.BlockingSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingSingle.java</sourceFile><mutatedClass>rx.singles.BlockingSingle</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>47</index><killingTest>rx.singles.BlockingSingleTest.testSingleGet(rx.singles.BlockingSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingSingle.java</sourceFile><mutatedClass>rx.singles.BlockingSingle</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>52</index><killingTest>rx.singles.BlockingSingleTest.testSingleErrorChecked(rx.singles.BlockingSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingSingle.java</sourceFile><mutatedClass>rx.singles.BlockingSingle</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>71</index><killingTest>rx.singles.BlockingSingleTest.testSingleGet(rx.singles.BlockingSingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BlockingSingle.java</sourceFile><mutatedClass>rx.singles.BlockingSingle</mutatedClass><mutatedMethod>value</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>37</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver$FastList</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>38</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver$FastList</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>39</index><killingTest>rx.observers.SerializedObserverTest.runConcurrencyTest(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver$FastList</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>71</index><killingTest>rx.observers.SerializedObserverTest.runConcurrencyTest(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver$FastList</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.observers.SerializedObserverTest.testSerializeNull(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver$FastList</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><killingTest>rx.observers.SerializedObserverTest.runConcurrencyTest(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedObserver.java</sourceFile><mutatedClass>rx.observers.SerializedObserver$FastList</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>49</index><killingTest>rx.observers.SerializedObserverTest.runConcurrencyTest(rx.observers.SerializedObserverTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>69</index><killingTest>rx.internal.operators.OperatorTimeoutTests.shouldUnsubscribeFromUnderlyingSubscriptionOnImmediatelyComplete(rx.internal.operators.OperatorTimeoutTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.internal.operators.OperatorTimeoutTests.shouldSwitchToOtherAndCanBeUnsubscribedIfOnNextNotWithinTimeout(rx.internal.operators.OperatorTimeoutTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>47</index><killingTest>rx.internal.operators.OperatorTimeoutTests.shouldUnsubscribeFromUnderlyingSubscriptionOnImmediatelyComplete(rx.internal.operators.OperatorTimeoutTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>53</index><killingTest>rx.internal.operators.OperatorTimeoutWithSelectorTest.testTimeoutSelectorTimeoutFirst(rx.internal.operators.OperatorTimeoutWithSelectorTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>65</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$BoundarySubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>314</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testMainUnsubscribedOnBoundaryCompletion(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$BoundarySubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>316</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testMainUnsubscribedOnBoundaryCompletion(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$BoundarySubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>309</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$BoundarySubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>301</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.newBoundaryCalledAfterWindowClosed(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$BoundarySubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>303</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.newBoundaryCalledAfterWindowClosed(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory$BoundarySubscriber</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>296</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$16$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$16$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.CompletableTest.delayErrorImmediately(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$16$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>25</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$16$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1205</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest>rx.CompletableTest.delayErrorImmediately(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$16$1</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>1211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$16$1</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>1212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.CompletableTest.unsubscribeOnNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZipIterable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZipIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>40</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorZipIterableTest.testZipIterableEmptySecond(rx.internal.operators.OperatorZipIterableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorZipIterable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZipIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorZipIterable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZipIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>37</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZipIterable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZipIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>48</index><killingTest>rx.internal.operators.OperatorZipIterableTest.testZipIterableEmptyFirstSize(rx.internal.operators.OperatorZipIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZipIterable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZipIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorZipIterableTest.testZipIterableEmptySecond(rx.internal.operators.OperatorZipIterableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorZipIterable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZipIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>45</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorDebounceTest.testDebounceNeverEmits(rx.internal.operators.OperatorDebounceTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorDebounceTest.testDebounceWithError(rx.internal.operators.OperatorDebounceTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime$1</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorDebounceTest.debounceWithTimeBackpressure(rx.internal.operators.OperatorDebounceTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$24$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1670</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$24$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1685</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>47</index><killingTest>rx.CompletableTest.onErrorResumeNextNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$24$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1681</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>39</index><killingTest>rx.CompletableTest.onErrorResumeNextFunctionThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$24$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1688</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>77</index><killingTest>rx.CompletableTest.onErrorResumeNextFunctionReturnsNull(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$24$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1692</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>89</index><killingTest>rx.CompletableTest.onErrorResumeNextNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$24$1</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>1714</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeDelaySubscriptionOther.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeDelaySubscriptionOther$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OnSubscribeDelaySubscriptionOtherTest.testNoPrematureSubscriptionToError(rx.internal.operators.OnSubscribeDelaySubscriptionOtherTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeDelaySubscriptionOther.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeDelaySubscriptionOther$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest>rx.internal.operators.OnSubscribeDelaySubscriptionOtherTest.testBackpressurePassesThrough(rx.internal.operators.OnSubscribeDelaySubscriptionOtherTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeDelaySubscriptionOther.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeDelaySubscriptionOther$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.CompletableTest.andThenError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeDelaySubscriptionOther.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeDelaySubscriptionOther$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeDelaySubscriptionOther.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeDelaySubscriptionOther$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest>rx.CompletableTest.andThenError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeDelaySubscriptionOther.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeDelaySubscriptionOther$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest>rx.internal.operators.OnSubscribeDelaySubscriptionOtherTest.testNoPrematureSubscription(rx.internal.operators.OnSubscribeDelaySubscriptionOtherTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorFilter.java</sourceFile><mutatedClass>rx.internal.operators.OperatorFilter$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorFilterTest.testWithBackpressure(rx.internal.operators.OperatorFilterTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorFilter.java</sourceFile><mutatedClass>rx.internal.operators.OperatorFilter$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorFilter.java</sourceFile><mutatedClass>rx.internal.operators.OperatorFilter$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorFilterTest.testFilter(rx.internal.operators.OperatorFilterTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorFilter.java</sourceFile><mutatedClass>rx.internal.operators.OperatorFilter$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorFilter.java</sourceFile><mutatedClass>rx.internal.operators.OperatorFilter$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorFilterTest.testWithBackpressure(rx.internal.operators.OperatorFilterTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorFilter.java</sourceFile><mutatedClass>rx.internal.operators.OperatorFilter$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest>rx.internal.operators.OperatorFilterTest.testFatalError(rx.internal.operators.OperatorFilterTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$Selection</mutatedClass><mutatedMethod>unsubscribeLosers</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>337</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$Selection</mutatedClass><mutatedMethod>unsubscribeLosers</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>338</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$Selection</mutatedClass><mutatedMethod>unsubscribeOthers</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribeAmb$AmbSubscriber;)V</methodDescription><lineNumber>343</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testAmb3(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$Selection</mutatedClass><mutatedMethod>unsubscribeOthers</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribeAmb$AmbSubscriber;)V</methodDescription><lineNumber>344</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.internal.operators.OnSubscribeAmbTest.testAmb2(rx.internal.operators.OnSubscribeAmbTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$Selection</mutatedClass><mutatedMethod>unsubscribeOthers</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribeAmb$AmbSubscriber;)V</methodDescription><lineNumber>345</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$Selection</mutatedClass><mutatedMethod>unsubscribeOthers</mutatedMethod><methodDescription>(Lrx/internal/operators/OnSubscribeAmb$AmbSubscriber;)V</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testAfterUnsubscribeCalledThenObserverOnNextNeverCalled(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testAfterUnsubscribeCalledThenObserverOnNextNeverCalled(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testObserveOn(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><killingTest>rx.schedulers.TrampolineSchedulerTest.testObserveOn(rx.schedulers.TrampolineSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>41</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testAfterUnsubscribeCalledThenObserverOnNextNeverCalled(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>37</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLast$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testTakeLastEmpty(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorTakeLast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLast$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorTakeLast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLast$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLast$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testRequestOverflow(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLast$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testRequestOverflow(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLast$1</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testRequestOverflow(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(JLrx/functions/Action0;)V</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureBufferZeroCapacity(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(JLrx/functions/Action0;)V</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureBufferNegativeCapacity(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>26</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureBuffer.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureBuffer</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>()Lrx/internal/operators/OperatorOnBackpressureBuffer;</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorOnBackpressureBufferTest.testFixBackpressureWithBuffer(rx.internal.operators.OperatorOnBackpressureBufferTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftDurationObserver</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>273</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftDurationObserver</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>279</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>48</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftDurationObserver</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>280</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>52</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftDurationObserver</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>282</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>60</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftDurationObserver</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>288</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeGroupJoinTest.leftDurationThrows(rx.internal.operators.OnSubscribeGroupJoinTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$LeftDurationObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>293</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>232</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.SubscriberTest.testOnStartCalledOnceViaLift(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest>rx.SubscriberTest.testRequestThroughMap(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>238</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest>rx.internal.operators.OperatorSkipWhileTest.testPredicateFatalError(rx.internal.operators.OperatorSkipWhileTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>37</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>242</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>49</index><killingTest>rx.internal.operators.OperatorSkipWhileTest.testPredicateFatalError(rx.internal.operators.OperatorSkipWhileTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>245</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>54</index><killingTest>rx.internal.operators.OperatorOnErrorResumeNextViaFunctionTest.testOnErrorResumeReceivesErrorFromPreviousNonProtectedOperator(rx.internal.operators.OperatorOnErrorResumeNextViaFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimple(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleError(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestSubscriber</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>204</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest$LatestSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>222</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriptions.java</sourceFile><mutatedClass>rx.subscriptions.Subscriptions</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.subscriptions.SubscriptionsTest.testUnsubscribeOnlyOnce(rx.subscriptions.SubscriptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriptions.java</sourceFile><mutatedClass>rx.subscriptions.Subscriptions</mutatedClass><mutatedMethod>empty</mutatedMethod><methodDescription>()Lrx/Subscription;</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.subscriptions.SubscriptionsTest.testEmpty(rx.subscriptions.SubscriptionsTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Subscriptions.java</sourceFile><mutatedClass>rx.subscriptions.Subscriptions</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>(Ljava/util/concurrent/Future;)Lrx/Subscription;</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Subscriptions.java</sourceFile><mutatedClass>rx.subscriptions.Subscriptions</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>([Lrx/Subscription;)Lrx/subscriptions/CompositeSubscription;</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriptions.java</sourceFile><mutatedClass>rx.subscriptions.Subscriptions</mutatedClass><mutatedMethod>unsubscribed</mutatedMethod><methodDescription>()Lrx/Subscription;</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.subscriptions.SubscriptionsTest.testUnsubscribed(rx.subscriptions.SubscriptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RefCountSubscription.java</sourceFile><mutatedClass>rx.subscriptions.RefCountSubscription$State</mutatedClass><mutatedMethod>addChild</mutatedMethod><methodDescription>()Lrx/subscriptions/RefCountSubscription$State;</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>10</index><killingTest>rx.subscriptions.RefCountSubscriptionTest.testMultipleClientsMainUnsubscribeFirst(rx.subscriptions.RefCountSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RefCountSubscription.java</sourceFile><mutatedClass>rx.subscriptions.RefCountSubscription$State</mutatedClass><mutatedMethod>addChild</mutatedMethod><methodDescription>()Lrx/subscriptions/RefCountSubscription$State;</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.subscriptions.RefCountSubscriptionTest.testMultipleClientsMainUnsubscribeFirst(rx.subscriptions.RefCountSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RefCountSubscription.java</sourceFile><mutatedClass>rx.subscriptions.RefCountSubscription$State</mutatedClass><mutatedMethod>removeChild</mutatedMethod><methodDescription>()Lrx/subscriptions/RefCountSubscription$State;</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>10</index><killingTest>rx.subscriptions.RefCountSubscriptionTest.testMultipleClientsMainUnsubscribeFirst(rx.subscriptions.RefCountSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RefCountSubscription.java</sourceFile><mutatedClass>rx.subscriptions.RefCountSubscription$State</mutatedClass><mutatedMethod>removeChild</mutatedMethod><methodDescription>()Lrx/subscriptions/RefCountSubscription$State;</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.subscriptions.RefCountSubscriptionTest.testMultipleClientsMainUnsubscribeFirst(rx.subscriptions.RefCountSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RefCountSubscription.java</sourceFile><mutatedClass>rx.subscriptions.RefCountSubscription$State</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()Lrx/subscriptions/RefCountSubscription$State;</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.subscriptions.RefCountSubscriptionTest.testImmediateUnsubscribe(rx.subscriptions.RefCountSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testSkipAndCountWindowsWithGaps(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testSkipAndCountGaplessWindows(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>40</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testSkipAndCountWindowsWithGaps(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testBackpressureOuter(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>36</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$WindowObservableFunc$WindowSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>376</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OnSubscribeGroupJoinTest.behaveAsJoin(rx.internal.operators.OnSubscribeGroupJoinTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$WindowObservableFunc$WindowSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>377</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$WindowObservableFunc$WindowSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>370</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$WindowObservableFunc$WindowSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>371</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$WindowObservableFunc$WindowSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>365</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeGroupJoinTest.normal1(rx.internal.operators.OnSubscribeGroupJoinTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaErrorHandler.java</sourceFile><mutatedClass>rx.plugins.RxJavaErrorHandler</mutatedClass><mutatedMethod>handleOnNextValueRendering</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/String;</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.plugins.RxJavaPluginsTest.testOnNextValueRenderingWhenImplementedAndManaged(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaErrorHandler.java</sourceFile><mutatedClass>rx.plugins.RxJavaErrorHandler</mutatedClass><mutatedMethod>handleOnNextValueRendering</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/String;</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>40</index><killingTest>rx.plugins.RxJavaPluginsTest.testOnNextValueRenderingWhenImplementedAndThrows(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>RxJavaErrorHandler.java</sourceFile><mutatedClass>rx.plugins.RxJavaErrorHandler</mutatedClass><mutatedMethod>handleOnNextValueRendering</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/String;</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>RxJavaErrorHandler.java</sourceFile><mutatedClass>rx.plugins.RxJavaErrorHandler</mutatedClass><mutatedMethod>handleOnNextValueRendering</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/String;</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaErrorHandler.java</sourceFile><mutatedClass>rx.plugins.RxJavaErrorHandler</mutatedClass><mutatedMethod>render</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/String;</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.plugins.RxJavaPluginsTest.testOnNextValueRenderingWhenNotImplemented(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeTimerPeriodically.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeTimerPeriodically$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>10</index><killingTest>rx.internal.operators.OnSubscribeTimerTest.testTimerPeriodically(rx.internal.operators.OnSubscribeTimerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeTimerPeriodically.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeTimerPeriodically$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.internal.operators.OnSubscribeTimerTest.testTimerPeriodically(rx.internal.operators.OnSubscribeTimerTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeTimerPeriodically.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeTimerPeriodically$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>25</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeTimerPeriodically.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeTimerPeriodically$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeTimerPeriodically.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeTimerPeriodically$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>43</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithoutInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithoutInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>52</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>163</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>43</index><killingTest>rx.internal.operators.OperatorScanTest.testUnboundedSource(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>48</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$23$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1621</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$23$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1635</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><killingTest>rx.CompletableTest.onErrorComplete(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$23$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1636</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>47</index><killingTest>rx.CompletableTest.onErrorComplete(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$23$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1638</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>55</index><killingTest>rx.CompletableTest.onErrorCompleteFalse(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$23$1</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>1644</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithStartEndEndThrows(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithStartEndBoundaryTake2(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl</mutatedClass><mutatedMethod>generateState</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>304</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl</mutatedClass><mutatedMethod>generateState</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>304</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.observables.SyncOnSubscribeTest.testGenericsCreateStatelessWithUnsub(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/Observer;)Ljava/lang/Object;</methodDescription><lineNumber>309</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.observables.SyncOnSubscribeTest.testStateAfterTerminal(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl</mutatedClass><mutatedMethod>onUnsubscribe</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>314</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observables.SyncOnSubscribeTest.testStateAfterTerminal(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl</mutatedClass><mutatedMethod>onUnsubscribe</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>315</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.observables.SyncOnSubscribeTest.testStateAfterTerminal(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoOnRequest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnRequest$ParentSubscriber</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorDoOnRequestTest.dontRequestIfDownstreamRequestsLate(rx.internal.operators.OperatorDoOnRequestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoOnRequest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnRequest$ParentSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorDoOnRequestTest.testUnsubscribeHappensAgainstParent(rx.internal.operators.OperatorDoOnRequestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoOnRequest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnRequest$ParentSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorRetryWithPredicateTest.testBackpressure(rx.internal.operators.OperatorRetryWithPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoOnRequest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnRequest$ParentSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorDoOnRequestTest.testDoRequest(rx.internal.operators.OperatorDoOnRequestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoOnRequest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnRequest$ParentSubscriber</mutatedClass><mutatedMethod>requestMore</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorDoOnRequestTest.dontRequestIfDownstreamRequestsLate(rx.internal.operators.OperatorDoOnRequestTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorToMultimap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToMultimap</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>35</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToMultimap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToMultimap</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>50</index><killingTest>rx.internal.operators.OperatorToMultimapTest.testToMultimap(rx.internal.operators.OperatorToMultimapTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorToMultimap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToMultimap</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToMultimap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToMultimap</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorToMultimapTest.testMapFactoryThrows(rx.internal.operators.OperatorToMultimapTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorToMultimap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToMultimap</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeTimeout.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeTimeout$1$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeTimeout.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeTimeout$1$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest>rx.CompletableTest.timeoutSwitchNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeTimeout.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeTimeout$1$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompletableOnSubscribeTimeout.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeTimeout$1$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeTimeout.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeTimeout$1$1</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)V</methodDescription><lineNumber>37</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testNull(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testSubscribeMultipleTimes(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testFromEmptyIterableWhenZeroRequestedShouldStillEmitOnCompletedEagerly(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testFromEmptyIterableWhenZeroRequestedShouldStillEmitOnCompletedEagerly(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromIterable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromIterable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.internal.operators.OnSubscribeFromIterableTest.testSubscribeMultipleTimes(rx.internal.operators.OnSubscribeFromIterableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><killingTest>rx.subjects.AsyncSubjectTest.testSubscribeAfterCompleted(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest>rx.subjects.AsyncSubjectTest.testSubscribeAfterCompleted(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest>rx.subjects.AsyncSubjectTest.testSubscribeAfterCompleted(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncSubject.java</sourceFile><mutatedClass>rx.subjects.AsyncSubject$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>35</index><killingTest>rx.subjects.AsyncSubjectTest.testSubscribeAfterCompleted(rx.subjects.AsyncSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$3</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorScanTest.testEverythingIsNull(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$3</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.ObservableTests.testCountError(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$3</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest>rx.internal.operators.OperatorReduceTest.testAggregateAsIntSumAccumulatorThrows(rx.internal.operators.OperatorReduceTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$3</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>144</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>42</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$3</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$State</mutatedClass><mutatedMethod>clear</mutatedMethod><methodDescription>()Lrx/internal/operators/OperatorWindowWithTime$State;</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimedAndCount(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$State</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/Observer;Lrx/Observable;)Lrx/internal/operators/OperatorWindowWithTime$State;</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimedAndCount(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$State</mutatedClass><mutatedMethod>empty</mutatedMethod><methodDescription>()Lrx/internal/operators/OperatorWindowWithTime$State;</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimedAndCount(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$State</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Lrx/internal/operators/OperatorWindowWithTime$State;</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testExactWindowSize(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$State</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Lrx/internal/operators/OperatorWindowWithTime$State;</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimedAndCount(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorScanTest.testScanIntegersWithoutInitialValueAndOnlyOneValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithoutInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>45</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>60</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithoutInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaSchedulersHook.java</sourceFile><mutatedClass>rx.plugins.RxJavaSchedulersHook</mutatedClass><mutatedMethod>getComputationScheduler</mutatedMethod><methodDescription>()Lrx/Scheduler;</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.BackpressureTests.testFirehoseFailsAsExpected(rx.BackpressureTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaSchedulersHook.java</sourceFile><mutatedClass>rx.plugins.RxJavaSchedulersHook</mutatedClass><mutatedMethod>getDefaultInstance</mutatedMethod><methodDescription>()Lrx/plugins/RxJavaSchedulersHook;</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.schedulers.CachedThreadSchedulerTest.testNestedScheduling(rx.schedulers.CachedThreadSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaSchedulersHook.java</sourceFile><mutatedClass>rx.plugins.RxJavaSchedulersHook</mutatedClass><mutatedMethod>getIOScheduler</mutatedMethod><methodDescription>()Lrx/Scheduler;</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.BackpressureTests.testFirehoseFailsAsExpected(rx.BackpressureTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaSchedulersHook.java</sourceFile><mutatedClass>rx.plugins.RxJavaSchedulersHook</mutatedClass><mutatedMethod>getNewThreadScheduler</mutatedMethod><methodDescription>()Lrx/Scheduler;</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.BackpressureTests.testFirehoseFailsAsExpected(rx.BackpressureTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaSchedulersHook.java</sourceFile><mutatedClass>rx.plugins.RxJavaSchedulersHook</mutatedClass><mutatedMethod>onSchedule</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/functions/Action0;</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.schedulers.NewThreadSchedulerTest.testRecursiveExecution(rx.schedulers.NewThreadSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutWithSelector$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;Ljava/lang/Long;Lrx/Scheduler$Worker;)Lrx/Subscription;</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorTimeoutWithSelectorTest.testTimeoutSelectorFirstThrows(rx.internal.operators.OperatorTimeoutWithSelectorTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTimeoutWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutWithSelector$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;Ljava/lang/Long;Lrx/Scheduler$Worker;)Lrx/Subscription;</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutWithSelector$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;Ljava/lang/Long;Lrx/Scheduler$Worker;)Lrx/Subscription;</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>44</index><killingTest>rx.internal.operators.OperatorTimeoutWithSelectorTest.testTimeoutSelectorWithFirstTimeoutFirstAndNoOtherObservable(rx.internal.operators.OperatorTimeoutWithSelectorTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorTimeoutWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutWithSelector$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;Ljava/lang/Long;Lrx/Scheduler$Worker;)Lrx/Subscription;</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>49</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutWithSelector$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;Ljava/lang/Long;Lrx/Scheduler$Worker;)Lrx/Subscription;</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest>rx.internal.operators.OperatorTimeoutWithSelectorTest.testTimeoutSelectorFirstThrows(rx.internal.operators.OperatorTimeoutWithSelectorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$9</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>517</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><killingTest>rx.CompletableTest.fromCallableThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$9</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>522</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>44</index><killingTest>rx.CompletableTest.fromCallableNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$9</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>513</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$9</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>518</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest>rx.CompletableTest.fromCallableThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$9</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>523</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>48</index><killingTest>rx.CompletableTest.fromCallableNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$25</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1831</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.CompletableTest.subscribeReportsUnsubscribed(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$25</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1836</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$25</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1837</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.CompletableTest.subscribeReportsUnsubscribedOnError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$25</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1838</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.CompletableTest.subscribeEmptyOnError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$25</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>1843</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.CompletableTest.subscribeDispose(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSampleWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithObservable$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorSampleTest.sampleWithSamplerEmptySource(rx.internal.operators.OperatorSampleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSampleWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithObservable$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorSampleTest.dontUnsubscribeChild1(rx.internal.operators.OperatorSampleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSampleWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithObservable$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSampleTest.sampleWithSamplerSourceThrows(rx.internal.operators.OperatorSampleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSampleWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithObservable$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSampleWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithObservable$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSampleTest.sampleWithSamplerEmitAndTerminate(rx.internal.operators.OperatorSampleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToMap$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorToMapTest.testToMap(rx.internal.operators.OperatorToMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToMap$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorToMapTest.testToMap(rx.internal.operators.OperatorToMapTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorToMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToMap$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToMap$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.internal.operators.OperatorToMapTest.testKeySelectorThrows(rx.internal.operators.OperatorToMapTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorToMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToMap$1</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithSingleObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSingleObservable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSingleObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSingleObservable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>63</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithBOEmptyLastViaBoundary(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorBufferWithSingleObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSingleObservable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithSingleObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSingleObservable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>48</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithSingleObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSingleObservable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>53</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer$ElementSection</mutatedClass><mutatedMethod>getNext</mutatedMethod><methodDescription>()Lrx/internal/util/IndexedRingBuffer$ElementSection;</methodDescription><lineNumber>493</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.util.IndexedRingBufferTest.testForEachAcrossSections(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer$ElementSection</mutatedClass><mutatedMethod>getNext</mutatedMethod><methodDescription>()Lrx/internal/util/IndexedRingBuffer$ElementSection;</methodDescription><lineNumber>497</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest>rx.internal.util.IndexedRingBufferTest.testConcurrentAdds(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer$ElementSection</mutatedClass><mutatedMethod>getNext</mutatedMethod><methodDescription>()Lrx/internal/util/IndexedRingBuffer$ElementSection;</methodDescription><lineNumber>494</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.internal.util.IndexedRingBufferTest.testForEachAcrossSections(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer$ElementSection</mutatedClass><mutatedMethod>getNext</mutatedMethod><methodDescription>()Lrx/internal/util/IndexedRingBuffer$ElementSection;</methodDescription><lineNumber>499</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>32</index><killingTest>rx.internal.util.IndexedRingBufferTest.testForEachAcrossSections(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer$ElementSection</mutatedClass><mutatedMethod>getNext</mutatedMethod><methodDescription>()Lrx/internal/util/IndexedRingBuffer$ElementSection;</methodDescription><lineNumber>502</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>40</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeTimeout.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeTimeout$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.CompletableTest.timeoutSwitchNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeTimeout.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeTimeout$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><killingTest>rx.CompletableTest.timeoutSwitchNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeTimeout.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeTimeout$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeTimeout.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeTimeout$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest>rx.CompletableTest.timeoutEmitError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeTimeout.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeTimeout$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>39</index><killingTest>rx.CompletableTest.timeoutSwitchNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>38</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureLatest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureLatest</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>()Lrx/internal/operators/OperatorOnBackpressureLatest;</methodDescription><lineNumber>39</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorOnBackpressureLatestTest.testSimpleBackpressure(rx.internal.operators.OperatorOnBackpressureLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl</mutatedClass><mutatedMethod>generateState</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>287</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl</mutatedClass><mutatedMethod>generateState</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>287</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(Ljava/lang/Object;JLrx/Observer;)Ljava/lang/Object;</methodDescription><lineNumber>292</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl</mutatedClass><mutatedMethod>onUnsubscribe</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>297</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnUnsubscribeHasCorrectState(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl</mutatedClass><mutatedMethod>onUnsubscribe</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>298</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnUnsubscribeHasCorrectState(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeUsing.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeUsing$DisposeAction</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/functions/Action1;Ljava/lang/Object;)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeUsing.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeUsing$DisposeAction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeUsingTest.testUsingDoesNotDisposesEagerlyBeforeCompletion(rx.internal.operators.OnSubscribeUsingTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeUsing.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeUsing$DisposeAction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.internal.operators.OnSubscribeUsingTest.testUsingDoesNotDisposesEagerlyBeforeCompletion(rx.internal.operators.OnSubscribeUsingTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeUsing.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeUsing$DisposeAction</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OnSubscribeUsingTest.testUsingDoesNotDisposesEagerlyBeforeCompletion(rx.internal.operators.OnSubscribeUsingTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeUsing.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeUsing$DisposeAction</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest>rx.internal.operators.OnSubscribeUsingTest.testUsingDoesNotDisposesEagerlyBeforeCompletion(rx.internal.operators.OnSubscribeUsingTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testPrefetchIsBounded(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testMainError(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testInnerNull(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testBackpressure(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Scheduler.java</sourceFile><mutatedClass>rx.Scheduler$Worker</mutatedClass><mutatedMethod>now</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Scheduler.java</sourceFile><mutatedClass>rx.Scheduler$Worker</mutatedClass><mutatedMethod>schedulePeriodically</mutatedMethod><methodDescription>(Lrx/functions/Action0;JJLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>20</index><killingTest>rx.schedulers.TestSchedulerTest.testPeriodicScheduling(rx.schedulers.TestSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Scheduler.java</sourceFile><mutatedClass>rx.Scheduler$Worker</mutatedClass><mutatedMethod>schedulePeriodically</mutatedMethod><methodDescription>(Lrx/functions/Action0;JJLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>162</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>63</index><killingTest>rx.schedulers.TestSchedulerTest.testPeriodicSchedulingUnsubscription(rx.schedulers.TestSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Scheduler.java</sourceFile><mutatedClass>rx.Scheduler$Worker</mutatedClass><mutatedMethod>schedulePeriodically</mutatedMethod><methodDescription>(Lrx/functions/Action0;JJLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>50</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Scheduler.java</sourceFile><mutatedClass>rx.Scheduler$Worker</mutatedClass><mutatedMethod>schedulePeriodically</mutatedMethod><methodDescription>(Lrx/functions/Action0;JJLjava/util/concurrent/TimeUnit;)Lrx/Subscription;</methodDescription><lineNumber>161</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>59</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitchIfEmpty.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorDefaultIfEmptyTest.testDefaultIfEmptyWithEmpty(rx.internal.operators.OperatorDefaultIfEmptyTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorSwitchIfEmpty.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitchIfEmpty.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSwitchIfEmptyTest.testSwitchTriggerUnsubscribe(rx.internal.operators.OperatorSwitchIfEmptyTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSwitchIfEmpty.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitchIfEmpty.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitchIfEmpty$AlternateSubscriber</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorDefaultIfEmptyTest.testDefaultIfEmptyWithEmpty(rx.internal.operators.OperatorDefaultIfEmptyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDistinct.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDistinct$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorDistinctTest.testDistinctOfNoneWithKeySelector(rx.internal.operators.OperatorDistinctTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDistinct.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDistinct$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorDistinctTest.testDistinctOfSourceWithExceptionsFromKeySelector(rx.internal.operators.OperatorDistinctTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDistinct.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDistinct$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorDistinctTest.testDistinctOfNormalSource(rx.internal.operators.OperatorDistinctTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDistinct.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDistinct$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorDistinctTest.testDistinctOfNormalSource(rx.internal.operators.OperatorDistinctTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorDistinct.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDistinct$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaObservableExecutionHook.java</sourceFile><mutatedClass>rx.plugins.RxJavaObservableExecutionHook</mutatedClass><mutatedMethod>onCreate</mutatedMethod><methodDescription>(Lrx/Observable$OnSubscribe;)Lrx/Observable$OnSubscribe;</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testConcurrentOnNextFailsValidation(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaObservableExecutionHook.java</sourceFile><mutatedClass>rx.plugins.RxJavaObservableExecutionHook</mutatedClass><mutatedMethod>onLift</mutatedMethod><methodDescription>(Lrx/Observable$Operator;)Lrx/Observable$Operator;</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.SubscriberTest.testRequestThroughMap(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaObservableExecutionHook.java</sourceFile><mutatedClass>rx.plugins.RxJavaObservableExecutionHook</mutatedClass><mutatedMethod>onSubscribeError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Ljava/lang/Throwable;</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.ObservableTests.testCustomObservableWithErrorInObservableSynchronous(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaObservableExecutionHook.java</sourceFile><mutatedClass>rx.plugins.RxJavaObservableExecutionHook</mutatedClass><mutatedMethod>onSubscribeReturn</mutatedMethod><methodDescription>(Lrx/Subscription;)Lrx/Subscription;</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.ObservableTests.testSubscribingSubscriberAsObserverMaintainsSubscriptionChain(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaObservableExecutionHook.java</sourceFile><mutatedClass>rx.plugins.RxJavaObservableExecutionHook</mutatedClass><mutatedMethod>onSubscribeStart</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable$OnSubscribe;)Lrx/Observable$OnSubscribe;</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.SubscriberTest.testRequestToObservable(rx.SubscriberTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSkipUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipUntil$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipUntil$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSkipUntilTest.otherThrowsImmediately(rx.internal.operators.OperatorSkipUntilTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSkipUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipUntil$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipUntil$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSkipUntilTest.otherFiresAndCompletes(rx.internal.operators.OperatorSkipUntilTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSkipUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipUntil$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.CompletableTest.toObservableNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.CompletableTest.toObservableError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.CompletableTest.toObservableError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.schedulers.ImmediateSchedulerTest.testRecursiveSchedulerInObservable(rx.schedulers.ImmediateSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable$3</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>436</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable$3</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>441</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorMapTest.testErrorPassesThruMap2(rx.internal.operators.OperatorMapTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable$3</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>442</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable$3</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>447</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.observables.BlockingObservableTest.testSingleDefault(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorCast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorCast$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>39</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorCastTest.testCast(rx.internal.operators.OperatorCastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorCast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorCast$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>44</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorCastTest.testCastWithWrongType(rx.internal.operators.OperatorCastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorCast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorCast$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorCastTest.testCast(rx.internal.operators.OperatorCastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorCast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorCast$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorCastTest.testCastWithWrongType(rx.internal.operators.OperatorCastTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$5</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>362</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$5</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>362</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorRetryTest.testUnsubscribeFromRetry(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$5</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>365</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><killingTest>rx.internal.operators.OperatorRetryTest.testUnsubscribeFromRetry(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$5</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>364</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorRetryTest.testUnsubscribeFromRetry(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDelayWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDelayWithSelector$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorDelayTest.testDelayWithObservableEmptyDelayer(rx.internal.operators.OperatorDelayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDelayWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDelayWithSelector$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorDelayTest.testDelayWithObservableDelayFunctionThrows(rx.internal.operators.OperatorDelayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDelayWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDelayWithSelector$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorDelayTest.testDelayWithObservableDelayThrows(rx.internal.operators.OperatorDelayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDelayWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDelayWithSelector$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest>rx.internal.operators.OperatorDelayTest.testDelayWithObservableDelayFunctionThrows(rx.internal.operators.OperatorDelayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>40</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableBoundaryThrows(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>25</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableBoundaryThrows(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMulticast$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorMulticastTest.testMulticastDisconnect(rx.internal.operators.OperatorMulticastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMulticast$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>70</index><killingTest>rx.internal.operators.OperatorMulticastTest.testMulticastDisconnect(rx.internal.operators.OperatorMulticastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMulticast$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>42</index><killingTest>rx.internal.operators.OperatorMulticastTest.testMulticastDisconnect(rx.internal.operators.OperatorMulticastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMulticast$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>74</index><killingTest>rx.internal.operators.OperatorMulticastTest.testMulticastDisconnect(rx.internal.operators.OperatorMulticastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDebounceWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithSelector$1$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorDebounceTest.debounceSelectorNormal1(rx.internal.operators.OperatorDebounceTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorDebounceWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithSelector$1$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDebounceWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithSelector$1$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorDebounceTest.debounceSelectorObservableThrows(rx.internal.operators.OperatorDebounceTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDebounceWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithSelector$1$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorDebounceTest.debounceSelectorNormal1(rx.internal.operators.OperatorDebounceTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousSingle.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousSingle$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.internal.util.ScalarSynchronousSingleTest.scalarFlatMap(rx.internal.util.ScalarSynchronousSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousSingle.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousSingle$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.internal.util.ScalarSynchronousSingleTest.syncFlatMapJustObserverNextThrows(rx.internal.util.ScalarSynchronousSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousSingle.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousSingle$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>37</index><killingTest>rx.internal.util.ScalarSynchronousSingleTest.scalarFlatMap(rx.internal.util.ScalarSynchronousSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousSingle.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousSingle$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>42</index><killingTest>rx.internal.util.ScalarSynchronousSingleTest.scalarFlatMap(rx.internal.util.ScalarSynchronousSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$UnicastSubject</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>()Lrx/observables/AsyncOnSubscribe$UnicastSubject;</methodDescription><lineNumber>624</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$UnicastSubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>636</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$UnicastSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>641</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnErrorOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$UnicastSubject</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>646</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeAutoConnect.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAutoConnect</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/observables/ConnectableObservable;ILrx/functions/Action1;)V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAutoConnect.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAutoConnect</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/observables/ConnectableObservable;ILrx/functions/Action1;)V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAutoConnect.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAutoConnect</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorReplayTest.unboundedLeavesEarly(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeAutoConnect.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAutoConnect</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>49</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testUnsubscribeAll(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testUnsubscribeAll(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SerializedSubject.java</sourceFile><mutatedClass>rx.subjects.SerializedSubject</mutatedClass><mutatedMethod>hasObservers</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SerializedSubject.java</sourceFile><mutatedClass>rx.subjects.SerializedSubject</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SerializedSubject.java</sourceFile><mutatedClass>rx.subjects.SerializedSubject</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedSubject.java</sourceFile><mutatedClass>rx.subjects.SerializedSubject</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.subjects.SerializedSubjectTest.testBasic(rx.subjects.SerializedSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorRetryWithPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorRetryWithPredicate</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>44</index><killingTest>rx.internal.operators.OperatorRetryWithPredicateTest.testUnsubscribeFromRetry(rx.internal.operators.OperatorRetryWithPredicateTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorRetryWithPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorRetryWithPredicate</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>39</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorRetryWithPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorRetryWithPredicate</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorRetryWithPredicateTest.testUnsubscribeFromRetry(rx.internal.operators.OperatorRetryWithPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorRetryWithPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorRetryWithPredicate</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>45</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest>rx.internal.operators.OperatorRetryWithPredicateTest.testUnsubscribeFromRetry(rx.internal.operators.OperatorRetryWithPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSampleWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithObservable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>66</index><killingTest>rx.internal.operators.OperatorSampleTest.testSampleOtherUnboundedIn(rx.internal.operators.OperatorSampleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSampleWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithObservable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>45</index><killingTest>rx.internal.operators.OperatorSampleTest.dontUnsubscribeChild2(rx.internal.operators.OperatorSampleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSampleWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithObservable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>50</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSampleWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithObservable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>55</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastTimed</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)V</methodDescription><lineNumber>44</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorTakeLastTimedTest.takeLastTimedWithZeroCapacity(rx.internal.operators.OperatorTakeLastTimedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastTimed</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IJLjava/util/concurrent/TimeUnit;Lrx/Scheduler;)V</methodDescription><lineNumber>44</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorTakeLastTimedTest.testTakeLastTimedWithNegativeCount(rx.internal.operators.OperatorTakeLastTimedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastTimed</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>43</index><killingTest>rx.internal.operators.OperatorTakeLastTimedTest.takeLastTimedWithZeroCapacity(rx.internal.operators.OperatorTakeLastTimedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastTimed</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest>rx.internal.operators.OperatorTakeLastTimedTest.takeLastTimedWithZeroCapacity(rx.internal.operators.OperatorTakeLastTimedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>36</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><killingTest>rx.internal.operators.OperatorTakeLastOneTest.testLastOfEmptyReturnsEmpty(rx.internal.operators.OperatorTakeLastOneTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>28</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorTakeLastOneTest.testLastWithBackpressure(rx.internal.operators.OperatorTakeLastOneTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>35</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorTakeLastOneTest.testUnsubscribesFromUpstream(rx.internal.operators.OperatorTakeLastOneTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>()Lrx/internal/operators/OperatorTakeLastOne;</methodDescription><lineNumber>18</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorTakeLastOneTest.testLastOfEmptyReturnsEmpty(rx.internal.operators.OperatorTakeLastOneTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeInterval.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeInterval$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorTimeIntervalTest.testTimeInterval(rx.internal.operators.OperatorTimeIntervalTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorTimeInterval.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeInterval$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeInterval.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeInterval$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>45</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorTimeIntervalTest.testTimeInterval(rx.internal.operators.OperatorTimeIntervalTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeInterval.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeInterval$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>45</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest>rx.internal.operators.OperatorTimeIntervalTest.testTimeInterval(rx.internal.operators.OperatorTimeIntervalTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToObservableList.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToObservableList</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>30</index><killingTest>rx.internal.operators.OperatorToObservableListTest.testList(rx.internal.operators.OperatorToObservableListTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorToObservableList.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToObservableList</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToObservableList.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToObservableList</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest>rx.internal.operators.OperatorToObservableListTest.testList(rx.internal.operators.OperatorToObservableListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToObservableList.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToObservableList</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>()Lrx/internal/operators/OperatorToObservableList;</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorToObservableListTest.testList(rx.internal.operators.OperatorToObservableListTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$RetryWithPredicate$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Notification;Lrx/Notification;)Lrx/Notification;</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>25</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$RetryWithPredicate$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Notification;Lrx/Notification;)Lrx/Notification;</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$RetryWithPredicate$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Notification;Lrx/Notification;)Lrx/Notification;</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$RetryWithPredicate$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Notification;Lrx/Notification;)Lrx/Notification;</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$6</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>328</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$6</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>323</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnErrorOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$6</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>318</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$6</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>333</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntil$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorTakeUntilTest.testTakeUntilOtherCompleted(rx.internal.operators.OperatorTakeUntilTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntil$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorTakeUntilTest.testTakeUntilOtherError(rx.internal.operators.OperatorTakeUntilTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntil$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorTakeUntilTest.testUntilFires(rx.internal.operators.OperatorTakeUntilTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTakeUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntil$2</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$RightDurationObserver</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>307</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$RightDurationObserver</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>312</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>50</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$RightDurationObserver</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>318</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeGroupJoinTest.rightDurationThrows(rx.internal.operators.OnSubscribeGroupJoinTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$ResultManager$RightDurationObserver</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>323</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber$RightDurationSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>312</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber$RightDurationSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>314</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber$RightDurationSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>307</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.rightDurationThrows(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber$RightDurationSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>302</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testNoTimedTaskAfterScheduleRetention(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>37</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testNoTimedTaskAfterScheduleRetention(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>42</index><killingTest>rx.internal.operators.OperatorConcatTest.testRequestOverflowDoesNotStallStream(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest>rx.internal.operators.OperatorConcatTest.testConcatUnsubscribeConcurrent(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest>rx.internal.operators.OperatorConcatTest.testRequestOverflowDoesNotStallStream(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>()Lrx/internal/operators/OperatorConcat;</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorConcatTest.testRequestOverflowDoesNotStallStream(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSingle.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSingle</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>29</index><killingTest>rx.internal.operators.OperatorSingleTest.testSingleOrDefaultWithEmpty(rx.internal.operators.OperatorSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSingle.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSingle</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest>rx.internal.operators.OperatorSingleTest.testSingleDoesNotRequestMoreThanItNeedsIf1Then2Requested(rx.internal.operators.OperatorSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSingle.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSingle</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>25</index><killingTest>rx.internal.operators.OnSubscribeUsingTest.testUsingWithObservableFactoryErrorDisposeEagerly(rx.internal.operators.OnSubscribeUsingTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSingle.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSingle</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>()Lrx/internal/operators/OperatorSingle;</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorSingleTest.testSingleDoesNotRequestMoreThanItNeedsIf1Then2Requested(rx.internal.operators.OperatorSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$BoundarySubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>292</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableBoundaryCompletes(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$BoundarySubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>287</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableBoundaryThrows(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$BoundarySubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>282</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testWindowViaObservableNormal1(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservable$BoundarySubscriber</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>277</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntil</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>52</index><killingTest>rx.internal.operators.OperatorTakeUntilTest.testTakeUntilOtherCompleted(rx.internal.operators.OperatorTakeUntilTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntil</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest>rx.internal.operators.OperatorTakeUntilTest.testTakeUntilOtherCompleted(rx.internal.operators.OperatorTakeUntilTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntil</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>36</index><killingTest>rx.internal.operators.OperatorTakeUntilTest.testTakeUntilOtherCompleted(rx.internal.operators.OperatorTakeUntilTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntil</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>41</index><killingTest>rx.internal.operators.OperatorTakeUntilTest.testDownstreamUnsubscribes(rx.internal.operators.OperatorTakeUntilTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingSingle.java</sourceFile><mutatedClass>rx.singles.BlockingSingle$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.singles.BlockingSingleTest.testSingleErrorChecked(rx.singles.BlockingSingleTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BlockingSingle.java</sourceFile><mutatedClass>rx.singles.BlockingSingle$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingSingle.java</sourceFile><mutatedClass>rx.singles.BlockingSingle$1</mutatedClass><mutatedMethod>onSuccess</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.singles.BlockingSingleTest.testSingleGet(rx.singles.BlockingSingleTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BlockingSingle.java</sourceFile><mutatedClass>rx.singles.BlockingSingle$1</mutatedClass><mutatedMethod>onSuccess</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapPair.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapPair$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testNormal(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorMapPair.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapPair$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapPair.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapPair$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testMergeError(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapPair.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapPair$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testCollectionFunctionThrows(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest>rx.SingleTest.doOnSubscribeShouldInvokeActionBeforeSubscriberSubscribes(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest>rx.exceptions.ExceptionsTest.testOnErrorExceptionIsThrownFromSingleDoOnSuccess(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>46</index><killingTest>rx.exceptions.ExceptionsTest.testOnErrorExceptionIsThrownFromSingleDoOnSuccess(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>203</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>205</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testNoUnsubscribeAndNoLeak(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testNoUnsubscribeAndNoLeak(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaPluginUtils.java</sourceFile><mutatedClass>rx.internal.util.RxJavaPluginUtils</mutatedClass><mutatedMethod>handleException</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>24</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.plugins.RxJavaPluginsTest.testOnErrorWhenImplementedViaSubscribe(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>RxJavaPluginUtils.java</sourceFile><mutatedClass>rx.internal.util.RxJavaPluginUtils</mutatedClass><mutatedMethod>handleException</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>26</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>RxJavaPluginUtils.java</sourceFile><mutatedClass>rx.internal.util.RxJavaPluginUtils</mutatedClass><mutatedMethod>handlePluginException</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>36</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>RxJavaPluginUtils.java</sourceFile><mutatedClass>rx.internal.util.RxJavaPluginUtils</mutatedClass><mutatedMethod>handlePluginException</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>37</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast$ParentSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>403</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.directCompletesUnsafe(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast$ParentSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>398</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast$ParentSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>393</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.oveflowMissingBackpressureException(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OnSubscribePublishMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribePublishMulticast$ParentSubscriber</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>408</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UtilityFunctions.java</sourceFile><mutatedClass>rx.internal.util.UtilityFunctions</mutatedClass><mutatedMethod>alwaysFalse</mutatedMethod><methodDescription>()Lrx/functions/Func1;</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorTakeUntilPredicateTest.takeAll(rx.internal.operators.OperatorTakeUntilPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UtilityFunctions.java</sourceFile><mutatedClass>rx.internal.util.UtilityFunctions</mutatedClass><mutatedMethod>alwaysTrue</mutatedMethod><methodDescription>()Lrx/functions/Func1;</methodDescription><lineNumber>38</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.CompletableTest.onErrorComplete(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UtilityFunctions.java</sourceFile><mutatedClass>rx.internal.util.UtilityFunctions</mutatedClass><mutatedMethod>identity</mutatedMethod><methodDescription>()Lrx/functions/Func1;</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueEffectivelyUnboundedEmptyCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>UtilityFunctions.java</sourceFile><mutatedClass>rx.internal.util.UtilityFunctions</mutatedClass><mutatedMethod>returnNull</mutatedMethod><methodDescription>()Lrx/internal/util/UtilityFunctions$NullFunction;</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingUtils.java</sourceFile><mutatedClass>rx.internal.util.BlockingUtils</mutatedClass><mutatedMethod>awaitForComplete</mutatedMethod><methodDescription>(Ljava/util/concurrent/CountDownLatch;Lrx/Subscription;)V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.internal.util.BlockingUtilsTest.shouldThrowRuntimeExceptionOnThreadInterrupted(rx.internal.util.BlockingUtilsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingUtils.java</sourceFile><mutatedClass>rx.internal.util.BlockingUtils</mutatedClass><mutatedMethod>awaitForComplete</mutatedMethod><methodDescription>(Ljava/util/concurrent/CountDownLatch;Lrx/Subscription;)V</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest>rx.internal.util.BlockingUtilsTest.shouldThrowRuntimeExceptionOnThreadInterrupted(rx.internal.util.BlockingUtilsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingUtils.java</sourceFile><mutatedClass>rx.internal.util.BlockingUtils</mutatedClass><mutatedMethod>awaitForComplete</mutatedMethod><methodDescription>(Ljava/util/concurrent/CountDownLatch;Lrx/Subscription;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest>rx.internal.util.BlockingUtilsTest.shouldThrowRuntimeExceptionOnThreadInterrupted(rx.internal.util.BlockingUtilsTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BlockingUtils.java</sourceFile><mutatedClass>rx.internal.util.BlockingUtils</mutatedClass><mutatedMethod>awaitForComplete</mutatedMethod><methodDescription>(Ljava/util/concurrent/CountDownLatch;Lrx/Subscription;)V</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMap$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMap$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMap$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.SingleTest.testMap(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMap$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorTakeTest.testTakeWithError(rx.internal.operators.OperatorTakeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupedUnicast</mutatedClass><mutatedMethod>createWith</mutatedMethod><methodDescription>(Ljava/lang/Object;ILrx/internal/operators/OperatorGroupBy$GroupBySubscriber;Z)Lrx/internal/operators/OperatorGroupBy$GroupedUnicast;</methodDescription><lineNumber>350</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>18</index><killingTest>rx.internal.operators.OperatorGroupByTest.testCompletionIfInnerNotSubscribed(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupedUnicast</mutatedClass><mutatedMethod>onComplete</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>369</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorGroupByTest.testSkippedGroup(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupedUnicast</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>365</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupByShouldPropagateError(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupedUnicast</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>361</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorGroupByTest.testOneGroupInnerRequestsTwiceBuffer(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorElementAt.java</sourceFile><mutatedClass>rx.internal.operators.OperatorElementAt</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ILjava/lang/Object;Z)V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorElementAt.java</sourceFile><mutatedClass>rx.internal.operators.OperatorElementAt</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(ILjava/lang/Object;Z)V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorElementAtTest.testElementAtWithMinusIndex(rx.internal.operators.OperatorElementAtTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorElementAt.java</sourceFile><mutatedClass>rx.internal.operators.OperatorElementAt</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorElementAtTest.testElementAtOrDefault(rx.internal.operators.OperatorElementAtTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorElementAt.java</sourceFile><mutatedClass>rx.internal.operators.OperatorElementAt</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$19</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>1873</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>47</index><killingTest>rx.SingleTest.takeUntilSourceErrorUnsubscribes_withCompletable(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$19</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>1868</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest>rx.SingleTest.takeUntilError_withCompletable_shouldMatch(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$19</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>1869</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>37</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$19</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>1871</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>43</index><killingTest>rx.SingleTest.takeUntilSourceErrorUnsubscribes_withCompletable(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>193</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorTimeoutWithSelectorTest.testTimeoutSelectorTimeoutFirst(rx.internal.operators.OperatorTimeoutWithSelectorTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorTimeoutTests.shouldSwitchToOtherAndCanBeUnsubscribedIfOnNextNotWithinTimeout(rx.internal.operators.OperatorTimeoutTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutBase.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber$1</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>198</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorTimeoutWithSelectorTest.testTimeoutSelectorTimeoutFirst(rx.internal.operators.OperatorTimeoutWithSelectorTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSingle.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSingle$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSingle.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSingle$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSingleTest.testSingleDoesNotRequestMoreThanItNeedsIf1Then2Requested(rx.internal.operators.OperatorSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSingle.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSingle$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorSingleTest.testSingleDoesNotRequestMoreThanItNeedsIf1Then2Requested(rx.internal.operators.OperatorSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSingle.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSingle$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest>rx.internal.operators.OperatorSingleTest.testSingleDoesNotRequestMoreThanItNeedsIf1Then2Requested(rx.internal.operators.OperatorSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWithLatestFrom.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWithLatestFrom</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>61</index><killingTest>rx.internal.operators.OperatorWithLatestFromTest.testUnsubscription(rx.internal.operators.OperatorWithLatestFromTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWithLatestFrom.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWithLatestFrom</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorWithLatestFromTest.testUnsubscription(rx.internal.operators.OperatorWithLatestFromTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWithLatestFrom.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWithLatestFrom</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>96</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>45</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWithLatestFrom.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWithLatestFrom</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>50</index><killingTest>rx.internal.operators.OperatorWithLatestFromTest.testUnsubscription(rx.internal.operators.OperatorWithLatestFromTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorToMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToMap</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToMap</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>46</index><killingTest>rx.internal.operators.OperatorToMapTest.testKeySelectorThrows(rx.internal.operators.OperatorToMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToMap</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorToMapTest.testMapFactoryThrows(rx.internal.operators.OperatorToMapTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorToMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToMap</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber$LeftDurationSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber$LeftDurationSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>202</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber$LeftDurationSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>195</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.leftDurationThrows(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber$LeftDurationSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$20</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>1952</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>52</index><killingTest>rx.SingleTest.takeUntilObservableFires(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$20</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>1945</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest>rx.SingleTest.takeUntilObservableFires(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$20</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>1946</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>36</index><killingTest>rx.SingleTest.takeUntilSourceErrorUnsubscribes_withObservable(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$20</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>1948</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>41</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$21</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>2023</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>52</index><killingTest>rx.SingleTest.takeUntilSingleFires(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$21</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>2016</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest>rx.SingleTest.takeUntilSingleFires(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$21</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>2017</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>36</index><killingTest>rx.SingleTest.takeUntilSourceErrorUnsubscribes_withSingle(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$21</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>2019</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>41</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>RefCountSubscription.java</sourceFile><mutatedClass>rx.subscriptions.RefCountSubscription$InnerSubscription</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>RefCountSubscription.java</sourceFile><mutatedClass>rx.subscriptions.RefCountSubscription$InnerSubscription</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RefCountSubscription.java</sourceFile><mutatedClass>rx.subscriptions.RefCountSubscription$InnerSubscription</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.subscriptions.RefCountSubscriptionTest.testMultipleClientsMainUnsubscribeFirst(rx.subscriptions.RefCountSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RefCountSubscription.java</sourceFile><mutatedClass>rx.subscriptions.RefCountSubscription$InnerSubscription</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest>rx.subscriptions.RefCountSubscriptionTest.testMultipleClientsMainUnsubscribeFirst(rx.subscriptions.RefCountSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><killingTest>rx.internal.operators.OperatorMaterializeTest.testBackpressureOnEmptyStream(rx.internal.operators.OperatorMaterializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest>rx.observables.BlockingObservableTest.testUnsubscribeFromGetIteratorWhenInterrupted(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorMaterializeTest.testBackpressureOnEmptyStream(rx.internal.operators.OperatorMaterializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>()Lrx/internal/operators/OperatorMaterialize;</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorMaterializeTest.testBackpressureOnEmptyStream(rx.internal.operators.OperatorMaterializeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorWindowWithStartEndObservableTest.testUnsubscribeAll(rx.internal.operators.OperatorWindowWithStartEndObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithStartEndObservable$1</mutatedClass><mutatedMethod>onStart</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$InnerSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>287</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorSwitchTest.testSwitchWhenOuterCompleteBeforeInner(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$InnerSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>282</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorSwitchTest.testSwitchWithSubsequenceError(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$InnerSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>277</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorSwitchTest.testUnsubscribe(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$InnerSubscriber</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSwitchTest.testUnsubscribe(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTakeLast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLast</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>34</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLast</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>34</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testTakeLastWithNegativeCount(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLast</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>36</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testTakeLastEmpty(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLast</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>45</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.internal.operators.OperatorTakeLastTest.testTakeLastEmpty(rx.internal.operators.OperatorTakeLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Boolean;</methodDescription><lineNumber>2759</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorSequenceEqualTest.testWithNull1(rx.internal.operators.OperatorSequenceEqualTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Boolean;</methodDescription><lineNumber>2760</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorSequenceEqualTest.testWithNull1(rx.internal.operators.OperatorSequenceEqualTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Boolean;</methodDescription><lineNumber>2760</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorSequenceEqualTest.testWithNull1(rx.internal.operators.OperatorSequenceEqualTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Boolean;</methodDescription><lineNumber>2762</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><killingTest>rx.internal.operators.OperatorSequenceEqualTest.test3(rx.internal.operators.OperatorSequenceEqualTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitchIfEmpty.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitchIfEmpty</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>42</index><killingTest>rx.internal.operators.OperatorSwitchIfEmptyTest.testSwitchShouldTriggerUnsubscribe(rx.internal.operators.OperatorSwitchIfEmptyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitchIfEmpty.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitchIfEmpty</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>40</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest>rx.internal.operators.OperatorSwitchIfEmptyTest.testSwitchShouldTriggerUnsubscribe(rx.internal.operators.OperatorSwitchIfEmptyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitchIfEmpty.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitchIfEmpty</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest>rx.internal.operators.OperatorSwitchIfEmptyTest.testSwitchTriggerUnsubscribe(rx.internal.operators.OperatorSwitchIfEmptyTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorSwitchIfEmpty.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitchIfEmpty</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorOnErrorResumeNextViaFunctionTest.testOnErrorResumeReceivesErrorFromPreviousNonProtectedOperator(rx.internal.operators.OperatorOnErrorResumeNextViaFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorOnExceptionResumeNextViaObservableTest.testThrowablePassesThru(rx.internal.operators.OperatorOnExceptionResumeNextViaObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorOnErrorResumeNextViaFunctionTest.testOnErrorResumeReceivesErrorFromPreviousNonProtectedOperator(rx.internal.operators.OperatorOnErrorResumeNextViaFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4$1</mutatedClass><mutatedMethod>setProducer</mutatedMethod><methodDescription>(Lrx/Producer;)V</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorOnErrorResumeNextViaFunctionTest.testOnErrorResumeReceivesErrorFromPreviousNonProtectedOperator(rx.internal.operators.OperatorOnErrorResumeNextViaFunctionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subject.java</sourceFile><mutatedClass>rx.subjects.Subject</mutatedClass><mutatedMethod>toSerialized</mutatedMethod><methodDescription>()Lrx/subjects/SerializedSubject;</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.subjects.SerializedSubjectTest.testDontWrapSerializedSubjectAgain(rx.subjects.SerializedSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subject.java</sourceFile><mutatedClass>rx.subjects.Subject</mutatedClass><mutatedMethod>toSerialized</mutatedMethod><methodDescription>()Lrx/subjects/SerializedSubject;</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.subjects.SerializedSubjectTest.testDontWrapSerializedSubjectAgain(rx.subjects.SerializedSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subject.java</sourceFile><mutatedClass>rx.subjects.Subject</mutatedClass><mutatedMethod>toSerialized</mutatedMethod><methodDescription>()Lrx/subjects/SerializedSubject;</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest>rx.subjects.SerializedSubjectTest.testDontWrapSerializedSubjectAgain(rx.subjects.SerializedSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable$9</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>678</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.observables.BlockingObservableTest.testSubscribeCallback3(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable$9</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>673</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.observables.BlockingObservableTest.testSubscribeCallback2(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable$9</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>668</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.observables.BlockingObservableTest.testSubscribeCallback1(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureDrop.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureDrop</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><killingTest>rx.internal.operators.OperatorOnBackpressureDropTest.testRequestOverflow(rx.internal.operators.OperatorOnBackpressureDropTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureDrop.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureDrop</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorOnBackpressureDropTest.testRequestOverflow(rx.internal.operators.OperatorOnBackpressureDropTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnBackpressureDrop.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnBackpressureDrop</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>()Lrx/internal/operators/OperatorOnBackpressureDrop;</methodDescription><lineNumber>39</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorOnBackpressureDropTest.testRequestOverflow(rx.internal.operators.OperatorOnBackpressureDropTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeUntilPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntilPredicate</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>26</index><killingTest>rx.internal.operators.OperatorTakeUntilPredicateTest.takeEmpty(rx.internal.operators.OperatorTakeUntilPredicateTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTakeUntilPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntilPredicate</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeUntilPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntilPredicate</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.internal.operators.OperatorTakeUntilPredicateTest.backpressure(rx.internal.operators.OperatorTakeUntilPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorSwitchTest.testUnsubscribe(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorSwitchTest.testUnsubscribe(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>()Lrx/internal/operators/OperatorSwitch;</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorSwitchTest.testUnsubscribe(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ScheduledAction.java</sourceFile><mutatedClass>rx.internal.schedulers.ScheduledAction$Remover2</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>191</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ScheduledAction.java</sourceFile><mutatedClass>rx.internal.schedulers.ScheduledAction$Remover2</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>196</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ScheduledAction.java</sourceFile><mutatedClass>rx.internal.schedulers.ScheduledAction$Remover2</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipLast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipLast</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>32</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorSkipLastTest.testSkipLastWithZeroCount(rx.internal.operators.OperatorSkipLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipLast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipLast</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>32</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorSkipLastTest.testSkipLastWithNegativeCount(rx.internal.operators.OperatorSkipLastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipLast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipLast</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>40</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorSkipLastTest.testSkipLastEmpty(rx.internal.operators.OperatorSkipLastTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>372</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>374</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeAmb.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeAmb$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>380</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorTimestamp.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimestamp$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>45</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorTimestamp.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimestamp$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimestamp.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimestamp$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorTimestampTest.timestampWithScheduler2(rx.internal.operators.OperatorTimestampTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testChildUnsubscribed(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testChildUnsubscribed(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithObservableFactory.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithObservableFactory</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest>rx.internal.operators.OperatorWindowWithObservableTest.testChildUnsubscribed(rx.internal.operators.OperatorWindowWithObservableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorTimeoutWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutWithSelector$2$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutWithSelector$2$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorTimeoutWithSelectorTest.testTimeoutSelectorSubsequentObservableThrows(rx.internal.operators.OperatorTimeoutWithSelectorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutWithSelector$2$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorTimeoutWithSelectorTest.testTimeoutSelectorWithTimeoutFirstAndNoOtherObservable(rx.internal.operators.OperatorTimeoutWithSelectorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMulticast$3</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorMulticastTest.testMulticastConnectTwice(rx.internal.operators.OperatorMulticastTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMulticast$3</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMulticast$3</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorMulticastTest.testMulticastConnectTwice(rx.internal.operators.OperatorMulticastTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$33$1$1$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>2228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.CompletableTest.unsubscribeOnNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$33$1$1$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>2230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$33$1$1$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>2230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorAny.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAny</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>30</index><killingTest>rx.internal.operators.OperatorAnyTest.testBackpressureIfNoneRequestedNoneShouldBeDelivered(rx.internal.operators.OperatorAnyTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorAny.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAny</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorAny.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAny</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest>rx.internal.operators.OperatorAnyTest.testAnyWithEmptyAndPredicate(rx.internal.operators.OperatorAnyTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleSubscriber.java</sourceFile><mutatedClass>rx.SingleSubscriber</mutatedClass><mutatedMethod>add</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.util.ScalarSynchronousSingleTest.scalarFlatMap(rx.internal.util.ScalarSynchronousSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleSubscriber.java</sourceFile><mutatedClass>rx.SingleSubscriber</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.util.ScalarSynchronousSingleTest.scalarFlatMap(rx.internal.util.ScalarSynchronousSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleSubscriber.java</sourceFile><mutatedClass>rx.SingleSubscriber</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.util.ScalarSynchronousSingleTest.scalarFlatMap(rx.internal.util.ScalarSynchronousSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedSubscriber.java</sourceFile><mutatedClass>rx.observers.SerializedSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorTakeUntilTest.testTakeUntilOtherCompleted(rx.internal.operators.OperatorTakeUntilTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedSubscriber.java</sourceFile><mutatedClass>rx.observers.SerializedSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorWithLatestFromTest.testFunctionThrows(rx.internal.operators.OperatorWithLatestFromTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerializedSubscriber.java</sourceFile><mutatedClass>rx.observers.SerializedSubscriber</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorTakeUntilTest.testTakeUntilOtherCompleted(rx.internal.operators.OperatorTakeUntilTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorAll.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAll</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>30</index><killingTest>rx.internal.operators.OperatorAllTest.testBackpressureIfNoneRequestedNoneShouldBeDelivered(rx.internal.operators.OperatorAllTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorAll.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAll</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorAll.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAll</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest>rx.internal.operators.OperatorAllTest.testEmpty(rx.internal.operators.OperatorAllTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>31</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorTimeoutWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutWithSelector$1$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutWithSelector$1$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorTimeoutWithSelectorTest.testTimeoutSelectorFirstObservableThrows(rx.internal.operators.OperatorTimeoutWithSelectorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutWithSelector$1$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorTimeoutWithSelectorTest.testTimeoutSelectorWithFirstTimeoutFirstAndNoOtherObservable(rx.internal.operators.OperatorTimeoutWithSelectorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromCallable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromCallable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>29</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest>rx.internal.operators.OnSubscribeFromCallableTest.shouldCallOnNextAndOnCompleted(rx.internal.operators.OnSubscribeFromCallableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromCallable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromCallable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>32</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.internal.operators.OnSubscribeFromCallableTest.shouldCallOnNextAndOnCompleted(rx.internal.operators.OnSubscribeFromCallableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromCallable.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromCallable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>34</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest>rx.internal.operators.OnSubscribeFromCallableTest.shouldAllowToThrowCheckedException(rx.internal.operators.OnSubscribeFromCallableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToObservableSortedList.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToObservableSortedList</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>30</index><killingTest>rx.internal.operators.OperatorToObservableSortedListTest.testBackpressureHonored(rx.internal.operators.OperatorToObservableSortedListTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorToObservableSortedList.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToObservableSortedList</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToObservableSortedList.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToObservableSortedList</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest>rx.internal.operators.OperatorToObservableSortedListTest.testBackpressureHonored(rx.internal.operators.OperatorToObservableSortedListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkip</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>34</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorSkipTest.testSkipZeroElements(rx.internal.operators.OperatorSkipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkip</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>34</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorSkipTest.testSkipNegativeElements(rx.internal.operators.OperatorSkipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkip</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorSkipTest.testSkipEmptyStream(rx.internal.operators.OperatorSkipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorIgnoreElements.java</sourceFile><mutatedClass>rx.internal.operators.OperatorIgnoreElements</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><killingTest>rx.internal.operators.OperatorIgnoreElementsTest.testErrorReceived(rx.internal.operators.OperatorIgnoreElementsTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorIgnoreElements.java</sourceFile><mutatedClass>rx.internal.operators.OperatorIgnoreElements</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorIgnoreElements.java</sourceFile><mutatedClass>rx.internal.operators.OperatorIgnoreElements</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>()Lrx/internal/operators/OperatorIgnoreElements;</methodDescription><lineNumber>29</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorIgnoreElementsTest.testErrorReceived(rx.internal.operators.OperatorIgnoreElementsTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$11</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Void;</methodDescription><lineNumber>254</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$11</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Void;</methodDescription><lineNumber>258</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$11</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Void;</methodDescription><lineNumber>257</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$12</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Void;</methodDescription><lineNumber>277</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$12</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Void;</methodDescription><lineNumber>281</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$12</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Void;</methodDescription><lineNumber>280</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.functions.FunctionsTest.testFromAction1(rx.functions.FunctionsTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$13</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Void;</methodDescription><lineNumber>300</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$13</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Void;</methodDescription><lineNumber>304</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>29</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$13</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Void;</methodDescription><lineNumber>303</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>25</index><killingTest>rx.functions.FunctionsTest.testFromAction2(rx.functions.FunctionsTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$14</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Void;</methodDescription><lineNumber>323</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$14</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Void;</methodDescription><lineNumber>327</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>32</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$14</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Void;</methodDescription><lineNumber>326</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest>rx.functions.FunctionsTest.testFromAction3(rx.functions.FunctionsTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SingleOperatorOnErrorResumeNextViaSingle.java</sourceFile><mutatedClass>rx.internal.operators.SingleOperatorOnErrorResumeNextViaSingle$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>35</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SingleOperatorOnErrorResumeNextViaSingle.java</sourceFile><mutatedClass>rx.internal.operators.SingleOperatorOnErrorResumeNextViaSingle$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>36</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleOperatorOnErrorResumeNextViaSingle.java</sourceFile><mutatedClass>rx.internal.operators.SingleOperatorOnErrorResumeNextViaSingle$1</mutatedClass><mutatedMethod>onSuccess</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>30</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.SingleTest.onErrorResumeNextViaSingleShouldNotInterruptSuccessfulSingle(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>40</index><killingTest>rx.internal.operators.OperatorBufferTest.testObservableBasedOpenerAndCloser(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$12$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>786</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.CompletableTest.timerTestScheduler(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$12$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>788</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$12$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>788</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ScheduledAction.java</sourceFile><mutatedClass>rx.internal.schedulers.ScheduledAction$Remover</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>166</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScheduledAction.java</sourceFile><mutatedClass>rx.internal.schedulers.ScheduledAction$Remover</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testNoPeriodicTimedTaskPartRetention(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScheduledAction.java</sourceFile><mutatedClass>rx.internal.schedulers.ScheduledAction$Remover</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testNoPeriodicTimedTaskPartRetention(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>40</index><killingTest>rx.internal.operators.OperatorZipTest.testStartEmptyObservables(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>116</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>36</index><killingTest>rx.internal.operators.OperatorZipTest.testAggregate3Types(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>GroupedObservable.java</sourceFile><mutatedClass>rx.observables.GroupedObservable</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/Observable$OnSubscribe;)Lrx/observables/GroupedObservable;</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>GroupedObservable.java</sourceFile><mutatedClass>rx.observables.GroupedObservable</mutatedClass><mutatedMethod>from</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/Observable;)Lrx/observables/GroupedObservable;</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>GroupedObservable.java</sourceFile><mutatedClass>rx.observables.GroupedObservable</mutatedClass><mutatedMethod>getKey</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupByShouldPropagateError(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSingleObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSingleObservable$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithBOEmptyLastViaBoundary(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSingleObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSingleObservable$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithBOBoundaryThrows(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSingleObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSingleObservable$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithBONormal1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$12</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>779</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><killingTest>rx.CompletableTest.timerTestScheduler(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$12</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>778</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.CompletableTest.timerCancel(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$12</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>781</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest>rx.CompletableTest.timerCancel(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleOperatorOnErrorResumeNextViaSingle.java</sourceFile><mutatedClass>rx.internal.operators.SingleOperatorOnErrorResumeNextViaSingle</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;)V</methodDescription><lineNumber>13</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.SingleTest.onErrorResumeNextViaSingleShouldPreventNullSingle(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleOperatorOnErrorResumeNextViaSingle.java</sourceFile><mutatedClass>rx.internal.operators.SingleOperatorOnErrorResumeNextViaSingle</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Single;Lrx/Single;)V</methodDescription><lineNumber>17</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><killingTest>rx.SingleTest.onErrorResumeNextViaSingleShouldPreventNullSingle(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SingleOperatorOnErrorResumeNextViaSingle.java</sourceFile><mutatedClass>rx.internal.operators.SingleOperatorOnErrorResumeNextViaSingle</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$3$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$3$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$3$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$6</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>447</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$6</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>438</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$6</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>450</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>41</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$22</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>1551</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$22</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>1553</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$22</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>1555</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>34</index><killingTest>rx.CompletableTest.observeOnError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDelay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDelay$1$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.SingleTest.delayWithSchedulerShouldShortCutWithFailure(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDelay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDelay$1$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest>rx.SingleTest.delayWithSchedulerShouldShortCutWithFailure(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorDelay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDelay$1$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutWithSelector$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;Ljava/lang/Long;Ljava/lang/Object;Lrx/Scheduler$Worker;)Lrx/Subscription;</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>28</index><killingTest>rx.internal.operators.OperatorTimeoutWithSelectorTest.testTimeoutSelectorSubsequentThrows(rx.internal.operators.OperatorTimeoutWithSelectorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutWithSelector$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;Ljava/lang/Long;Ljava/lang/Object;Lrx/Scheduler$Worker;)Lrx/Subscription;</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>40</index><killingTest>rx.internal.operators.OperatorTimeoutWithSelectorTest.testTimeoutSelectorWithTimeoutFirstAndNoOtherObservable(rx.internal.operators.OperatorTimeoutWithSelectorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeoutWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeoutWithSelector$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;Ljava/lang/Long;Ljava/lang/Object;Lrx/Scheduler$Worker;)Lrx/Subscription;</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.internal.operators.OperatorTimeoutWithSelectorTest.testTimeoutSelectorSubsequentThrows(rx.internal.operators.OperatorTimeoutWithSelectorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$28</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1979</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OnSubscribeCompletableTest.testEmptyObservable(rx.internal.operators.OnSubscribeCompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$28</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1984</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeCompletableTest.testErrorObservable(rx.internal.operators.OnSubscribeCompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$28</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>1989</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>617</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>618</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest>rx.SingleTest.shouldPassErrorFromCallable(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>622</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest>rx.SingleTest.shouldEmitValueFromCallable(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeTimerOnce.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeTimerOnce$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeTimerTest.testTimerOnce(rx.internal.operators.OnSubscribeTimerTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeTimerOnce.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeTimerOnce$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeTimerOnce.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeTimerOnce$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.internal.operators.OnSubscribeTimerTest.testTimerOnce(rx.internal.operators.OnSubscribeTimerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Lrx/Observable;</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorOnExceptionResumeNextViaObservableTest.testResumeNextWithRuntimeException(rx.internal.operators.OperatorOnExceptionResumeNextViaObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Lrx/Observable;</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorOnExceptionResumeNextViaObservableTest.testResumeNextWithRuntimeException(rx.internal.operators.OperatorOnExceptionResumeNextViaObservableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Lrx/Observable;</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnErrorFailedException.java</sourceFile><mutatedClass>rx.exceptions.OnErrorFailedException</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;Ljava/lang/Throwable;)V</methodDescription><lineNumber>38</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.exceptions.ExceptionsNullTest.testOnErrorFailedExceptionMessageAndNull(rx.exceptions.ExceptionsNullTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnErrorFailedException.java</sourceFile><mutatedClass>rx.exceptions.OnErrorFailedException</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.exceptions.ExceptionsNullTest.testOnErrorFailedExceptionNull(rx.exceptions.ExceptionsNullTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnErrorFailedException.java</sourceFile><mutatedClass>rx.exceptions.OnErrorFailedException</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.exceptions.ExceptionsNullTest.testOnErrorFailedExceptionNull(rx.exceptions.ExceptionsNullTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>35</index><killingTest>rx.internal.operators.OperatorGroupByTest.testEmpty(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>25</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupByUnsubscribe(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><killingTest>rx.internal.operators.OperatorGroupByTest.testCompletionIfInnerNotSubscribed(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$24$1$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1696</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.CompletableTest.onErrorResumeNextNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$24$1$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1701</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.CompletableTest.onErrorResumeNextError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$24$1$1</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>1706</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest>rx.internal.util.ScalarSynchronousSingleTest.scalarFlatMap(rx.internal.util.ScalarSynchronousSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>32</index><killingTest>rx.SingleTest.testCreateError(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink</mutatedClass><mutatedMethod>run</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink</mutatedClass><mutatedMethod>run</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin$ResultSink</mutatedClass><mutatedMethod>run</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorReplayTest.testUnsubscribeSource(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.CachedObservableTest.testValuesAndThenError(rx.internal.operators.CachedObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CachedObservable.java</sourceFile><mutatedClass>rx.internal.operators.CachedObservable$CacheState$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>171</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.ObservableTests.testCacheWithCapacity(rx.ObservableTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$29</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>8397</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$29</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>8402</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$29</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>8407</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$19$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1854</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest>rx.SingleTest.takeUntilCompletableFires(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$19$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1859</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.SingleTest.takeUntilError_withCompletable_shouldMatch(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$19$2</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>1864</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.SingleTest.takeUntilSourceErrorUnsubscribes_withCompletable(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoOnRequest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnRequest</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><killingTest>rx.internal.operators.OperatorDoOnRequestTest.dontRequestIfDownstreamRequestsLate(rx.internal.operators.OperatorDoOnRequestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoOnRequest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnRequest</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorDoOnRequestTest.dontRequestIfDownstreamRequestsLate(rx.internal.operators.OperatorDoOnRequestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoOnRequest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnRequest</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorDoOnRequestTest.testUnsubscribeHappensAgainstParent(rx.internal.operators.OperatorDoOnRequestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$30</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>8435</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorDistinctTest.testDistinctOfNoneWithKeySelector(rx.internal.operators.OperatorDistinctTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$30</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>8440</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.exceptions.ExceptionsTest.testOnErrorExceptionIsThrown(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$30</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>8445</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.exceptions.ExceptionsTest.testThreadDeathIsThrown(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSwitchTest.testUnsubscribe(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSwitch.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSwitch$SwitchSubscriber$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorSwitchTest.testUnsubscribe(rx.internal.operators.OperatorSwitchTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$20$2</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1931</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest>rx.SingleTest.takeUntilObservableCompletes(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$20$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1936</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.SingleTest.takeUntilObservableFires(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$20$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>1941</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$16$1$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1198</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest>rx.CompletableTest.delayErrorToo(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$16$1$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$16$1$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1200</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$16$1$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1183</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.CompletableTest.subscribe(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$16$1$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$16$1$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$3$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$3$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$3$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeBoundReplayBuffer</mutatedClass><mutatedMethod>truncate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorReplayTest.testSubscribersComeAndGoAtRequestBoundaries2(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeBoundReplayBuffer</mutatedClass><mutatedMethod>truncate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorReplayTest.testSubscribersComeAndGoAtRequestBoundaries2(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$SizeBoundReplayBuffer</mutatedClass><mutatedMethod>truncate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorReplayTest.testSubscribersComeAndGoAtRequestBoundaries2(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSerialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSerialize$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorSerializeTest.testSingleThreadedBasic(rx.internal.operators.OperatorSerializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSerialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSerialize$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSerializeTest.testMultiThreadedWithNPE(rx.internal.operators.OperatorSerializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSerialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSerialize$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSerializeTest.testSingleThreadedBasic(rx.internal.operators.OperatorSerializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscribers.java</sourceFile><mutatedClass>rx.observers.Subscribers$5</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OnSubscribeCompletableTest.testShouldUseUnsafeSubscribeInternallyNotSubscribe(rx.internal.operators.OnSubscribeCompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscribers.java</sourceFile><mutatedClass>rx.observers.Subscribers$5</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>224</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.CompletableTest.andThenError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscribers.java</sourceFile><mutatedClass>rx.observers.Subscribers$5</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>229</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeSingleTest.testShouldUseUnsafeSubscribeInternallyNotSubscribe(rx.internal.operators.OnSubscribeSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber$ConcatInnerSubscriber</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.CompletableTest.concatObservableSingle(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber$ConcatInnerSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.CompletableTest.concatObservableSingleThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber$ConcatInnerSubscriber</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscribers.java</sourceFile><mutatedClass>rx.observers.Subscribers$4</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.observers.SubscribersTest.testCompleted(rx.observers.SubscribersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscribers.java</sourceFile><mutatedClass>rx.observers.Subscribers$4</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>187</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.observers.SubscribersTest.testError3(rx.observers.SubscribersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscribers.java</sourceFile><mutatedClass>rx.observers.Subscribers$4</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>192</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.observers.SubscribersTest.testCreate3Value(rx.observers.SubscribersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscribers.java</sourceFile><mutatedClass>rx.observers.Subscribers$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorDematerializeTest.testHonorsContractWhenCompleted(rx.internal.operators.OperatorDematerializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscribers.java</sourceFile><mutatedClass>rx.observers.Subscribers$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.observers.SubscribersTest.testEmptyOnErrorNotImplemented(rx.observers.SubscribersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscribers.java</sourceFile><mutatedClass>rx.observers.Subscribers$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorDematerializeTest.testHonorsContractWhenCompleted(rx.internal.operators.OperatorDematerializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observers.java</sourceFile><mutatedClass>rx.observers.Observers$4</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.observers.ObserversTest.testCompleted(rx.observers.ObserversTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observers.java</sourceFile><mutatedClass>rx.observers.Observers$4</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>180</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.observers.ObserversTest.testError3(rx.observers.ObserversTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observers.java</sourceFile><mutatedClass>rx.observers.Observers$4</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>185</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.observers.ObserversTest.testCreate3Value(rx.observers.ObserversTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$22$1$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1563</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.CompletableTest.observeOnNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$22$1$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1565</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$22$1$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1565</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$22$1$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1577</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest>rx.CompletableTest.observeOnError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$22$1$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1579</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$22$1$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1579</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BlockingOperatorToFuture.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToFuture$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BlockingOperatorToFuture.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToFuture$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToFuture.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToFuture$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.BlockingOperatorToFutureTest.testToFuture(rx.internal.operators.BlockingOperatorToFutureTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$29$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>2022</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest>rx.CompletableTest.subscribeOnNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$29$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>2024</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$29$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>2024</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorUnsubscribeOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorUnsubscribeOn$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorUnsubscribeOnTest.testUnsubscribeWhenSubscribeOnAndUnsubscribeOnAreOnSameThread(rx.internal.operators.OperatorUnsubscribeOnTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorUnsubscribeOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorUnsubscribeOn$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorUnsubscribeOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorUnsubscribeOn$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorUnsubscribeOnTest.testUnsubscribeWhenSubscribeOnAndUnsubscribeOnAreOnSameThread(rx.internal.operators.OperatorUnsubscribeOnTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeTimeout.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeTimeout</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeTimeout.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeTimeout</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeTimeout.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeTimeout</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>56</index><killingTest>rx.CompletableTest.timeoutTimerCancelled(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorMaterialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMaterialize$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>112</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorObserveOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorObserveOnTest.testErrorDelayed(rx.internal.operators.OperatorObserveOnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TrampolineScheduler.java</sourceFile><mutatedClass>rx.schedulers.TrampolineScheduler$TimedAction</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Lrx/schedulers/TrampolineScheduler$TimedAction;)I</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><killingTest>rx.schedulers.TrampolineSchedulerTest.testSequenceOfDelayedActions(rx.schedulers.TrampolineSchedulerTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>TrampolineScheduler.java</sourceFile><mutatedClass>rx.schedulers.TrampolineScheduler$TimedAction</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Lrx/schedulers/TrampolineScheduler$TimedAction;)I</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TrampolineScheduler.java</sourceFile><mutatedClass>rx.schedulers.TrampolineScheduler$TimedAction</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Lrx/schedulers/TrampolineScheduler$TimedAction;)I</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><killingTest>rx.schedulers.TrampolineSchedulerTest.testSequenceOfDelayedActions(rx.schedulers.TrampolineSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$17$1$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1333</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.CompletableTest.doOnDisposeChildCancels(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$17$1$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1335</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$17$1$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1337</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>25</index><killingTest>rx.CompletableTest.subscribeDispose(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>40</index><killingTest>rx.internal.operators.OperatorDebounceTest.testDebounceNeverEmits(rx.internal.operators.OperatorDebounceTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$9</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>4589</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$9</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>4594</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$9</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>4599</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.testWithCombineLatestIssue1717(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$33$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>2210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$33$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>2215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$33$1</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>2220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.CompletableTest.unsubscribeOnNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$6</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Boolean;</methodDescription><lineNumber>4026</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.ObservableTests.testContainsWithInexistence(rx.ObservableTests)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$6</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Boolean;</methodDescription><lineNumber>4026</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$6</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Boolean;</methodDescription><lineNumber>4026</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><killingTest>rx.ObservableTests.testContainsWithInexistence(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSampleWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithTime</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>46</index><killingTest>rx.internal.operators.OperatorSampleTest.testSampleUnsubscribe(rx.internal.operators.OperatorSampleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSampleWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithTime</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSampleWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSampleWithTime</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>30</index><killingTest>rx.internal.operators.OperatorSampleTest.testSampleUnsubscribe(rx.internal.operators.OperatorSampleTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithStartEndStartThrows(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithStartEndObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithStartEndObservable$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>76</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithStartEndEndFunctionThrows(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnErrorNotImplementedException.java</sourceFile><mutatedClass>rx.exceptions.OnErrorNotImplementedException</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;Ljava/lang/Throwable;)V</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.exceptions.ExceptionsNullTest.testOnErrorNotImplementedExceptionMessageAndNull(rx.exceptions.ExceptionsNullTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnErrorNotImplementedException.java</sourceFile><mutatedClass>rx.exceptions.OnErrorNotImplementedException</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.exceptions.ExceptionsNullTest.testOnErrorNotImplementedExceptionNull(rx.exceptions.ExceptionsNullTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnErrorNotImplementedException.java</sourceFile><mutatedClass>rx.exceptions.OnErrorNotImplementedException</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.exceptions.ExceptionsNullTest.testOnErrorNotImplementedExceptionNull(rx.exceptions.ExceptionsNullTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoAfterTerminate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoAfterTerminate</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/functions/Action0;)V</methodDescription><lineNumber>36</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorDoAfterTerminateTest.nullActionShouldBeCheckedInConstructor(rx.internal.operators.OperatorDoAfterTerminateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoAfterTerminate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoAfterTerminate</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>44</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorDoAfterTerminateTest.testDoAfterTerminateCalledOnError(rx.internal.operators.OperatorDoAfterTerminateTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable$4</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>483</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable$4</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>478</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$UnicastSubject$State</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>654</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$UnicastSubject$State</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>659</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>46</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoOnRequest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnRequest$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorSampleTest.testSampleOtherUnboundedIn(rx.internal.operators.OperatorSampleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoOnRequest.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnRequest$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorDoOnRequestTest.dontRequestIfDownstreamRequestsLate(rx.internal.operators.OperatorDoOnRequestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>221</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorRetryTest.testUnsubscribeFromRetry(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>277</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorRetryTest.testUnsubscribeFromRetry(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException$WrappedPrintWriter</mutatedClass><mutatedMethod>lock</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>232</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException$WrappedPrintWriter</mutatedClass><mutatedMethod>println</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>237</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueueConsumerField</mutatedClass><mutatedMethod>casHead</mutatedMethod><methodDescription>(JJ)Z</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpmcArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueueConsumerField</mutatedClass><mutatedMethod>lvConsumerIndex</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>224</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><killingTest>rx.internal.util.ScalarSynchronousObservableTest.testBackpressureFlatMapRange(rx.internal.util.ScalarSynchronousObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><killingTest>rx.internal.util.ScalarSynchronousObservableTest.syncFlatMapJustObserverNextThrows(rx.internal.util.ScalarSynchronousObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnCompletedFailedException.java</sourceFile><mutatedClass>rx.exceptions.OnCompletedFailedException</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;Ljava/lang/Throwable;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.exceptions.ExceptionsNullTest.testOnCompleteFailedExceptionMessageAndNull(rx.exceptions.ExceptionsNullTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnCompletedFailedException.java</sourceFile><mutatedClass>rx.exceptions.OnCompletedFailedException</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>34</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.exceptions.ExceptionsNullTest.testOnCompleteFailedExceptionNull(rx.exceptions.ExceptionsNullTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipUntil</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>44</index><killingTest>rx.internal.operators.OperatorSkipUntilTest.otherEmpty(rx.internal.operators.OperatorSkipUntilTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSkipUntil.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipUntil</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeWhile</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorTakeWhileTest.testNoUnsubscribeDownstream(rx.internal.operators.OperatorTakeWhileTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTakeWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeWhile</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDistinct.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDistinct</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>56</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorDistinctTest.testDistinctOfNoneWithKeySelector(rx.internal.operators.OperatorDistinctTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDistinct.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDistinct</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>()Lrx/internal/operators/OperatorDistinct;</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorDistinctTest.testDistinctOfNone(rx.internal.operators.OperatorDistinctTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnsubscribeFailedException.java</sourceFile><mutatedClass>rx.exceptions.UnsubscribeFailedException</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;Ljava/lang/Throwable;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.exceptions.ExceptionsNullTest.testUnsubscribeFailedExceptionMessageAndNull(rx.exceptions.ExceptionsNullTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UnsubscribeFailedException.java</sourceFile><mutatedClass>rx.exceptions.UnsubscribeFailedException</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>34</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest>rx.exceptions.ExceptionsNullTest.testUnsubscribeFailedExceptionNull(rx.exceptions.ExceptionsNullTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSubscribeOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSubscribeOn$1$1$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorSubscribeOnTest.testSetProducerSynchronousRequest(rx.internal.operators.OperatorSubscribeOnTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorSubscribeOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSubscribeOn$1$1$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>NewThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.NewThreadScheduler</mutatedClass><mutatedMethod>createWorker</mutatedMethod><methodDescription>()Lrx/Scheduler$Worker;</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.schedulers.NewThreadSchedulerTest.testRecursiveExecution(rx.schedulers.NewThreadSchedulerTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>NewThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.NewThreadScheduler</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>()Lrx/schedulers/NewThreadScheduler;</methodDescription><lineNumber>32</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>166</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testWindowUnsubscribeOverlapping(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$InexactSubscriber$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>167</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$21$2</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>2012</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.SingleTest.takeUntilSingleFires(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$21$2</mutatedClass><mutatedMethod>onSuccess</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>2007</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest>rx.SingleTest.takeUntilSingleFires(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedSubscription.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedSubscription</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>32</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>SynchronizedSubscription.java</sourceFile><mutatedClass>rx.internal.util.SynchronizedSubscription</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>27</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$TimedOnAdd</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>1017</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.subjects.ReplaySubjectTest.testReplayTimestampedAfterTermination(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$TimedOnAdd</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>1024</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><killingTest>rx.subjects.ReplaySubjectTest.testReplayTimestampedDirectly(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerialSubscription.java</sourceFile><mutatedClass>rx.subscriptions.SerialSubscription$State</mutatedClass><mutatedMethod>set</mutatedMethod><methodDescription>(Lrx/Subscription;)Lrx/subscriptions/SerialSubscription$State;</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.subscriptions.SerialSubscriptionTests.getSubscriptionShouldReturnset(rx.subscriptions.SerialSubscriptionTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SerialSubscription.java</sourceFile><mutatedClass>rx.subscriptions.SerialSubscription$State</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()Lrx/subscriptions/SerialSubscription$State;</methodDescription><lineNumber>39</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.subscriptions.SerialSubscriptionTests.settingUnderlyingWhenUnsubscribedCausesImmediateUnsubscription(rx.subscriptions.SerialSubscriptionTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeSingle.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeSingle</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.SingleTest.takeUntilObservableFires(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeSingle.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeSingle</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/internal/operators/OnSubscribeSingle;</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeSingleTest.testErrorObservable(rx.internal.operators.OnSubscribeSingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions$11</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>431</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.functions.ActionsTest.testToFuncN(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions$11</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>430</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.functions.ActionsTest.testToFuncN(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions$10</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>411</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest>rx.functions.ActionsTest.testToFunc9(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions$10</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.functions.ActionsTest.testToFunc9(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest>rx.internal.operators.OnSubscribeGroupJoinTest.rightDurationSelectorThrows(rx.internal.operators.OnSubscribeGroupJoinTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$10$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>557</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.CompletableTest.repeat0Time(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$10$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>562</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.CompletableTest.fromObservableError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$CountLongHolder$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Long;Ljava/lang/Object;)Ljava/lang/Long;</methodDescription><lineNumber>4086</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$CountLongHolder$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Long;Ljava/lang/Object;)Ljava/lang/Long;</methodDescription><lineNumber>4086</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BaseLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.BaseLinkedQueueConsumerNodeRef</mutatedClass><mutatedMethod>lpConsumerNode</mutatedMethod><methodDescription>()Lrx/internal/util/atomic/LinkedQueueNode;</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BaseLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.BaseLinkedQueueConsumerNodeRef</mutatedClass><mutatedMethod>lvConsumerNode</mutatedMethod><methodDescription>()Lrx/internal/util/atomic/LinkedQueueNode;</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpscLinkedQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSerialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSerialize</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>38</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorSerializeTest.testSingleThreadedBasic(rx.internal.operators.OperatorSerializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSerialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSerialize</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>()Lrx/internal/operators/OperatorSerialize;</methodDescription><lineNumber>33</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorSerializeTest.testSingleThreadedBasic(rx.internal.operators.OperatorSerializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorIgnoreElements.java</sourceFile><mutatedClass>rx.internal.operators.OperatorIgnoreElements$1</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorIgnoreElementsTest.testCompletedOk(rx.internal.operators.OperatorIgnoreElementsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorIgnoreElements.java</sourceFile><mutatedClass>rx.internal.operators.OperatorIgnoreElements$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorIgnoreElementsTest.testErrorReceived(rx.internal.operators.OperatorIgnoreElementsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueueProducerField</mutatedClass><mutatedMethod>lvProducerIndex</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>35</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.util.JCToolsQueueTests.testSpmcOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueueProducerField</mutatedClass><mutatedMethod>soTail</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>39</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScheduledAction.java</sourceFile><mutatedClass>rx.internal.schedulers.ScheduledAction$FutureCompleter</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testSequenceOfDelayedActions(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScheduledAction.java</sourceFile><mutatedClass>rx.internal.schedulers.ScheduledAction$FutureCompleter</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>140</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.schedulers.NewThreadSchedulerTest.testNoSelfInterrupt(rx.schedulers.NewThreadSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDelayWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDelayWithSelector</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>30</index><killingTest>rx.internal.operators.OperatorDelayTest.testDelayWithObservableSingleSend1(rx.internal.operators.OperatorDelayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorDelayWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDelayWithSelector</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDistinctUntilChanged.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDistinctUntilChanged</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorDistinctUntilChangedTest.testDistinctUntilChangedOfNoneWithKeySelector(rx.internal.operators.OperatorDistinctUntilChangedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDistinctUntilChanged.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDistinctUntilChanged</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>()Lrx/internal/operators/OperatorDistinctUntilChanged;</methodDescription><lineNumber>45</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorDistinctUntilChangedTest.testDistinctUntilChangedOfNone(rx.internal.operators.OperatorDistinctUntilChangedTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>RxThreadFactory.java</sourceFile><mutatedClass>rx.internal.util.RxThreadFactory</mutatedClass><mutatedMethod>newThread</mutatedMethod><methodDescription>(Ljava/lang/Runnable;)Ljava/lang/Thread;</methodDescription><lineNumber>32</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>26</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>RxThreadFactory.java</sourceFile><mutatedClass>rx.internal.util.RxThreadFactory</mutatedClass><mutatedMethod>newThread</mutatedMethod><methodDescription>(Ljava/lang/Runnable;)Ljava/lang/Thread;</methodDescription><lineNumber>31</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$10</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test9SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$10</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>236</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>47</index><killingTest>rx.functions.FunctionsTest.testFromFunc9(rx.functions.FunctionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>254</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.functions.ActionsTest.testToFunc1(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>253</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.functions.ActionsTest.testToFunc1(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>235</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.functions.ActionsTest.testToFunc0(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>234</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.functions.ActionsTest.testToFunc0(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>292</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.functions.ActionsTest.testToFunc3(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>291</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest>rx.functions.ActionsTest.testToFunc3(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>273</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.functions.ActionsTest.testToFunc2(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.functions.ActionsTest.testToFunc2(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testMainError(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorEagerConcatMapTest.testInnerEmpty(rx.internal.operators.OperatorEagerConcatMapTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>46</index><killingTest>rx.internal.operators.OperatorReplayTest.testSynchronousDisconnect(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions$9</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>391</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>18</index><killingTest>rx.functions.ActionsTest.testToFunc8(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions$9</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>390</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.functions.ActionsTest.testToFunc8(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions$5</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>311</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest>rx.functions.ActionsTest.testToFunc4(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions$5</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>310</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest>rx.functions.ActionsTest.testToFunc4(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions$6</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>331</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.functions.ActionsTest.testToFunc5(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions$6</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>330</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.functions.ActionsTest.testToFunc5(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions$7</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>351</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><killingTest>rx.functions.ActionsTest.testToFunc6(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions$7</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>350</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.functions.ActionsTest.testToFunc6(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions$8</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>371</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><killingTest>rx.functions.ActionsTest.testToFunc7(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Actions.java</sourceFile><mutatedClass>rx.functions.Actions$8</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>370</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest>rx.functions.ActionsTest.testToFunc7(rx.functions.ActionsTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Long;Lrx/Observer;)Ljava/lang/Object;</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Long;Lrx/Observer;)Ljava/lang/Object;</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Void;Ljava/lang/Long;Lrx/Observer;)Ljava/lang/Void;</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.observables.AsyncOnSubscribeTest.testSubscribedByBufferingOperator(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Void;Ljava/lang/Long;Lrx/Observer;)Ljava/lang/Void;</methodDescription><lineNumber>212</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.observables.AsyncOnSubscribeTest.testOnCompleteOuter(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Void;Ljava/lang/Long;Lrx/Observer;)Ljava/lang/Void;</methodDescription><lineNumber>241</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Void;Ljava/lang/Long;Lrx/Observer;)Ljava/lang/Void;</methodDescription><lineNumber>240</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Long;Lrx/Observer;)Ljava/lang/Object;</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Long;Lrx/Observer;)Ljava/lang/Object;</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueueConsumerField</mutatedClass><mutatedMethod>casConsumerIndex</mutatedMethod><methodDescription>(JJ)Z</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpmcArrayQueueOfferPoll(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueueConsumerField</mutatedClass><mutatedMethod>lvConsumerIndex</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$CountHolder$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Integer;Ljava/lang/Object;)Ljava/lang/Integer;</methodDescription><lineNumber>4055</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>6</index><killingTest>rx.ObservableTests.fromArityArgs3(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$CountHolder$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Integer;Ljava/lang/Object;)Ljava/lang/Integer;</methodDescription><lineNumber>4055</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorScanTest.scanShouldPassUpstreamARequestForMaxValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeConcatArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>35</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompletableOnSubscribeConcatArray.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcatArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>36</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.CompletableTest.concatWithError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueueProducerField</mutatedClass><mutatedMethod>casProducerIndex</mutatedMethod><methodDescription>(JJ)Z</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.util.JCToolsQueueTests.testMpmcOfferUpToCapacity(rx.internal.util.JCToolsQueueTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>MpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.MpmcArrayQueueProducerField</mutatedClass><mutatedMethod>lvProducerIndex</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>39</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapPair.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapPair</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testNormal(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapPair.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapPair</mutatedClass><mutatedMethod>convertSelector</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/functions/Func1;</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorConcatTest.testConcatMapIterable(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipWhile</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>36</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorSkipWhileTest.testPredicateFatalError(rx.internal.operators.OperatorSkipWhileTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipWhile</mutatedClass><mutatedMethod>toPredicate2</mutatedMethod><methodDescription>(Lrx/functions/Func1;)Lrx/functions/Func2;</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorSkipWhileTest.testPredicateFatalError(rx.internal.operators.OperatorSkipWhileTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$19</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1422</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.CompletableTest.getNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$19</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1428</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest>rx.CompletableTest.getError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$15</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1056</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$15</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1062</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$16</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>1172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$16</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>1174</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>29</index><killingTest>rx.CompletableTest.unsubscribeOnNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MultipleAssignmentSubscription.java</sourceFile><mutatedClass>rx.subscriptions.MultipleAssignmentSubscription$State</mutatedClass><mutatedMethod>set</mutatedMethod><methodDescription>(Lrx/Subscription;)Lrx/subscriptions/MultipleAssignmentSubscription$State;</methodDescription><lineNumber>45</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.subscriptions.MultipleAssignmentSubscriptionTest.testSubscriptionRemainsAfterUnsubscribe(rx.subscriptions.MultipleAssignmentSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>MultipleAssignmentSubscription.java</sourceFile><mutatedClass>rx.subscriptions.MultipleAssignmentSubscription$State</mutatedClass><mutatedMethod>unsubscribe</mutatedMethod><methodDescription>()Lrx/subscriptions/MultipleAssignmentSubscription$State;</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.subscriptions.MultipleAssignmentSubscriptionTest.testSubscriptionRemainsAfterUnsubscribe(rx.subscriptions.MultipleAssignmentSubscriptionTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$14</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1005</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.CompletableTest.complete(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$14</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1011</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest>rx.CompletableTest.concatSingleSourceThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorUnsubscribeOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorUnsubscribeOn</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest>rx.internal.operators.OperatorUnsubscribeOnTest.testUnsubscribeWhenSubscribeOnAndUnsubscribeOnAreOnSameThread(rx.internal.operators.OperatorUnsubscribeOnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorUnsubscribeOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorUnsubscribeOn</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest>rx.internal.operators.OperatorUnsubscribeOnTest.testUnsubscribeWhenSubscribeOnAndUnsubscribeOnAreOnSameThread(rx.internal.operators.OperatorUnsubscribeOnTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>91</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><killingTest>rx.CompletableTest.complete(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$9</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test8SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$9</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>44</index><killingTest>rx.functions.FunctionsTest.testFromFunc8(rx.functions.FunctionsTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$7</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>466</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$7</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>467</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.CompletableTest.errorNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$7</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>167</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test6SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$7</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>38</index><killingTest>rx.functions.FunctionsTest.testFromFunc6(rx.functions.FunctionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$8</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test7SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$8</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>192</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>41</index><killingTest>rx.functions.FunctionsTest.testFromFunc7(rx.functions.FunctionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDelay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDelay$1$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.SingleTest.delayWithSchedulerShouldDelayCompletion(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDelay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDelay$1$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest>rx.SingleTest.delayWithSchedulerShouldDelayCompletion(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$20</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1466</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$20</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1472</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDelay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDelay$1$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.SingleTest.delayWithSchedulerShouldDelayCompletion(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDelay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDelay$1$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.SingleTest.delayWithSchedulerShouldDelayCompletion(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$6</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test5SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$6</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>35</index><killingTest>rx.functions.FunctionsTest.testFromFunc5(rx.functions.FunctionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$5</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test4SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$5</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>32</index><killingTest>rx.functions.FunctionsTest.testFromFunc4(rx.functions.FunctionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test3SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>29</index><killingTest>rx.functions.FunctionsTest.testFromFunc3(rx.functions.FunctionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test2SourcesOverload(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>26</index><killingTest>rx.functions.FunctionsTest.testFromFunc2(rx.functions.FunctionsTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><killingTest>rx.functions.FunctionsTest.testFromFunc1(rx.functions.FunctionsTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>35</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Functions.java</sourceFile><mutatedClass>rx.functions.Functions$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>38</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest>rx.functions.FunctionsTest.testFromFunc0(rx.functions.FunctionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTakeFlatMapCompletes(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorUnsubscribeOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorUnsubscribeOn$2$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorUnsubscribeOnTest.testUnsubscribeWhenSubscribeOnAndUnsubscribeOnAreOnSameThread(rx.internal.operators.OperatorUnsubscribeOnTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorUnsubscribeOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorUnsubscribeOn$2$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$1$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.SingleTest.testCreateError(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$1$1</mutatedClass><mutatedMethod>onSuccess</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$28</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>8347</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$28</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>8352</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest>rx.internal.operators.OperatorPublishFunctionTest.canBeCancelled(rx.internal.operators.OperatorPublishFunctionTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorPublish.java</sourceFile><mutatedClass>rx.internal.operators.OperatorPublish$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$12</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>4770</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OnSubscribeUsingTest.testUsingDisposesEagerlyBeforeCompletion(rx.internal.operators.OnSubscribeUsingTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$12</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>4775</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OnSubscribeUsingTest.testUsingDisposesEagerlyBeforeError(rx.internal.operators.OnSubscribeUsingTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>BaseLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.BaseLinkedQueueProducerNodeRef</mutatedClass><mutatedMethod>lpProducerNode</mutatedMethod><methodDescription>()Lrx/internal/util/atomic/LinkedQueueNode;</methodDescription><lineNumber>44</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>BaseLinkedQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.BaseLinkedQueueProducerNodeRef</mutatedClass><mutatedMethod>lvProducerNode</mutatedMethod><methodDescription>()Lrx/internal/util/atomic/LinkedQueueNode;</methodDescription><lineNumber>40</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSequenceEqual.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSequenceEqual</mutatedClass><mutatedMethod>materializeLite</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>38</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorSequenceEqualTest.testWithError1(rx.internal.operators.OperatorSequenceEqualTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSequenceEqual.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSequenceEqual</mutatedClass><mutatedMethod>sequenceEqual</mutatedMethod><methodDescription>(Lrx/Observable;Lrx/Observable;Lrx/functions/Func2;)Lrx/Observable;</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><killingTest>rx.internal.operators.OperatorSequenceEqualTest.testWithError1(rx.internal.operators.OperatorSequenceEqualTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDelay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDelay</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><killingTest>rx.internal.operators.OperatorDelayTest.testErrorRunsBeforeOnNext(rx.internal.operators.OperatorDelayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDelay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDelay</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.ObservableTests.testErrorThrownIssue1685(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeToObservableFuture.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeToObservableFuture</mutatedClass><mutatedMethod>toObservableFuture</mutatedMethod><methodDescription>(Ljava/util/concurrent/Future;)Lrx/Observable$OnSubscribe;</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OnSubscribeToObservableFutureTest.testSuccess(rx.internal.operators.OnSubscribeToObservableFutureTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeToObservableFuture.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeToObservableFuture</mutatedClass><mutatedMethod>toObservableFuture</mutatedMethod><methodDescription>(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)Lrx/Observable$OnSubscribe;</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ImmediateScheduler.java</sourceFile><mutatedClass>rx.schedulers.ImmediateScheduler</mutatedClass><mutatedMethod>createWorker</mutatedMethod><methodDescription>()Lrx/Scheduler$Worker;</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.schedulers.ImmediateSchedulerTest.testRecursiveExecution(rx.schedulers.ImmediateSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ImmediateScheduler.java</sourceFile><mutatedClass>rx.schedulers.ImmediateScheduler</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>()Lrx/schedulers/ImmediateScheduler;</methodDescription><lineNumber>33</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.schedulers.ImmediateSchedulerTest.testRecursiveExecution(rx.schedulers.ImmediateSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler$TimedAction</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lrx/Scheduler$Worker;JLrx/functions/Action0;)V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>11</index><killingTest>rx.SingleTest.delayWithSchedulerShouldDelayCompletion(rx.SingleTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>TestScheduler.java</sourceFile><mutatedClass>rx.schedulers.TestScheduler$TimedAction</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscribers.java</sourceFile><mutatedClass>rx.observers.Subscribers$3</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.observers.SubscribersTest.testError2(rx.observers.SubscribersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscribers.java</sourceFile><mutatedClass>rx.observers.Subscribers$3</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.observers.SubscribersTest.testCreate2Value(rx.observers.SubscribersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeTimed</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>35</index><killingTest>rx.internal.operators.OperatorTakeTimedTest.testTakeTimedErrorAfterTime(rx.internal.operators.OperatorTakeTimedTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorTakeTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeTimed</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$16</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1548</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$16</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>1553</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousSingle.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousSingle$ScalarSynchronousSingleAction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.util.ScalarSynchronousSingleTest.asyncObserverNextThrows(rx.internal.util.ScalarSynchronousSingleTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ScalarSynchronousSingle.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousSingle$ScalarSynchronousSingleAction</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoOnSubscribe.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnSubscribe</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnSubscribe(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoOnSubscribe.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnSubscribe</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>40</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorDoOnSubscribeTest.testDoOnSubscribe(rx.internal.operators.OperatorDoOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$17</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1733</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$17</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>1738</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observers.java</sourceFile><mutatedClass>rx.observers.Observers$3</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.observers.ObserversTest.testError2(rx.observers.ObserversTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observers.java</sourceFile><mutatedClass>rx.observers.Observers$3</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.observers.ObserversTest.testCreate2Value(rx.observers.ObserversTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$24</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>2355</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$24</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>2356</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><killingTest>rx.SingleTest.deferShouldPassNullPointerExceptionToTheSubscriberIfSingleFactoryIsNull(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$11$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>592</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.CompletableTest.fromSingleThrows(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$11$1</mutatedClass><mutatedMethod>onSuccess</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>597</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.CompletableTest.fromSingleNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDebounceWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithSelector</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>28</index><killingTest>rx.internal.operators.OperatorDebounceTest.debounceSelectorLastIsNotLost(rx.internal.operators.OperatorDebounceTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorDebounceWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithSelector</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>44</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Void;Lrx/Observer;)Ljava/lang/Void;</methodDescription><lineNumber>258</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.observables.SyncOnSubscribeTest.testUnsubscribeOutsideOfLoop(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Void;Lrx/Observer;)Ljava/lang/Void;</methodDescription><lineNumber>257</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Void;Lrx/Observer;)Ljava/lang/Void;</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.observables.SyncOnSubscribeTest.testNever(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Void;Lrx/Observer;)Ljava/lang/Void;</methodDescription><lineNumber>229</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/Observer;)Ljava/lang/Object;</methodDescription><lineNumber>166</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/Observer;)Ljava/lang/Object;</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/Observer;)Ljava/lang/Object;</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Lrx/Observer;)Ljava/lang/Object;</methodDescription><lineNumber>135</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorAsObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAsObservable</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorAsObservableTest.testHiding(rx.internal.operators.OperatorAsObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorAsObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorAsObservable</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>()Lrx/internal/operators/OperatorAsObservable;</methodDescription><lineNumber>38</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorAsObservableTest.testHiding(rx.internal.operators.OperatorAsObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDematerialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDematerialize</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorDematerializeTest.testCompletePassThru(rx.internal.operators.OperatorDematerializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDematerialize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDematerialize</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>()Lrx/internal/operators/OperatorDematerialize;</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorDematerializeTest.testCompletePassThru(rx.internal.operators.OperatorDematerializeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorWindowWithSizeTest.testWindowUnsubscribeNonOverlapping(rx.internal.operators.OperatorWindowWithSizeTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorWindowWithSize.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithSize$ExactSubscriber$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException$WrappedPrintStream</mutatedClass><mutatedMethod>lock</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.exceptions.CompositeExceptionTest.testNullElement(rx.exceptions.CompositeExceptionTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException$WrappedPrintStream</mutatedClass><mutatedMethod>println</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousSingle.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousSingle$2$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.util.ScalarSynchronousSingleTest.scalarFlatMapError(rx.internal.util.ScalarSynchronousSingleTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ScalarSynchronousSingle.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousSingle$2$1</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorEagerConcatMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>18</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$5</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>3927</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.ObservableTests.testCollectToString(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$5</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>3926</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.ObservableTests.testCollectToString(rx.ObservableTests)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorDoOnUnsubscribe.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnUnsubscribe</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>45</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorDoOnUnsubscribe.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnUnsubscribe</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipTimed</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>41</index><killingTest>rx.internal.operators.OperatorSkipTimedTest.testSkipTimedFinishBeforeTime(rx.internal.operators.OperatorSkipTimedTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorSkipTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipTimed</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>44</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingObservable.java</sourceFile><mutatedClass>rx.observables.BlockingObservable$2</mutatedClass><mutatedMethod>iterator</mutatedMethod><methodDescription>()Ljava/util/Iterator;</methodDescription><lineNumber>416</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.BlockingOperatorToIteratorTest.testExceptionThrownFromOnSubscribe(rx.internal.operators.BlockingOperatorToIteratorTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipWhile$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Integer;)Ljava/lang/Boolean;</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorSkipWhileTest.testSkipEverything(rx.internal.operators.OperatorSkipWhileTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite$1</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite$2</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimestamp.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimestamp</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorTimestampTest.timestampWithScheduler2(rx.internal.operators.OperatorTimestampTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>PlatformDependent.java</sourceFile><mutatedClass>rx.internal.util.PlatformDependent$1</mutatedClass><mutatedMethod>run</mutatedMethod><methodDescription>()Ljava/lang/ClassLoader;</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>289</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorRetryTest.testUnsubscribeFromRetry(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorRetryTest.testUnsubscribeFromRetry(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeDelaySubscription.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeDelaySubscription$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorDelayTest.testDelaySubscription(rx.internal.operators.OperatorDelayTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$18$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1796</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapNotification.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapNotification$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorMapNotificationTest.backpressure(rx.internal.operators.OperatorMapNotificationTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BehaviorSubject.java</sourceFile><mutatedClass>rx.subjects.BehaviorSubject$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.subjects.BehaviorSubjectTest.testThatObserverReceivesDefaultValueAndSubsequentEvents(rx.subjects.BehaviorSubjectTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ScalarSynchronousSingle.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousSingle$DirectScheduledEmission</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer$1</mutatedClass><mutatedMethod>createObject</mutatedMethod><methodDescription>()Lrx/internal/util/unsafe/SpscArrayQueue;</methodDescription><lineNumber>284</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.util.RxRingBufferSpscTest.addAndPoll(rx.internal.util.RxRingBufferSpscTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.RxRingBuffer$2</mutatedClass><mutatedMethod>createObject</mutatedMethod><methodDescription>()Lrx/internal/util/unsafe/SpmcArrayQueue;</methodDescription><lineNumber>294</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.util.RxRingBufferSpmcTest.addAndPoll(rx.internal.util.RxRingBufferSpmcTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompletableOnSubscribeConcat.java</sourceFile><mutatedClass>rx.internal.operators.CompletableOnSubscribeConcat</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>40</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.observables.BlockingObservableTest.testRun(rx.observables.BlockingObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest>rx.exceptions.ExceptionsTest.testThreadDeathIsThrown(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/functions/Action0;)Lrx/Subscription;</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><killingTest>rx.internal.operators.OnSubscribeCombineLatestTest.test1ToNSourcesScheduled(rx.internal.operators.OnSubscribeCombineLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorMostRecent.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorMostRecent$1</mutatedClass><mutatedMethod>iterator</mutatedMethod><methodDescription>()Ljava/util/Iterator;</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>20</index><killingTest>rx.internal.operators.BlockingOperatorMostRecentTest.testMostRecentNull(rx.internal.operators.BlockingOperatorMostRecentTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$15$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Notification;)Ljava/lang/Void;</methodDescription><lineNumber>6752</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$13$1$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>959</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.subjects.TestSubjectTest.testObserverPropagateValueInFutureTimeAfterTriggeringActions(rx.subjects.TestSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.subjects.TestSubjectTest.testObserverPropagateErrorInFutureTimeAfterTriggeringActions(rx.subjects.TestSubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>TestSubject.java</sourceFile><mutatedClass>rx.subjects.TestSubject$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.subjects.TestSubjectTest.testObserverPropagateCompletedInFutureTimeAfterTriggeringActions(rx.subjects.TestSubjectTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeTimerOnce.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeTimerOnce</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>44</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorMostRecent.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorMostRecent$MostRecentObserver</mutatedClass><mutatedMethod>getIterable</mutatedMethod><methodDescription>()Ljava/util/Iterator;</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.BlockingOperatorMostRecentTest.testMostRecentNull(rx.internal.operators.BlockingOperatorMostRecentTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>IndexedRingBuffer.java</sourceFile><mutatedClass>rx.internal.util.IndexedRingBuffer$1</mutatedClass><mutatedMethod>createObject</mutatedMethod><methodDescription>()Lrx/internal/util/IndexedRingBuffer;</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.util.IndexedRingBufferTest.removeMiddle(rx.internal.util.IndexedRingBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$24$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Notification;)Ljava/lang/Throwable;</methodDescription><lineNumber>7431</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.SingleTest.testRetryWhen(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SingleOperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.SingleOperatorZip</mutatedClass><mutatedMethod>zip</mutatedMethod><methodDescription>([Lrx/Single;Lrx/functions/FuncN;)Lrx/Single;</methodDescription><lineNumber>16</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.SingleTest.zip2Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSubscribeOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSubscribeOn</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorReplayTest.testIssue2191_SchedulerUnsubscribeOnError(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$ExactSubscriber$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>287</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithTimeTake1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMulticast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMulticast$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorMulticastTest.testMulticastConnectTwice(rx.internal.operators.OperatorMulticastTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ScalarSynchronousSingle.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousSingle$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>40</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeLastOne.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeLastOne$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>32</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorTakeLastOneTest.testLastWithBackpressure(rx.internal.operators.OperatorTakeLastOneTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$2$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMap</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>39</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorMapTest.testErrorPassesThruMap2(rx.internal.operators.OperatorMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>(Lrx/Observable;)Ljava/lang/Iterable;</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.BlockingOperatorNextTest.testNoBufferingOrBlockingOfSequence(rx.internal.operators.BlockingOperatorNextTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSequenceEqual.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSequenceEqual$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OperatorSequenceEqualTest.testWithNull1(rx.internal.operators.OperatorSequenceEqualTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SubjectSubscriptionManager.java</sourceFile><mutatedClass>rx.subjects.SubjectSubscriptionManager$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.subjects.ReplaySubjectTest.testSubscriptionLeak(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$AsyncOuterManager$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>614</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToIterator.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToIterator</mutatedClass><mutatedMethod>toIterator</mutatedMethod><methodDescription>(Lrx/Observable;)Ljava/util/Iterator;</methodDescription><lineNumber>54</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>17</index><killingTest>rx.internal.operators.BlockingOperatorToIteratorTest.testExceptionThrownFromOnSubscribe(rx.internal.operators.BlockingOperatorToIteratorTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Scheduler.java</sourceFile><mutatedClass>rx.Scheduler</mutatedClass><mutatedMethod>now</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>181</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$ThrowObservable$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>10360</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.CompletableTest.fromObservableError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeout.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeout$1$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorTimeoutTests.shouldTimeoutIfOnNextNotWithinTimeout(rx.internal.operators.OperatorTimeoutTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeDelaySubscriptionWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeDelaySubscriptionWithSelector</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><killingTest>rx.internal.operators.OperatorDelayTest.testDelayWithObservableSubscriptionFunctionThrows(rx.internal.operators.OperatorDelayTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>NewThreadWorker.java</sourceFile><mutatedClass>rx.internal.schedulers.NewThreadWorker$1</mutatedClass><mutatedMethod>run</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>3</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UtilityFunctions.java</sourceFile><mutatedClass>rx.internal.util.UtilityFunctions$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueEffectivelyUnboundedEmptyCompleted(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorFilter.java</sourceFile><mutatedClass>rx.internal.operators.OperatorFilter</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>38</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorFilterTest.testFilter(rx.internal.operators.OperatorFilterTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeDefer.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeDefer</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><killingTest>rx.internal.operators.OnSubscribeDeferTest.testDeferFunctionThrows(rx.internal.operators.OnSubscribeDeferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>RxJavaObservableExecutionHookDefault.java</sourceFile><mutatedClass>rx.plugins.RxJavaObservableExecutionHookDefault</mutatedClass><mutatedMethod>getInstance</mutatedMethod><methodDescription>()Lrx/plugins/RxJavaObservableExecutionHook;</methodDescription><lineNumber>26</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.plugins.RxJavaPluginsTest.testObservableExecutionHookDefaultImpl(rx.plugins.RxJavaPluginsTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$EmptyEvictionPolicy</mutatedClass><mutatedMethod>test</mutatedMethod><methodDescription>(Ljava/lang/Object;J)Z</methodDescription><lineNumber>1087</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatSubscriber$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$5</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()Lrx/internal/operators/OperatorReplay$ReplayBuffer;</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorReplayTest.testBackpressureBounded(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToMultimap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToMultimap$DefaultMultimapCollectionFactory</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/util/Collection;</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorToMultimapTest.testToMultimap(rx.internal.operators.OperatorToMultimapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$6</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()Lrx/internal/operators/OperatorReplay$ReplayBuffer;</methodDescription><lineNumber>176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorReplayTest.testBufferedWindowReplay(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$4</mutatedClass><mutatedMethod>connect</mutatedMethod><methodDescription>(Lrx/functions/Action1;)V</methodDescription><lineNumber>114</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorReplay.java</sourceFile><mutatedClass>rx.internal.operators.OperatorReplay$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorReplayTest.testCache(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>445</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$InexactSubscriber$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>469</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorThrottleFirst.java</sourceFile><mutatedClass>rx.internal.operators.OperatorThrottleFirst</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>38</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorThrottleFirstTest.testThrottlingWithCompleted(rx.internal.operators.OperatorThrottleFirstTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToObservableSortedList.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToObservableSortedList$1</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)I</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorToObservableSortedListTest.testSortedListWithCustomFunction(rx.internal.operators.OperatorToObservableSortedListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipTimed$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorSkipTimedTest.testSkipTimedErrorAfterTime(rx.internal.operators.OperatorSkipTimedTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeTimerPeriodically.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeTimerPeriodically</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.internal.operators.OnSubscribeTimerTest.testTimerPeriodically(rx.internal.operators.OnSubscribeTimerTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$5</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Void;)V</methodDescription><lineNumber>246</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRange.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRange</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>38</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testNoBackpressure(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>AsyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.AsyncOnSubscribe$7</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>340</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>SpmcArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpmcArrayQueueProducerIndexCacheField</mutatedClass><mutatedMethod>lvProducerIndexCache</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorScan.java</sourceFile><mutatedClass>rx.internal.operators.OperatorScan$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorScanTest.testBackpressureWithoutInitialValue(rx.internal.operators.OperatorScanTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler</mutatedClass><mutatedMethod>createWorker</mutatedMethod><methodDescription>()Lrx/Scheduler$Worker;</methodDescription><lineNumber>45</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testCancelledTasksDontRun(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithSingleObservable.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithSingleObservable$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()Lrx/Observable;</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorBufferTest.bufferWithBOEmptyLastViaBoundary(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>CompositeException.java</sourceFile><mutatedClass>rx.exceptions.CompositeException$CompositeExceptionCausalChain</mutatedClass><mutatedMethod>getMessage</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>247</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$11</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>601</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$10</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>570</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><killingTest>rx.CompletableTest.ambWithArraySecondFiresError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$17</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>1286</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.CompletableTest.doOnCompletedNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$18</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>1368</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.CompletableTest.doOnTerminateError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ExecutorScheduler.java</sourceFile><mutatedClass>rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest>rx.schedulers.ExecutorSchedulerTest.testNoTimedTaskPartRetention(rx.schedulers.ExecutorSchedulerTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$30</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>2125</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.CompletableTest.toObservableNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$1$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Notification;)Lrx/Notification;</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$33</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>2206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.CompletableTest.unsubscribeOnNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$31</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>2142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.CompletableTest.toSingleSupplierError(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$32</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()Ljava/lang/Object;</methodDescription><lineNumber>2189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.CompletableTest.toSingleDefaultNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.CompletableTest.never(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeout.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeout$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;Ljava/lang/Long;Lrx/Scheduler$Worker;)Lrx/Subscription;</methodDescription><lineNumber>39</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorTimeoutTests.shouldUnsubscribeFromUnderlyingSubscriptionOnImmediatelyComplete(rx.internal.operators.OperatorTimeoutTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeout.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeout$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/internal/operators/OperatorTimeoutBase$TimeoutSubscriber;Ljava/lang/Long;Ljava/lang/Object;Lrx/Scheduler$Worker;)Lrx/Subscription;</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.internal.operators.OperatorTimeoutTests.shouldNotTimeoutIfSecondOnNextWithinTimeout(rx.internal.operators.OperatorTimeoutTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest>rx.internal.operators.OperatorBufferTest.testBufferStopsWhenUnsubscribed1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDebounceWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDebounceWithTime$1$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>79</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.internal.operators.OperatorDebounceTest.testDebounceWithCompleted(rx.internal.operators.OperatorDebounceTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorBufferWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorBufferWithTime$InexactSubscriber$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorBufferTest.testBufferStopsWhenUnsubscribed1(rx.internal.operators.OperatorBufferTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$21</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>1514</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><killingTest>rx.CompletableTest.liftReturnsNull(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$23</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>1617</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.CompletableTest.onErrorComplete(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$24</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Completable$CompletableSubscriber;)V</methodDescription><lineNumber>1666</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>17</index><killingTest>rx.CompletableTest.onErrorResumeNextNormal(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorMostRecent.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorMostRecent</mutatedClass><mutatedMethod>mostRecent</mutatedMethod><methodDescription>(Lrx/Observable;Ljava/lang/Object;)Ljava/lang/Iterable;</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.BlockingOperatorMostRecentTest.testMostRecentNull(rx.internal.operators.BlockingOperatorMostRecentTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UtilityFunctions.java</sourceFile><mutatedClass>rx.internal.util.UtilityFunctions$AlwaysTrue</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Boolean;</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.CompletableTest.onErrorComplete(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$9</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>1055</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>21</index><killingTest>rx.SingleTest.zip5Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$8</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>1020</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>18</index><killingTest>rx.SingleTest.zip4Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Lrx/Observable;</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorOnErrorReturnTest.testResumeNext(rx.internal.operators.OperatorOnErrorReturnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorOnErrorResumeNextViaFunction.java</sourceFile><mutatedClass>rx.internal.operators.OperatorOnErrorResumeNextViaFunction$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)Lrx/Observable;</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorOnErrorResumeNextViaObservableTest.testResumeNextWithFailedOnSubscribe(rx.internal.operators.OperatorOnErrorResumeNextViaObservableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscriptions.java</sourceFile><mutatedClass>rx.subscriptions.Subscriptions$Unsubscribed</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.subscriptions.SubscriptionsTest.testUnsubscribed(rx.subscriptions.SubscriptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$7</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>987</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.SingleTest.zip3Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$6</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>956</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.SingleTest.zip2Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapPair.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapPair$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;)Lrx/Observable;</methodDescription><lineNumber>50</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorConcatTest.testConcatMapIterable(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorWindowWithTime.java</sourceFile><mutatedClass>rx.internal.operators.OperatorWindowWithTime$ExactSubscriber$2</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>301</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorWindowWithTimeTest.testTimed(rx.internal.operators.OperatorWindowWithTimeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>UtilityFunctions.java</sourceFile><mutatedClass>rx.internal.util.UtilityFunctions$AlwaysFalse</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Boolean;</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorTakeUntilPredicateTest.takeAll(rx.internal.operators.OperatorTakeUntilPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorToFuture.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorToFuture</mutatedClass><mutatedMethod>toFuture</mutatedMethod><methodDescription>(Lrx/Observable;)Ljava/util/concurrent/Future;</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>41</index><killingTest>rx.internal.operators.BlockingOperatorToFutureTest.testGetAfterCancel(rx.internal.operators.BlockingOperatorToFutureTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber$OnSubscribeAction$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeDelaySubscription.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeDelaySubscription</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>PublishSubject.java</sourceFile><mutatedClass>rx.subjects.PublishSubject$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.subjects.PublishSubjectTest.testCompletedStopsEmittingData(rx.subjects.PublishSubjectTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>498</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDelayWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDelayWithSelector$1$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorDelayTest.testDelayWithObservableSingleSend1(rx.internal.operators.OperatorDelayTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>NotificationLite.java</sourceFile><mutatedClass>rx.internal.operators.NotificationLite$OnErrorSentinel</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$21</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>7047</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest>rx.internal.operators.OperatorReplayTest.testWindowedReplaySelector(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$22</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>7082</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$25$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Notification;)Ljava/lang/Throwable;</methodDescription><lineNumber>7469</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$20</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>6974</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$27</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>8304</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorTakeTest.testUnsubscribeFromSynchronousInfiniteObservable(rx.internal.operators.OperatorTakeTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$25</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>7466</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$23</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>7087</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$24</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>7428</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest>rx.internal.operators.OperatorRetryTest.testOnCompletedFromNotificationHandler(rx.internal.operators.OperatorRetryTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToMap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToMap$DefaultToMapFactory</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()Ljava/util/Map;</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorToMapTest.testToMap(rx.internal.operators.OperatorToMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeWhile.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeWhile$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Integer;)Ljava/lang/Boolean;</methodDescription><lineNumber>37</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorTakeWhileTest.testNoUnsubscribeDownstream(rx.internal.operators.OperatorTakeWhileTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$10</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>4655</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorDoOnEachTest.testOnErrorThrows(rx.internal.operators.OperatorDoOnEachTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$11</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>4693</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorIgnoreElementsTest.testDoesNotHangAndProcessesAllUsingBackpressure(rx.internal.operators.OperatorIgnoreElementsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$16</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>6811</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorReplayTest.testSynchronousDisconnect(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$17</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>6847</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorReplayTest.testBufferedReplaySelector(rx.internal.operators.OperatorReplayTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$18</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>6931</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$19</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()Lrx/observables/ConnectableObservable;</methodDescription><lineNumber>6969</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$13</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Boolean;</methodDescription><lineNumber>6236</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><killingTest>rx.ObservableTests.testOfTypeWithPolymorphism(rx.ObservableTests)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$14</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>6715</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$15</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>6749</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>13</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Subscriptions.java</sourceFile><mutatedClass>rx.subscriptions.Subscriptions$FutureSubscription</mutatedClass><mutatedMethod>isUnsubscribed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorRetryWithPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><killingTest>rx.internal.operators.OperatorRetryWithPredicateTest.testUnsubscribeFromRetry(rx.internal.operators.OperatorRetryWithPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorLatest.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorLatest</mutatedClass><mutatedMethod>latest</mutatedMethod><methodDescription>(Lrx/Observable;)Ljava/lang/Iterable;</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.internal.operators.BlockingOperatorLatestTest.testEmpty(rx.internal.operators.BlockingOperatorLatestTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorLatest.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorLatest$1</mutatedClass><mutatedMethod>iterator</mutatedMethod><methodDescription>()Ljava/util/Iterator;</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>18</index><killingTest>rx.internal.operators.BlockingOperatorLatestTest.testEmpty(rx.internal.operators.BlockingOperatorLatestTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$14$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Notification;)Ljava/lang/Void;</methodDescription><lineNumber>6718</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToObservableSortedList.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToObservableSortedList$DefaultComparableFunction</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Object;)I</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>16</index><killingTest>rx.internal.operators.OperatorToObservableSortedListTest.testBackpressureHonored(rx.internal.operators.OperatorToObservableSortedListTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeDelaySubscriptionWithSelector.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeDelaySubscriptionWithSelector$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorDelayTest.testDelayWithObservableSubscriptionThrows(rx.internal.operators.OperatorDelayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$DefaultOnAdd</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>997</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest>rx.subjects.ReplaySubjectTest.testReplay1Directly(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Completable.java</sourceFile><mutatedClass>rx.Completable$22$1</mutatedClass><mutatedMethod>onSubscribe</mutatedMethod><methodDescription>(Lrx/Subscription;)V</methodDescription><lineNumber>1587</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$NeverObservable</mutatedClass><mutatedMethod>instance</mutatedMethod><methodDescription>()Lrx/Observable$NeverObservable;</methodDescription><lineNumber>10326</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><killingTest>rx.internal.operators.OnSubscribeCompletableTest.testNeverObservable(rx.internal.operators.OnSubscribeCompletableTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorConcat.java</sourceFile><mutatedClass>rx.internal.operators.OperatorConcat$ConcatProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorConcatTest.testRequestOverflowDoesNotStallStream(rx.internal.operators.OperatorConcatTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeJoin</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><killingTest>rx.internal.operators.OnSubscribeJoinTest.rightDurationSelectorThrows(rx.internal.operators.OnSubscribeJoinTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>OnSubscribeGroupJoin.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeGroupJoin$WindowObservableFunc</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>347</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>20</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorMapPair.java</sourceFile><mutatedClass>rx.internal.operators.OperatorMapPair$2$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorFlatMapTest.testNormal(rx.internal.operators.OperatorFlatMapTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Subscribers.java</sourceFile><mutatedClass>rx.observers.Subscribers$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.observers.SubscribersTest.testCreate1Value(rx.observers.SubscribersTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeDelaySubscriptionOther.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeDelaySubscriptionOther</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>75</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>25</index><killingTest>rx.internal.operators.OnSubscribeDelaySubscriptionOtherTest.testBackpressurePassesThrough(rx.internal.operators.OnSubscribeDelaySubscriptionOtherTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeFromArray.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeFromArray</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>32</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.internal.operators.OnSubscribeFromArrayTest.simple(rx.internal.operators.OnSubscribeFromArrayTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$AddTimestamped</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>972</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueTimeBounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$15</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>1506</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$13</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>1219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>33</index><killingTest>rx.SingleTest.zip9Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$12</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>1175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>30</index><killingTest>rx.SingleTest.zip8Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$11</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>1133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>27</index><killingTest>rx.SingleTest.zip7Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$GroupByProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorGroupByTest.testCompletionIfInnerNotSubscribed(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$10</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>1093</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>24</index><killingTest>rx.SingleTest.zip6Singles(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observers.java</sourceFile><mutatedClass>rx.observers.Observers$2</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.observers.ObserversTest.testCreate1Value(rx.observers.ObserversTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$18</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>1771</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorZip.java</sourceFile><mutatedClass>rx.internal.operators.OperatorZip$ZipProducer</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest>rx.internal.operators.OperatorZipTest.testZipObservableObservableBackpressure(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeInterval.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeInterval</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>36</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorTimeIntervalTest.testTimeInterval(rx.internal.operators.OperatorTimeIntervalTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$RetryWithPredicate</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>109</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$EmptyHolder$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>1194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>4</index><killingTest>rx.internal.operators.OnSubscribeRangeTest.testEmptyRangeSendsOnCompleteEagerlyWithRequestZero(rx.internal.operators.OnSubscribeRangeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTimeout.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTimeout$2$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest>rx.internal.operators.OperatorTimeoutTests.shouldSwitchToOtherAndCanBeUnsubscribedIfOnNextNotWithinTimeout(rx.internal.operators.OperatorTimeoutTests)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$22</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>2208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.SingleTest.doOnErrorShouldCallActionIfErrorHasOccurred(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$23</mutatedClass><mutatedMethod>onNext</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>2246</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.exceptions.ExceptionsTest.testOnErrorExceptionIsThrownFromSingleDoOnSuccess(rx.exceptions.ExceptionsTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$RemoveTimestamped</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Object;)Ljava/lang/Object;</methodDescription><lineNumber>980</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.subjects.ReplaySubjectTest.testSizeAndHasAnyValueTimeBounded(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnSubscribeRedo.java</sourceFile><mutatedClass>rx.internal.operators.OnSubscribeRedo$RedoFinite</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Observable;)Lrx/Observable;</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><killingTest>rx.CompletableTest.repeat1Time(rx.CompletableTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$ThreadWorker</mutatedClass><mutatedMethod>getExpirationTime</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorGroupBy.java</sourceFile><mutatedClass>rx.internal.operators.OperatorGroupBy$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>73</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.internal.operators.OperatorGroupByTest.testGroupByUnsubscribe(rx.internal.operators.OperatorGroupByTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BlockingOperatorNext.java</sourceFile><mutatedClass>rx.internal.operators.BlockingOperatorNext$1</mutatedClass><mutatedMethod>iterator</mutatedMethod><methodDescription>()Ljava/util/Iterator;</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><killingTest>rx.internal.operators.BlockingOperatorNextTest.testNoBufferingOrBlockingOfSequence(rx.internal.operators.BlockingOperatorNextTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>BufferUntilSubscriber.java</sourceFile><mutatedClass>rx.internal.operators.BufferUntilSubscriber$State</mutatedClass><mutatedMethod>casObserverRef</mutatedMethod><methodDescription>(Lrx/Observer;Lrx/Observer;)Z</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><killingTest>rx.observables.AsyncOnSubscribeTest.testUnderdeliveryCorrection(rx.observables.AsyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>SyncOnSubscribe.java</sourceFile><mutatedClass>rx.observables.SyncOnSubscribe$5</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/lang/Void;)V</methodDescription><lineNumber>264</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.observables.SyncOnSubscribeTest.testUnsubscribeOutsideOfLoop(rx.observables.SyncOnSubscribeTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>ScalarSynchronousObservable.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousObservable$ScalarAsyncOnSubscribe</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$3</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>148</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest>rx.subjects.ReplaySubjectTest.testTerminateOnce(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$5</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>347</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>ReplaySubject.java</sourceFile><mutatedClass>rx.subjects.ReplaySubject$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/subjects/SubjectSubscriptionManager$SubjectObserver;)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><killingTest>rx.subjects.ReplaySubjectTest.testSubscriptionLeak(rx.subjects.ReplaySubjectTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>OperatorSubscribeOn.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSubscribeOn$1$1$1$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>85</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>Single.java</sourceFile><mutatedClass>rx.Single$5$1</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>684</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OnErrorThrowable.java</sourceFile><mutatedClass>rx.exceptions.OnErrorThrowable$OnNextValue$Primitives</mutatedClass><mutatedMethod>create</mutatedMethod><methodDescription>()Ljava/util/Set;</methodDescription><lineNumber>138</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>58</index><killingTest>rx.SingleTest.doOnSuccessShouldNotSwallowExceptionThrownByAction(rx.SingleTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorSkipLastTimed.java</sourceFile><mutatedClass>rx.internal.operators.OperatorSkipLastTimed</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorSkipLastTimedTest.testSkipLastTimedCompleteBeforeTime(rx.internal.operators.OperatorSkipLastTimedTest)</killingTest></mutation>
<mutation detected='false' status='NO_COVERAGE'><sourceFile>OperatorRetryWithPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber</mutatedClass><mutatedMethod>onError</mutatedMethod><methodDescription>(Ljava/lang/Throwable;)V</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$4</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Ljava/util/List;)[Lrx/Observable;</methodDescription><lineNumber>3056</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorZipTest.testZipObservableObservableBackpressure(rx.internal.operators.OperatorZipTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$1</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$8</mutatedClass><mutatedMethod>onCompleted</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>4555</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest>rx.ObservableDoOnTest.testDoOnCompleted(rx.ObservableDoOnTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>Observable.java</sourceFile><mutatedClass>rx.Observable$7</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)V</methodDescription><lineNumber>4220</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><killingTest>rx.internal.operators.OperatorDefaultIfEmptyTest.testDefaultIfEmptyWithEmpty(rx.internal.operators.OperatorDefaultIfEmptyTest)</killingTest></mutation>
<mutation detected='true' status='TIMED_OUT'><sourceFile>CachedThreadScheduler.java</sourceFile><mutatedClass>rx.schedulers.CachedThreadScheduler$CachedWorkerPool$1</mutatedClass><mutatedMethod>run</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><killingTest/></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>SpscArrayQueue.java</sourceFile><mutatedClass>rx.internal.util.unsafe.SpscArrayQueueColdField</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>26</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorDoOnEach.java</sourceFile><mutatedClass>rx.internal.operators.OperatorDoOnEach</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>36</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorDoOnEachTest.testOnErrorThrows(rx.internal.operators.OperatorDoOnEachTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorCast.java</sourceFile><mutatedClass>rx.internal.operators.OperatorCast</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/Subscriber;)Lrx/Subscriber;</methodDescription><lineNumber>35</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><killingTest>rx.internal.operators.OperatorCastTest.testCast(rx.internal.operators.OperatorCastTest)</killingTest></mutation>
<mutation detected='false' status='SURVIVED'><sourceFile>ScalarSynchronousSingle.java</sourceFile><mutatedClass>rx.internal.util.ScalarSynchronousSingle$NormalScheduledEmission</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>(Lrx/SingleSubscriber;)V</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>11</index><killingTest/></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorTakeUntilPredicate.java</sourceFile><mutatedClass>rx.internal.operators.OperatorTakeUntilPredicate$1</mutatedClass><mutatedMethod>request</mutatedMethod><methodDescription>(J)V</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorTakeUntilPredicateTest.backpressure(rx.internal.operators.OperatorTakeUntilPredicateTest)</killingTest></mutation>
<mutation detected='true' status='KILLED'><sourceFile>OperatorToMultimap.java</sourceFile><mutatedClass>rx.internal.operators.OperatorToMultimap$DefaultToMultimapFactory</mutatedClass><mutatedMethod>call</mutatedMethod><methodDescription>()Ljava/util/Map;</methodDescription><lineNumber>45</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><killingTest>rx.internal.operators.OperatorToMultimapTest.testToMultimap(rx.internal.operators.OperatorToMultimapTest)</killingTest></mutation>
</mutations>
